export const title = "Smart Chain Address Methods";
export const description = "This document contains Address methods for a Smart Chain.";

# Address Index

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## getaddressbalance

**getaddressbalance '\{ "addresses" : \[ "address" , ... ] }'**

The `getaddressbalance` method returns the confirmed balance for an address, or addresses. It requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name      | Type     | Description |
| --------- | -------- | ----------- |
| "address" | (string) | the address |

### Response

| Name       | Type     | Description                                                        |
| ---------- | -------- | ------------------------------------------------------------------ |
| "balance"  | (number) | the current confirmed balance in satoshis                          |
| "received" | (number) | the total confirmed number of satoshis received (including change) |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddressbalance '{"addresses":["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "balance": 40000,
    "received": 1011916229
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressbalance", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "balance": 40000,
      "received": 1011916229
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getaddressdeltas

**getaddressdeltas '\{ "addresses" : \[ "address" , ... ] }'**

**getaddressdeltas '\{ "addresses" : \[ "address" , ... ] , "start": start, "end": end, "chainInfo": boolean }'**

The `getaddressdeltas` method returns all confirmed balance changes of an address. The user can optionally limit the response to a given interval of blocks. The method requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name        | Type      | Description                                                             |
| ----------- | --------- | ----------------------------------------------------------------------- |
| "address"   | (string)  | the address                                                             |
| "start"     | (number)  | the start block height                                                  |
| "end"       | (number)  | the end block height                                                    |
| "chainInfo" | (boolean) | include chain info in results (only applies if start and end specified) |

### Response

| Name       | Type     | Description                       |
| ---------- | -------- | --------------------------------- |
| "satoshis" | (number) | the difference in satoshis        |
| "txid"     | (string) | the related transaction id        |
| "index"    | (number) | the related input or output index |
| "height"   | (number) | the block height                  |
| "address"  | (string) | the address                       |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddressdeltas '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "satoshis": 1011876229,
      "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
      "index": 0,
      "blockindex": 0,
      "height": 1,
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getaddressdeltas '{"addresses":["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"],"start":1,"end":200,"chainInfo":true}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "deltas": [
      {
        "satoshis": 1011876229,
        "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
        "index": 0,
        "blockindex": 0,
        "height": 1,
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
      }
    ],
    "start": {
      "hash": "022df4cd1b0bdf548fedc48f27c6367536a560857f61f9bec4b35179c8a45734",
      "height": 1
    },
    "end": {
      "hash": "001fd35407abd8f4e2ec9734ce6f91d820ff553efcb9c39d657afed84da84963",
      "height": 200
    }
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressdeltas", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "satoshis": 1011876229,
        "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
        "index": 0,
        "blockindex": 0,
        "height": 1,
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressdeltas", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"],"start":1,"end":200,"chainInfo":true}]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "deltas": [
        {
          "satoshis": 1011876229,
          "txid": "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
          "index": 0,
          "blockindex": 0,
          "height": 1,
          "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"
        }
      ],
      "start": {
        "hash": "022df4cd1b0bdf548fedc48f27c6367536a560857f61f9bec4b35179c8a45734",
        "height": 1
      },
      "end": {
        "hash": "001fd35407abd8f4e2ec9734ce6f91d820ff553efcb9c39d657afed84da84963",
        "height": 200
      }
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getaddressmempool

**getaddressmempool '\{ "addresses" : \[ "address" , ... ] }'**

The `getaddressmempool` method returns all mempool deltas for an address, or addresses. The method requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name      | Type     | Description |
| --------- | -------- | ----------- |
| "address" | (string) | the address |

### Response

| Name        | Type     | Description                                            |
| ----------- | -------- | ------------------------------------------------------ |
| "address"   | (string) | the address                                            |
| "txid"      | (string) | the related txid                                       |
| "index"     | (number) | the related input or output index                      |
| "satoshis"  | (number) | the difference in satoshis                             |
| "timestamp" | (number) | the time the transaction entered the mempool (seconds) |
| "prevtxid"  | (string) | the previous txid (if spending)                        |
| "prevout"   | (string) | the previous transaction output index (if spending)    |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddressmempool '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
      "txid": "55c9830c0b2efcbbbac4fb813ff0d85722c6d720a748459287b60ef96cdb6732",
      "index": 1,
      "satoshis": 200000000,
      "timestamp": 1536356143
    }
  ]
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressmempool", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
        "txid": "55c9830c0b2efcbbbac4fb813ff0d85722c6d720a748459287b60ef96cdb6732",
        "index": 1,
        "satoshis": 200000000,
        "timestamp": 1536356143
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getaddresstxids

**getaddresstxids '\{ "addresses" : \[ "address" , ... ] }'**

The `getaddresstxids` method returns the txids for an address, or addresses. It requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name      | Type     | Description            |
| --------- | -------- | ---------------------- |
| "address" | (string) | the address            |
| "start"   | (number) | the start block height |
| "end"     | (number) | the end block height   |

### Response

| Name              | Type     | Description        |
| ----------------- | -------- | ------------------ |
| "transaction\_id" | (string) | the transaction id |

#### 📌 Examples

Command:

```bash
komodo-cli getaddresstxids '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb","RQUAkqRiRMqxcNrB29B4duTK4qkqfV9HVJ"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
      "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
      "800e4331018d02458ff4f2a7722f0508b810f7fcf53bc1c5ac85aec4e5fa706b",
      "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
      "275f8383d85c0873c91ebfea3917d4136c89f43526da053177922d6c036634af"
  ]
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddresstxids", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "39c61e8ea769ba1fc971cb7dadc531f25a2528d01a4244f379043248b6c51cc1",
      "800e4331018d02458ff4f2a7722f0508b810f7fcf53bc1c5ac85aec4e5fa706b",
      "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
      "275f8383d85c0873c91ebfea3917d4136c89f43526da053177922d6c036634af"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getaddressutxos

**getaddressutxos '\{ "addresses" : \[ "address" , ... ], "chaininfo" }'**

The `getaddressutxos` method returns all unspent outputs for an address. It requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name        | Type      | Description                     |
| ----------- | --------- | ------------------------------- |
| "address"   | (string)  | the address                     |
| "chainInfo" | (boolean) | include chain info with results |

### Response

| Name          | Type     | Description                          |
| ------------- | -------- | ------------------------------------ |
| "address"     | (string) | the address                          |
| "txid"        | (string) | the output txid                      |
| "height"      | (number) | the block height                     |
| "outputIndex" | (number) | the output index                     |
| "script"      | (string) | the script hex encoded               |
| "satoshis"    | (number) | the number of satoshis of the output |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddressutxos '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
      "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
      "outputIndex": 0,
      "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
      "satoshis": 10000,
      "height": 3
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getaddressutxos '{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"], "chainInfo": true}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "utxos": [
      {
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
        "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
        "outputIndex": 0,
        "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
        "satoshis": 10000,
        "height": 3
      }
    ],
    "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "height": 398
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressutxos", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
        "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
        "outputIndex": 0,
        "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
        "satoshis": 10000,
        "height": 3
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressutxos", "params": [{"addresses": ["RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb"], "chainInfo": true}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "utxos": [
        {
          "address": "RTTg3izdeVnqkTTxjzsPFrdUQexgqCy1qb",
          "txid": "2a3c3664851370ff762b47d735cc661e3dbce4cf36b6c1b74799f3b1c847bd52",
          "outputIndex": 0,
          "script": "2102e0d9ea73a391400ed2cb090e029d3f03eda0efaf371da11f436c076d817025e4ac",
          "satoshis": 10000,
          "height": 3
        }
      ],
      "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
      "height": 398
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getsnapshot

**getsnapshot top**

The `getsnapshot` method returns a snapshot of addresses and their amounts at the Smart Chain's current height.

The method requires [addressindex](/smart-chains/setup/common-runtime-parameters/#addressindex) to be enabled.

### Arguments

| Name  | Type               | Description                                           |
| ----- | ------------------ | ----------------------------------------------------- |
| "top" | (number, optional) | Only return this many addresses, i.e. top N rich list |

### Response

| Name               | Type             | Description                                         |
| ------------------ | ---------------- | --------------------------------------------------- |
| "addresses"        | (array of jsons) | the array containing the address and amount details |
| "addr"             | (string)         | an address                                          |
| "amount"           | (number)         | the amount of coins in the above address            |
| "total"            | (numeric)        | the total amount in snapshot                        |
| "average"          | (numeric)        | the average amount in each address                  |
| "utxos"            | (number)         | the total number of utxos in snapshot               |
| "total\_addresses" | (number)         | the total number of addresses in snapshot,          |
| "start\_height"    | (number)         | the block height snapshot began                     |
| "ending\_height"   | (number)         | the block height snapshot finished,                 |
| "start\_time"      | (number)         | the unix epoch time snapshot started                |
| "end\_time"        | (number)         | the unix epoch time snapshot finished               |

#### 📌 Examples

Command:

```bash
./komodo-cli getsnapshot 5
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "start_time": 1552473201,
    "addresses": [
      {
        "addr": "RRyyejME7LRTuvdziWsXkAbSW1fdiohGwK",
        "amount": "6193787.46198546",
        "segid": 13
      },
      {
        "addr": "RNaNh2fDvnoimuFGSFtp2c6xb5pN7mMWQV",
        "amount": "6169247.09074260",
        "segid": 44
      },
      {
        "addr": "RTu3JZZKLJTcfNwBa19dWRagEfQq49STqC",
        "amount": "5124337.23955756",
        "segid": 61
      },
      {
        "addr": "RBpEnyzuQNj1hNdAG1pKLALpAWEUS67PBj",
        "amount": "3029259.10629025",
        "segid": 24
      },
      {
        "addr": "RCyANUW2H5985zk8p6NHJfPyNBXnTVzGDh",
        "amount": "2700034.72826615",
        "segid": 48
      }
    ],
    "total": 23216665.62684202,
    "average": 4643333,
    "utxos": 2416430,
    "total_addresses": 5,
    "ignored_addresses": 31,
    "start_height": 1266933,
    "ending_height": 1266933,
    "end_time": 1552473348
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getsnapshot", "params": ["5"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "start_time": 1552473714,
      "addresses": [
        {
          "addr": "RRyyejME7LRTuvdziWsXkAbSW1fdiohGwK",
          "amount": "6193787.46198546",
          "segid": 13
        },
        {
          "addr": "RNaNh2fDvnoimuFGSFtp2c6xb5pN7mMWQV",
          "amount": "6169247.09074260",
          "segid": 44
        },
        {
          "addr": "RTu3JZZKLJTcfNwBa19dWRagEfQq49STqC",
          "amount": "5124337.23955756",
          "segid": 61
        },
        {
          "addr": "RBpEnyzuQNj1hNdAG1pKLALpAWEUS67PBj",
          "amount": "3029259.10629025",
          "segid": 24
        },
        {
          "addr": "RCyANUW2H5985zk8p6NHJfPyNBXnTVzGDh",
          "amount": "2700034.72826615",
          "segid": 48
        }
      ],
      "total": 23216665.62684202,
      "average": 4643333,
      "utxos": 2416443,
      "total_addresses": 5,
      "ignored_addresses": 31,
      "start_height": 1266941,
      "ending_height": 1266941,
      "end_time": 1552473829
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Blockchain Methods";
export const description = "This document contains Blockchain methods for a Smart Chain.";

# Blockchain

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## coinsupply

**coinsupply height**

The `coinsupply` method returns the coin supply information for the indicated block `height`. If no height is given, the method defaults to the blockchain's current height.

<Note>
  To use this method for large block heights, first execute the method for a small block height, such as `1000`. Then execute the method for an incrementally higher block height, such as `10000`. Continue increasing the height until reaching the desired height.
</Note>

### Arguments

| Name     | Type                | Description              |
| -------- | ------------------- | ------------------------ |
| "height" | (integer, optional) | the desired block height |

### Response

| Name     | Type      | Description                                                   |
| -------- | --------- | ------------------------------------------------------------- |
| "result" | (string)  | whether the request was successful                            |
| "coin"   | (string)  | the ticker symbol of the coin for Smart Chains, otherwise KMD |
| "height" | (integer) | the height of this coin supply data                           |
| "supply" | (float)   | the transparent coin supply                                   |
| "zfunds" | (float)   | the shielded coin supply (in `z`addrs)                        |
| "sprout" | (float)   | the sprout coin supply (in `zc`addrs)                         |
| "total"  | (float)   | the total coin supply, i.e. `sum of supply + zfunds`          |

#### 📌 Examples

Command:

```bash
./komodo-cli coinsupply 80000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "coin": "KMD",
    "height": 80000,
    "supply": 100239878.15241314,
    "zfunds": 86.999868,
    "sprout": 86.999868,
    "total": 100239965.15228114
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "coinsupply", "params": ["80000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "result": "success",
      "coin": "KMD",
      "height": 80000,
      "supply": 100239878.15241314,
      "zfunds": 86.999868,
      "sprout": 86.999868,
      "total": 100239965.15228114
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getbestblockhash

**getbestblockhash**

The `getbestblockhash` method returns the hash of the best (tip) block in the longest block chain.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name  | Type     | Description                 |
| ----- | -------- | --------------------------- |
| "hex" | (string) | the block hash, hex encoded |

#### 📌 Examples

Command:

```bash
./komodo-cli getbestblockhash
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getbestblockhash", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblock

**getblock hash|height ( verbose )**

The `getblock` method returns the block's relevant state information.

The verbose input is optional. The default value is true, and it will return a json object with information about the indicated block. If verbose is `false`, the command returns a string that is serialized hex-encoded data for the indicated block.

### Arguments

| Name             | Type                              | Description                                                |
| ---------------- | --------------------------------- | ---------------------------------------------------------- |
| hash `OR` height | string `OR` number, respectively  | the block hash `OR` the block height                       |
| verbose          | (boolean, optional, default=true) | true returns a json object, false returns hex-encoded data |

### Response (verbose = true)

| Name                              | Type               | Description                                                                                                                     |
| --------------------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------- |
| "hash"                            | (string)           | the block hash (same as provided hash)                                                                                          |
| "confirmations"                   | (numeric)          | a confirmation number that is aware of the dPoW security service                                                                |
| "rawconfirmations"                | (numeric)          | the raw confirmations (number of blocks on top of this block); the returned value is `-1` if the block is not on the main chain |
| "size"                            | (numeric)          | the block size                                                                                                                  |
| "height"                          | (numeric)          | the block height or index (same as provided height)                                                                             |
| "version"                         | (numeric)          | the block version                                                                                                               |
| "merkleroot"                      | (string)           | the merkle root                                                                                                                 |
| "tx" : \[ "transaction\_id" ,...] | (array of strings) |                                                                                                                                 |
| "time"                            | (numeric)          | the block time in seconds since epoch (Jan 1 1970 GMT)                                                                          |
| "nonce"                           | (numeric)          | the nonce                                                                                                                       |
| "bits"                            | (string)           | the bits                                                                                                                        |
| "difficulty"                      | (numeric)          | the difficulty                                                                                                                  |
| "previousblockhash"               | (string)           | the hash of the previous block                                                                                                  |
| "nextblockhash"                   | (string)           | the hash of the next block                                                                                                      |

### Response

| Name   | Type     | Description                                                           |
| ------ | -------- | --------------------------------------------------------------------- |
| "data" | (string) | a string that is serialized, hex-encoded data for the indicated block |

#### 📌 Examples

Command:

```bash
./komodo-cli getblock "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
    "confirmations": 1,
    "rawconfirmations": 1,
    "size": 26321,
    "height": 1268723,
    "version": 4,
    "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
    "segid": -1,
    "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
    "tx": [
      "d500535236301413318ca05abc99a3136b3f72111ab06683f0e03ded15ec5663",
      "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d",
      "29939ca572cc61ddb67dbeab4e17c885213c367231cfc02419d5c9f44d2a92e0",
      "7ed658dbb045195f5dd39a2e4c0e9e70c4d1088fde446f563d297612401a61b1",
      "bdbc36996104f8b33bd5c82c678493bddf8d562bb5c8f5d796ace8b09b21d6a8",
      "c89e4bcb285b97f3da9ffcb43bb8e300fb3a3911352f47495730c75cabe04ff0",
      "9ee811357a9d4ed1d3844b426dd5fd8fcb386336d65eddae488ac8d1fc2af69b",
      "89c2c61ed95901714dac57bc8720e436af0fe156bece05da1e894fd96e029f77",
      "c3b308f768bcc3c748a12d8883176b4ff3e44bd5fab42b06306e281804c7c8ba",
      "a8cdac6943562ac051bed5c6cd6e515498c4ccbc5389580dce2f58ff0e103ba5",
      "f310e661ab39ff600ec2c98e9c0afd2f0652ce14c423fcf8d13a8e25616b0580",
      "a077fab812d8a35c998e3178fa945c2575dc5010d703960f71f16989d6f858de",
      "ca0672f70d5f668d806a8265fd607237ab718b66fb4c67a841fd7677ed5b208a",
      "40670bb9ee51a9370d8849f58ed219aa42a5206b46281dd8639ddf8a30e22316",
      "ae980edde333720483cb6db0f633e2d3825e9aa1d46a0db67faad3a56f7c8e7f",
      "a8f81af1e3cf7dee220a8348f0addd33cd961ca640a79dee0eb64ead9c566c1e",
      "2250c19f3ae06625644b8b3a455c323a44d2ca5746fe5b3671941e56d20be613"
    ],
    "time": 1552582977,
    "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
    "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
    "bits": "1d01e71c",
    "difficulty": 132777470.6040096,
    "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
    "anchor": "4e43e43d3569c1155cc9340f46b58425e3d86890076739f19298bc66e6a7acf2",
    "blocktype": "mined",
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 84948.93692198,
        "chainValueZat": 8494893692198,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      },
      {
        "id": "sapling",
        "monitored": true,
        "chainValue": 3.07618319,
        "chainValueZat": 307618319,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      }
    ],
    "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getblock "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320" false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
      "confirmations": 1,
      "rawconfirmations": 5,
      "size": 26321,
      "height": 1268723,
      "version": 4,
      "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
      "segid": -1,
      "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
      "tx": [
        "d500535236301413318ca05abc99a3136b3f72111ab06683f0e03ded15ec5663",
        "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d",
        "29939ca572cc61ddb67dbeab4e17c885213c367231cfc02419d5c9f44d2a92e0",
        "7ed658dbb045195f5dd39a2e4c0e9e70c4d1088fde446f563d297612401a61b1",
        "bdbc36996104f8b33bd5c82c678493bddf8d562bb5c8f5d796ace8b09b21d6a8",
        "c89e4bcb285b97f3da9ffcb43bb8e300fb3a3911352f47495730c75cabe04ff0",
        "9ee811357a9d4ed1d3844b426dd5fd8fcb386336d65eddae488ac8d1fc2af69b",
        "89c2c61ed95901714dac57bc8720e436af0fe156bece05da1e894fd96e029f77",
        "c3b308f768bcc3c748a12d8883176b4ff3e44bd5fab42b06306e281804c7c8ba",
        "a8cdac6943562ac051bed5c6cd6e515498c4ccbc5389580dce2f58ff0e103ba5",
        "f310e661ab39ff600ec2c98e9c0afd2f0652ce14c423fcf8d13a8e25616b0580",
        "a077fab812d8a35c998e3178fa945c2575dc5010d703960f71f16989d6f858de",
        "ca0672f70d5f668d806a8265fd607237ab718b66fb4c67a841fd7677ed5b208a",
        "40670bb9ee51a9370d8849f58ed219aa42a5206b46281dd8639ddf8a30e22316",
        "ae980edde333720483cb6db0f633e2d3825e9aa1d46a0db67faad3a56f7c8e7f",
        "a8f81af1e3cf7dee220a8348f0addd33cd961ca640a79dee0eb64ead9c566c1e",
        "2250c19f3ae06625644b8b3a455c323a44d2ca5746fe5b3671941e56d20be613"
      ],
      "time": 1552582977,
      "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
      "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
      "bits": "1d01e71c",
      "difficulty": 132777470.6040096,
      "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
      "anchor": "4e43e43d3569c1155cc9340f46b58425e3d86890076739f19298bc66e6a7acf2",
      "blocktype": "mined",
      "valuePools": [
        {
          "id": "sprout",
          "monitored": true,
          "chainValue": 84948.93692198,
          "chainValueZat": 8494893692198,
          "valueDelta": 0.0,
          "valueDeltaZat": 0
        },
        {
          "id": "sapling",
          "monitored": true,
          "chainValue": 3.07618319,
          "chainValueZat": 307618319,
          "valueDelta": 0.0,
          "valueDeltaZat": 0
        }
      ],
      "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
      "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320", false] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getblock 120
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hash": "028d455c8b61d4ee5959e2d3d6e6b60d4d779e0ba8b0e1c093e9443ba5c42179",
    "confirmations": 1268619,
    "rawconfirmations": 1268619,
    "size": 1587,
    "height": 120,
    "version": 4,
    "merkleroot": "d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149",
    "segid": -1,
    "finalsaplingroot": "0000000000000000000000000000000000000000000000000000000000000000",
    "tx": ["d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149"],
    "time": 1473825108,
    "nonce": "000078d1eba5ea592b0c1a6728f86df449ee17bd64cb14cd246481d18a830003",
    "solution": "003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d",
    "bits": "200f0f0f",
    "difficulty": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000000809",
    "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
    "blocktype": "mined",
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 0.0,
        "chainValueZat": 0,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      },
      {
        "id": "sapling",
        "monitored": true,
        "chainValue": 0.0,
        "chainValueZat": 0,
        "valueDelta": 0.0,
        "valueDeltaZat": 0
      }
    ],
    "previousblockhash": "009ccd7da3a2c6212b56147b5491773bde944bb6169160d88dc5879a9e005087",
    "nextblockhash": "06ea921ade69ca13f8a2220ed6633f35ed6afd94368c404e7cbdee374c7c11d6"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getblock 120 false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  040000008750009e9a87c58dd8609116b64b94de3b7791547b14562b21c6a2a37dcd9c004901068986373a0a93fadda4b96ce959fa6773f40000ef46e09493985e9790d3000000000000000000000000000000000000000000000000000000000000000054c9d8570f0f0f200300838ad1816424cd14cb64bd17ee49f46df828671a0c2b59eaa5ebd1780000fd4005003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401780101ffffffff0100a3e11100000000232103e0e548e1c42e3a1b26a414d33c8862e10799557d3758b981c921c776054deb53ac00000000
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["120"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hash": "028d455c8b61d4ee5959e2d3d6e6b60d4d779e0ba8b0e1c093e9443ba5c42179",
      "confirmations": 1268622,
      "rawconfirmations": 1268622,
      "size": 1587,
      "height": 120,
      "version": 4,
      "merkleroot": "d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149",
      "segid": -1,
      "finalsaplingroot": "0000000000000000000000000000000000000000000000000000000000000000",
      "tx": ["d390975e989394e046ef0000f47367fa59e96cb9a4ddfa930a3a378689060149"],
      "time": 1473825108,
      "nonce": "000078d1eba5ea592b0c1a6728f86df449ee17bd64cb14cd246481d18a830003",
      "solution": "003f9ef9cf78d687c8e4c56f98d2afc5670c34ce0a0d4c72c2115bd70dddf803535f9cf11343a47b4ec30642354007ab856b9942c21e4f47ee8cb9c6f268160eccea157f0a0f3678cfe107569d998d0d959c0c52047220911125802f7d2b9221ab33fd708b429db55319e6750b65076d9e7ca522a221bfff98b6278938742616a7b2e89fb3e9ce7d645e29c1de7d4425d6a339512072b53f9d430f1dca491f0cf00c8ab5f116dc2204a97ff65553a41d43fef0f4b6f0621c6fbe580db218bf2fb241749995b5e2129e1ef5fa40b293cf47570724bf202055255988f47526d95121b1e6e7b9364814af7b4eaaf4e0dfc11ea4a253341b96e70bb92d2305d96e1c5c08bafcb13d20c3e7b9f8d3298979fff112c400f0c3d2a335118da25c42d035f898c8b728f034c414f8281b09f1d0b6754894e9f72285273b1711363c4583079344910dbd9705cde8534efbb838de7f008321268318e68b08bd524952b0d42cbedb3a50e03d5b4d560f370f95d7a43657ca56a83b73bdbd22a9124018f23f154319cc1d0520a150edf6748539074a2164be459b2077afca94638f0f45d29f6f42fcf05301d9581f944a137dfd5f80eac5df99f6b4129f23d50c65fc2231791525dc1523c8b64c6df55cdfdfdbc70b8b811c2b0e9e554ba113f238edcb392bf1cdc9e918a4df7e1ce21a138e9501b6eac8ab889793fda38d02a99bf74f6281e1d55be1ff729fc215529f94e7892b7686e1829bdb0fd432b780b4e28a6e5b973e1b04137f75b0ff1786f1562402adfad8476981a3b23a1b3251c54ca9538d5b4927e8bdc2c72d62fd705eab750a810d6c2b928477849f252afff9330e3d34be4ffe5d79fea92f19d10d3627862754df6449c71e5ffe69276731c9e00ab91ab747a5c0b2ba19a9be4872becb3510b248de5bbd5fc1b5735b65d2b5f36c18dcf30300b50f20b6c3e79114505044ccca604f9f6fde0d460bfc220a4c450d93e5dde0eaebc747c1b3f3349d5705e80d9afdc200d6981a131c3fc80fd19ae3d44bbc305f7fd5c5d03011f1a489460d55ccbaef7d9fb8dc0148ab399b4e38b1ef19c2083766563dcd8af8e8f42629cd72d6d956b374a1e59800f75435e362d2b1e95ba834ad2434b26be7f33670d3e7e54da5d8766ad86d13d61536a587e99414ea34847599cf9d92fe92dc079a920c7492067115a874eb98e5f36632a2d30ba5114625cd04497f5d413dc2add3cdd8fa4eb2f641b210f38541380e3d00a175462a9fe107d2dad559d9e317490d9ad489d7ff3e2b32f9fe3d98015b86fc45aa07d5e0614f8bd123b4e0960690c8e846eafa3b34f016a9418752c9942edb83e1783df05fb653cadfae0c18e604702d5f328b4ccf01d17c22e7f2f0ddfb3ef9395267dbc3170f8366a7144310e015ea6d763d769c01c40fc516d97614f18504c59ced8a9fa749ffeacd02cd47072a0564c5748a30dca894c1904f53ab606a0789d1809adabb01f6fe486e9e6d20f3d5f63f91c02428fc74a6e608a345bf2543ed7646c9af6a7709ba0aa38af74f0a12a33febc30ea39ecde221613d62b60c701974dae2dcbfb81d10ec39229e23c2c2fe6d970f10ddfb16049ee86c36f1546af704808b596566cc1b85dc6e40df0a29488be1feac3d13c1140998d6c303600b7fe207c62fd7ca13431e2be09e3c01fe6bb803a1e84e8160c31539d6588ffc6e6ece38a9d890611f3f0108ef60333da3d37224d2732b366aac75603125203fedc5e1d5ad1918e30dbd59e8ae516cbbf9e30e5fcbf314db2263a0598d3a35f5aa4f732bdf01cf313424422cede953ec45a7945f563b6f2294fa5960185f5f626056d141194775b00e5051ab7c0fbccaff3607825491da72f73dd3c3da17ae65d52053fb6a6d",
      "bits": "200f0f0f",
      "difficulty": 1,
      "chainwork": "0000000000000000000000000000000000000000000000000000000000000809",
      "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
      "blocktype": "mined",
      "valuePools": [
        {
          "id": "sprout",
          "monitored": true,
          "chainValue": 0.0,
          "chainValueZat": 0,
          "valueDelta": 0.0,
          "valueDeltaZat": 0
        },
        {
          "id": "sapling",
          "monitored": true,
          "chainValue": 0.0,
          "chainValueZat": 0,
          "valueDelta": 0.0,
          "valueDeltaZat": 0
        }
      ],
      "previousblockhash": "009ccd7da3a2c6212b56147b5491773bde944bb6169160d88dc5879a9e005087",
      "nextblockhash": "06ea921ade69ca13f8a2220ed6633f35ed6afd94368c404e7cbdee374c7c11d6"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["120", false] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "04000000285e37c2190d03bdc2395fcd05226bc25de50adf3f46363bc579e050efbfd1013163caf3ad654ee90412d51e6d77b559ae912397ae89df7c6d4fe1f7fbce81470000000000000000000000000000000000000000000000000000000000000000f2ce925b080f0f200b00ea624b040b9c73b7d68ecdf8caf81c513f9aa8679a3172b52b82c55400002403fc1abba5f415b1c422942835d46c7ba3e94665964da4c31e236c6cf9b3dfe6ffb65db10101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401780101ffffffff011027000000000000232103c0259e1a166e53f6ccf094ce37c0843d4a013622603bc301b4eb0f89c7cce823acf1ce925b",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblockchaininfo

**getblockchaininfo**

The `getblockchaininfo` method returns a json object containing state information about blockchain processing.

<Note>
  When the chain tip is at the last block before a network upgrade activation, the <b>consensus.chaintip</b> value is not equal to the <b>consensus.nextblock</b> value.
</Note>

The `getblockchaininfo` method now returns a new size\_on\_disk key, which is the size of the blockchain, on disk, in bytes.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                    | Type      | Description                                                                                                                                       |
| ----------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| "chain"                 | (string)  | the current network name, as defined in BIP70 (main, test, regtest)                                                                               |
| "blocks"                | (numeric) | the current number of blocks processed in the server                                                                                              |
| "headers"               | (numeric) | the current number of headers we have validated                                                                                                   |
| "bestblockhash"         | (string)  | the hash of the currently best block                                                                                                              |
| "difficulty"            | (numeric) | the current difficulty                                                                                                                            |
| "verificationprogress"  | (numeric) | an estimate of verification progress \[0..1]                                                                                                      |
| "chainwork"             | (string)  | the total amount of work in the active chain, in hexadecimal                                                                                      |
| "pruned"                | (bool)    | whether the current state is in pruning mode; if true, the blockchain will not keep all transaction and block information, to preserve disk space |
| "size\_on\_disk"        | (numeric) | the size of the blockchain on disk, measured in bytes                                                                                             |
| "commitments"           | (numeric) | the current number of note commitments in the commitment tree                                                                                     |
| "softforks": \{ ..... } | (array)   | the status of softforks in progress                                                                                                               |
| "id"                    | (string)  | the name of the softfork                                                                                                                          |
| "version"               | (numeric) | the block version                                                                                                                                 |
| "enforce": \{ ... }     | (object)  | the progress toward enforcing the softfork rules for blocks of the new version                                                                    |
| "status"                | (boolean) | true if threshold reached                                                                                                                         |
| "found"                 | (numeric) | the number of blocks with the new version found                                                                                                   |
| "required"              | (numeric) | the number of blocks required to trigger                                                                                                          |
| "window"                | (numeric) | the maximum size of the examined window of recent blocks                                                                                          |
| "reject": \{ ... }      | (object)  | the progress toward rejecting pre-softfork blocks (same fields as "enforce")                                                                      |
| "upgrades":             | (object)  | the status of network upgrades                                                                                                                    |
| "xxxxxxxxx\_string":    | (string)  | the branch ID of the upgrade                                                                                                                      |
| "name"                  | (string)  | the name of upgrade                                                                                                                               |
| "activationheight"      | (numeric) | the block height of activation                                                                                                                    |
| "status"                | (string)  | the status of the upgrade                                                                                                                         |
| "info"                  | (string)  | additional information about the upgrade                                                                                                          |
| "consensus": \{ ..... } | (object)  | branch IDs of the current and upcoming consensus rules                                                                                            |
| "chaintip"              | (string)  | branch ID used to validate the current chain tip                                                                                                  |
| "nextblock"             | (string)  | branch ID under which the next block will be validated                                                                                            |

#### 📌 Examples

Command:

```bash
./komodo-cli getblockchaininfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "chain": "regtest",
    "blocks": 398,
    "headers": 398,
    "bestblockhash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
    "difficulty": 1.000023305960651,
    "verificationprogress": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000001a7f",
    "pruned": false,
    "size_on_disk": 5058467629,
    "commitments": 0,
    "valuePools": [
      {
        "id": "sprout",
        "monitored": true,
        "chainValue": 0.0,
        "chainValueZat": 0
      }
    ],
    "softforks": [
      {
        "id": "bip34",
        "version": 2,
        "enforce": {
          "status": false,
          "found": 399,
          "required": 750,
          "window": 1000
        },
        "reject": {
          "status": false,
          "found": 399,
          "required": 950,
          "window": 1000
        }
      }
    ],
    "upgrades": {},
    "consensus": {
      "chaintip": "00000000",
      "nextblock": "00000000"
    }
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "chain": "regtest",
      "blocks": 398,
      "headers": 398,
      "bestblockhash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
      "difficulty": 1.000023305960651,
      "verificationprogress": 1,
      "chainwork": "0000000000000000000000000000000000000000000000000000000000001a7f",
      "pruned": false,
      "size_on_disk": 5058467629,
      "commitments": 0,
      "valuePools": [
        {
          "id": "sprout",
          "monitored": true,
          "chainValue": 0,
          "chainValueZat": 0
        }
      ],
      "softforks": [
        {
          "id": "bip34",
          "version": 2,
          "enforce": {
            "status": false,
            "found": 399,
            "required": 750,
            "window": 1000
          },
          "reject": {
            "status": false,
            "found": 399,
            "required": 950,
            "window": 1000
          }
        }
      ],
      "upgrades": {},
      "consensus": {
        "chaintip": "00000000",
        "nextblock": "00000000"
      }
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblockcount

**getblockcount**

The `getblockcount` method returns the number of blocks in the best valid block chain.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name | Type      | Description             |
| ---- | --------- | ----------------------- |
| data | (numeric) | the current block count |

#### 📌 Examples

Command:

```bash
./komodo-cli getblockcount
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  398
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockcount", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 398,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblockhash

**getblockhash index**

The `getblockhash` method returns the hash of the indicated block index, according to the best blockchain at the time provided.

### Arguments

| Name  | Type                | Description     |
| ----- | ------------------- | --------------- |
| index | (numeric, required) | the block index |

### Response

| Name   | Type     | Description    |
| ------ | -------- | -------------- |
| "hash" | (string) | the block hash |

#### 📌 Examples

Command:

```bash
./komodo-cli getblockhash 100
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  08674c7a6ab6c40000d45e2094f2cafc6575bfcfdd1ce90fa0060fa573803024
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "08674c7a6ab6c40000d45e2094f2cafc6575bfcfdd1ce90fa0060fa573803024",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblockhashes

**getblockhashes high low '\{"noOrphans": bool, "logicalTimes": bool}'**

The `getblockhashes` method returns an array of hashes of blocks within the timestamp range provided.

The method requires [timestampindex](/smart-chains/setup/common-runtime-parameters/#timestampindex) to be enabled.

### Arguments

| Name           | Type                | Description                                                                                |
| -------------- | ------------------- | ------------------------------------------------------------------------------------------ |
| high           | (numeric, required) | the newer block timestamp                                                                  |
| low            | (numeric, required) | the older block timestamp                                                                  |
| options        | (string, required)  | a json object                                                                              |
| "noOrphans"    | (boolean)           | a value of `true` implies that the method will only include blocks on the main chain       |
| "logicalTimes" | (boolean)           | a value of `true` implies that the method will only include logical timestamps with hashes |

### Response

| Name        | Type      | Description           |
| ----------- | --------- | --------------------- |
| "hash"      | (string)  | the block hash        |
| "blockhash" | (string)  | the block hash        |
| "logicalts" | (numeric) | the logical timestamp |

#### 📌 Examples

Command:

```bash
./komodo-cli getblockhashes 1531614698 1531614498
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
    "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
    "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432"
  ]

  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhashes", "params": [1531614698, 1531614498] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
      "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
      "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getblockhashes 1531614698 1531614498 '{"noOrphans":false, "logicalTimes":true}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "blockhash": "01c555caa581783c94af1ec4fdd1237a37829fc8ccf9fd956f3df462495a8629",
      "logicalts": 1531614555
    },
    {
      "blockhash": "0debf03ff8fe2c09ccb7e8b3770121d71ef8c7fce267a04f9301cc50f594f9ac",
      "logicalts": 1531614615
    },
    {
      "blockhash": "01c92378d9fa66eb83d0bfcf601678792e0351f9b51483db1084347dabd78432",
      "logicalts": 1531614692
    }
  ]
  ```
</CollapsibleSection>

## getblockheader

**getblockheader "hash" ( verbose )**

The `getblockheader` method returns information about the indicated block.

The verbose input is optional. If verbose is false, the method returns a string that is serialized, hex-encoded data for the indicated blockheader. If verbose is true, the method returns a json object with information about the indicated blockheader.

### Arguments

| Name    | Type                              | Description                                                |
| ------- | --------------------------------- | ---------------------------------------------------------- |
| "hash"  | (string, required)                | the block hash                                             |
| verbose | (boolean, optional, default=true) | true returns a json object, false returns hex-encoded data |

### Response (verbose = `true`)

| Name                | Type      | Description                                                                                                                       |
| ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------- |
| "hash"              | (string)  | the block hash (same as provided)                                                                                                 |
| "confirmations"     | (numeric) | a confirmation number that is aware of the dPoW security service                                                                  |
| "rawconfirmations"  | (numeric) | the raw confirmations (number of blocks on top of this block); if the block is not on the main chain, a value of `-1` is returned |
| "height"            | (numeric) | the block height or index                                                                                                         |
| "version"           | (numeric) | the block version                                                                                                                 |
| "merkleroot"        | (string)  | the merkle root                                                                                                                   |
| "time"              | (numeric) | the block time in seconds since epoch (Jan 1 1970 GMT)                                                                            |
| "nonce"             | (numeric) | the nonce                                                                                                                         |
| "bits"              | (string)  | the bits                                                                                                                          |
| "difficulty"        | (numeric) | the difficulty                                                                                                                    |
| "previousblockhash" | (string)  | the hash of the previous block                                                                                                    |
| "nextblockhash"     | (string)  | the hash of the next block                                                                                                        |

### Response (verbose = `false`)

| Name   | Type     | Description                                                          |
| ------ | -------- | -------------------------------------------------------------------- |
| "data" | (string) | a string that is serialized hex-encoded data for the indicated block |

#### 📌 Examples

Command:

```bash
./komodo-cli getblockheader "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
    "confirmations": 1,
    "rawconfirmations": 5,
    "height": 1268723,
    "version": 4,
    "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
    "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
    "time": 1552582977,
    "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
    "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
    "bits": "1d01e71c",
    "difficulty": 132777470.6040096,
    "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
    "segid": -1,
    "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
    "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getblockheader "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320" false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0400000017803fd129f0dc0e16998eb56b6e16ee3aef592525dcfe2c13fb1e4fbef67404784df6356e6de46c93e3806c38df8544a78121bb794adb555f2aa86a2d91dd9ca2d8a734eb73a4dc734072dbfd12406f1e7121bfe0e3d6c10922495c44e5cc1c41898a5c1ce7011d0a0034a6eac3ef7752d14d320f7ffc39b7b60ad112011b8fc0f2f988c8540000fd400500bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockheader", "params": ["0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hash": "0d060c88dd55c48a0e1ae663ca400d2edba709c8484ef84a727cabfbb950c320",
      "confirmations": 1,
      "rawconfirmations": 12,
      "height": 1268723,
      "version": 4,
      "merkleroot": "9cdd912d6aa82a5f55db4a79bb2181a74485df386c80e3936ce46d6e35f64d78",
      "finalsaplingroot": "1ccce5445c492209c1d6e3e0bf21711e6f4012fddb724073dca473eb34a7d8a2",
      "time": 1552582977,
      "nonce": "000054c888f9f2c08f1b0112d10ab6b739fc7f0f324dd15277efc3eaa634000a",
      "solution": "00bfd611d3c531f8a3e962cd46d62109685518a2ed078c0ea1ed4b555db2ed5108603aaedd3ee98ac463084a50d2080a9384a1bb718053a08a55507fce56b83694930194e91bab7260b79bfffd520e5d973c2c9e01221b74d7544383712ca1033ea2caaa499efdf59e06c3f423689c7a7b7a2f5345cbcae6f26afdb7d8300462848ffb1ae69f2f11f13d3f52ebac8aca51f6721a056d8ac5525517ca4079442fdac19ac0b5f7b66004b8448286090b4b29f390b58272157eaa733d011d14cfcaa19813b692e5057556a35dc86e0da613f46605ba7f4ec88ddec30ead8b4b5df032bef638da39092a7d39661723d0b7ea07a5d6fd422fcf423efdd1a90ad094c444481ae950dc41e02d20044555623cec5b2679873fa44ef75acf1c592ca96765f28f3b5f853219b1b140e2467aef56e5b71aca6a4a86d9c918504b2758fbcc8812b9332f7fe52309e95d455f9a7e49c300f17511590fd33befc370e5a5619602732299dad7227e21e4271f6767873a43132dc08c4d488a310c7105b2a45d4536bff1b7cb70f0d68f5e996050cc55da23bf86fb3ad10e3b9028a48a8ef2376a2c2039210409d5b85a922dbe3d7ddbd399e632435957a776c9bc0a77ad8a62d623f0f15df49e543d869d51790cadee496b36bf6368ebb568ed69cf3578913aa097f99eb86b2e2701691bba85fc7d383aede90317877cdcaa4803610fea9d42729635cc623cb7397279c426fb5cee0cab13f3a217a456cd61a34dbc5990cde5de55b0ac12e8429a2e586298f3e8313febe6e6b1f590f885432433aac18d6e7b7b99f3425720d35b30d8b234475c04f09951df512cfc947fb4237cd0279ad276f86de910c30b79da45b7e76531f4bce2e8d03dfbbf11ee5712c9c92c69a96d69b05cb18e418f4e98b3c067e5cb19de2375865b51450a79e80a4fc5a5c716b0bee64b0256542f0a6f9871c02656d90846dca9fb381519682397514f522b3045ce88744f2b5af53d51b4bac3d409139a6b588309e90bbc836ea079e4e4eed7eae7ab0f1871bd6aee35cd7637d3525153ca2d77c1eebc010a5a905e8ed9b97bb18427592c60bd52c13e7e7fa5191323a5f6b03b4dbf2074edf97087b6340ab3dcc11a56bb04c89a22e2f6f8c27123561800e55e1afae61abd2c2809ddf3fbad93e372e2d1febf6f2e9f7e7a0489069e7a927e37025b32661b9c0fc576ac2dd3db4fe79331e4a48ff54c848a45a7679fdee69899af2320a5cd338b8f15f732d353a95ecf16ed82290d073f22381bc7d81743b7ea8343ac20c25fda4f179f142f10a2a2f6f556cc12de3c728a1ae005ed954752558c1a81ff709ea10f49b80774eca5bcf681a7dc2e5101151c95f94fc80df2ecd9c334ed75195a81bc7a0bfe1af5c3f7703de3dff447f338d819d789a725dcac6c028f0a9a43cc8fd140abb0d40a630a84fbdd751c2a08c28f7fd1d376f98c0fc418f4f0929de03f3038640388abc0ee44a14d7094130e0b503a61a6229f10891ab90dc9c9cc76469c0ab30f7fca9386760676194e04a8db6d2506ecaba8e800bccbe2ddc53d46b9771307445efbf15454e35f5a30bb4cf9aedd129bacd19d05c63645c9589e73829ba5abd87e0bee0fccbb06e4214acbee7c240d1586e05a9a50f0661712e4dc9e71050b36dbc7133bfd32df2cc8ddf9356fd4701f37f32635d3a7be0a50b6d6b85597d95a948df1f91a58a70a221cdc1e880ce1a54644ec91eabd7625497f02e02b291381978ccbdd4761e3ca0128efa146a0ea4e9a13003bc1558db863c2a183460455a0560bc75c7f061449714ddc5431458483630fc3ff769e78c71901ea1e516e5fe04cd0a553f5f2403afaef2e33c31eb55d326c030d76e188676099b5b9f43f100afe25994feb",
      "bits": "1d01e71c",
      "difficulty": 132777470.6040096,
      "chainwork": "000000000000000000000000000000000000000000000000000241daab323e77",
      "segid": -1,
      "previousblockhash": "0474f6be4f1efb132cfedc252559ef3aee166e6bb58e99160edcf029d13f8017",
      "nextblockhash": "000000003331516a9b135e3273ebad53a60921e5d3132fe7d596f5903337f504"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getchaintips

**getchaintips**

The `getchaintips` method returns information about all known tips in the block tree, including the main chain and any orphaned branches.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name        | Type      | Description                                                   |
| ----------- | --------- | ------------------------------------------------------------- |
| "height"    | (numeric) | the height of the chain tip                                   |
| "hash"      | (string)  | the block hash of the tip                                     |
| "branchlen" | (numeric) | `0` for main chain                                            |
| "status"    | (string)  | `"active"` for the main chain                                 |
| "height"    | (numeric) | the height of the branch tip                                  |
| "hash"      | (string)  | the blockhash of the branch tip                               |
| "branchlen" | (numeric) | the length of the branch connecting the tip to the main chain |
| "status"    | (string)  | the status of the chain                                       |

### Possible values for the returned status property

| Status          | Description                                                                   |
| --------------- | ----------------------------------------------------------------------------- |
| "invalid"       | this branch contains at least one invalid block                               |
| "headers-only"  | not all blocks for this branch are available, but the headers are valid       |
| "valid-headers" | all blocks are available for this branch, but they were never fully validated |
| "valid-fork"    | this branch is not part of the active chain, but is fully validated           |
| "active"        | this is the tip of the active main chain, which is certainly valid            |

#### 📌 Examples

Command:

```bash
./komodo-cli getchaintips
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "height": 398,
      "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
      "branchlen": 0,
      "status": "active"
    }
  ]
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getchaintips", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "height": 398,
        "hash": "0dd66ee1f151c38f73843378c08715ee3f4d3cf2888783e2846b81c057987084",
        "branchlen": 0,
        "status": "active"
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getchaintxstats

**getchaintxstats nblocks blockhash**

The method `getchaintxstats` returns statistics about the total number and rate of transactions in the chain.

### Arguments

| Name      | Type                | Description                                   |
| --------- | ------------------- | --------------------------------------------- |
| nblocks   | (numeric, optional) | the number of blocks in the averaging window. |
| blockhash | (string, optional)  | the hash of the block which ends the window   |

### Response

| Name                         | Type      | Description                                                                                                         |
| ---------------------------- | --------- | ------------------------------------------------------------------------------------------------------------------- |
| "time"                       | (numeric) | the timestamp for the final block in the window in UNIX format                                                      |
| "txcount"                    | (numeric) | the total number of transactions in the chain up to this point                                                      |
| "window\_final\_block\_hash" | (string)  | the hash of the final block in the window                                                                           |
| "window\_block\_count"       | (numeric) | the size of the window in the number of blocks                                                                      |
| "window\_tx\_count"          | (numeric) | the number of transactions in the window; this value is only returned if `window_block_count` is > 0.               |
| "window\_interval"           | (numeric) | the elapsed time in the window in seconds; this value is only returned if `window_block_count` is > 0.              |
| "txrate"                     | (numeric) | the average rate of transactions per second in the window; this value is only returned if `window_interval` is > 0. |

#### 📌 Examples

Command:

```bash
./komodo-cli getchaintxstats
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "time": 1552568020,
    "txcount": 4576830,
    "window_final_block_hash": "037c7fb68fcdd27cb12bb16b6c4b3a88a4bd652b2c979c771836db97611a62f2",
    "window_block_count": 43200,
    "window_tx_count": 286787,
    "window_interval": 2604632,
    "txrate": 0.1101065332837806
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getchaintxstats", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "time": 1552568020,
      "txcount": 4576830,
      "window_final_block_hash": "037c7fb68fcdd27cb12bb16b6c4b3a88a4bd652b2c979c771836db97611a62f2",
      "window_block_count": 43200,
      "window_tx_count": 286787,
      "window_interval": 2604632,
      "txrate": 0.1101065332837806
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getdifficulty

**getdifficulty**

The `getdifficulty` method returns the proof-of-work difficulty as a multiple of the minimum difficulty.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type      | Description                                                          |
| ------ | --------- | -------------------------------------------------------------------- |
| number | (numeric) | the proof-of-work difficulty as a multiple of the minimum difficulty |

#### 📌 Examples

Command:

```bash
./komodo-cli getdifficulty
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  1.000023305960651
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getdifficulty", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 1.000023305960651,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getlastsegidstakes

**getlastsegidstakes depth**

The `getlastsegidstakes` method returns an object containing the number of blocks staked by each segid in the last `X` number of blocks, where the value of `X` is equal to the indicated `depth`.

<Note>Note Only applies to `-ac_staked` Smart Chains</Note>

### Arguments

| Name  | Type                | Description                                                                          |
| ----- | ------------------- | ------------------------------------------------------------------------------------ |
| depth | (numeric, required) | the number of blocks to scan, starting from the current height and working backwards |

### Response

| Name      | Type          | Description                                                                                                |
| --------- | ------------- | ---------------------------------------------------------------------------------------------------------- |
| "NotSet"  | (numeric)     | the number of blocks that have no `SegId` set                                                              |
| "PoW"     | (numeric)     | the number of blocks created through `PoW`                                                                 |
| "PoSPerc" | (numeric)     | the percentage of blocks created through `PoS`                                                             |
| "SegIds"  | (json object) | the json containing the data of number of blocks in each `SegId`                                           |
| "n"       | (numeric)     | the number of blocks staked from `SegId n` in the last X blocks, where X is equal to the indicated `depth` |

#### 📌 Examples

Command:

```bash
./komodo-cli getlastsegidstakes 1000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
      "NotSet": 0,
      "PoW": 12,
      "PoSPerc": 98,
      "SegIds": {
          "0": 20,
          "1": 16,
          "2": 16,
          "3": 18,
          "4": 19,

    ( .... omitted for brevity ... )

          "60": 11,
          "61": 16,
          "62": 18,
          "63": 17
      }
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```json
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getlastsegidstakes", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
      "result": {
          "NotSet": 0,
          "PoW": 11,
          "PoSPerc": 98,
          "SegIds": {
              "0": 20,
              "1": 16,
              "2": 16,
              "3": 17,

      ( .... omitted for brevity ... )

              "60": 11,
              "61": 16,
              "62": 18,
              "63": 17
          }
      },
      "error": null,
      "id": "curltest"
  }
  ```
</CollapsibleSection>

## getmempoolinfo

**getmempoolinfo**

The `getmempoolinfo` method returns details on the active state of the transaction memory pool.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name    | Type      | Description                            |
| ------- | --------- | -------------------------------------- |
| "size"  | (numeric) | the current transaction count          |
| "bytes" | (numeric) | the sum of all transaction sizes       |
| "usage" | (numeric) | the total memory usage for the mempool |

#### 📌 Examples

Command:

```bash
./komodo-cli getmempoolinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "size": 1,
    "bytes": 226,
    "usage": 896
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getmempoolinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "size": 1,
      "bytes": 226,
      "usage": 896
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getrawmempool

**getrawmempool ( verbose )**

The `getrawmempool` method returns all transaction ids in the memory pool as a json array of transaction ids.

The verbose input is optional and is false by default. When it is true, the method instead returns a json object with various related data.

### Arguments

| Name    | Type                               | Description                                                       |
| ------- | ---------------------------------- | ----------------------------------------------------------------- |
| verbose | (boolean, optional, default=false) | true for a json object, false for a json array of transaction ids |

### Response (verbose = `false`)

| Name              | Type     | Description        |
| ----------------- | -------- | ------------------ |
| "transaction\_id" | (string) | the transaction id |

### Response (verbose = `true`)

| Name                         | Type          | Description                                                             |
| ---------------------------- | ------------- | ----------------------------------------------------------------------- |
| "transaction\_id": \{ .... } | (json object) |                                                                         |
| "size"                       | (numeric)     | the transaction size in bytes                                           |
| "fee"                        | (numeric)     | the transaction fee                                                     |
| "time"                       | (numeric)     | the local time transaction entered pool in seconds since 1 Jan 1970 GMT |
| "height"                     | (numeric)     | the block height wherein the transaction entered the mempool            |
| "startingpriority"           | (numeric)     | the priority when the transaction entered the mempool                   |
| "currentpriority"            | (numeric)     | the transaction priority at the current height                          |
| "depends": \{ ... }          | (array)       | unconfirmed transactions used as inputs for this transaction            |
| "transaction\_id"            | (string)      | the parent transaction id                                               |

#### 📌 Examples

Command:

```bash
./komodo-cli getrawmempool true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "44760f145303cae081819c6e54665d6716c98e97691603b4edf133b8180e6048": {
      "size": 488,
      "fee": 0.00011462,
      "time": 1536618366,
      "height": 448,
      "startingpriority": 20910198.65384615,
      "currentpriority": 20910198.65384615,
      "depends": []
    }
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawmempool", "params": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "44760f145303cae081819c6e54665d6716c98e97691603b4edf133b8180e6048": {
        "size": 488,
        "fee": 0.00011462,
        "time": 1536618366,
        "height": 448,
        "startingpriority": 20910198.65384615,
        "currentpriority": 20910198.65384615,
        "depends": []
      }
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getspentinfo

**getspentinfo '\{"txid": "txid\_string", "index"}'**

The `getspentinfo` method returns the transaction id and index where the given output is spent.

The method requires [spentindex](/smart-chains/setup/common-runtime-parameters/#spentindex) to be enabled.

### Arguments

| Name    | Type     | Description                          |
| ------- | -------- | ------------------------------------ |
| "txid"  | (string) | the hex string of the transaction id |
| "index" | (number) | the output's index                   |

### Response

| Name    | Type     | Description              |
| ------- | -------- | ------------------------ |
| "txid"  | (string) | the transaction id       |
| "index" | (number) | the spending input index |

#### 📌 Examples

Command:

```bash
./komodo-cli getspentinfo '{"txid": "4479f2c05ba22adf2333db724f247a09effcc9edea8c079da0da05d3a0451064", "index": 0}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "txid": "d2a7b19178ff6b4b1d54befc300879239969716322e4bcd2742162d86ef113c8",
    "index": 228,
    "height": 994953
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getspentinfo", "params": [{"txid": "4479f2c05ba22adf2333db724f247a09effcc9edea8c079da0da05d3a0451064", "index": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "txid": "d2a7b19178ff6b4b1d54befc300879239969716322e4bcd2742162d86ef113c8",
      "index": 228,
      "height": 994953
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## gettxout

**gettxout "txid\_string" vout\_number ( includemempool\_bool )**

The `gettxout` method returns details about an unspent transaction output.

### Arguments

| Name           | Type                | Description                    |
| -------------- | ------------------- | ------------------------------ |
| "txid"         | (string, required)  | the transaction id             |
| vout           | (numeric, required) | the vout value                 |
| includemempool | (boolean, optional) | whether to include the mempool |

### Response

| Name               | Type               | Description                                                                         |
| ------------------ | ------------------ | ----------------------------------------------------------------------------------- |
| "bestblock"        | (string)           | the block hash                                                                      |
| "confirmations"    | (numeric)          | a confirmation number that is aware of the dPoW security service aware              |
| "rawconfirmations" | (numeric)          | the raw confirmations (number of blocks on top of this block with this transaction) |
| "value"            | (numeric)          | the transaction value                                                               |
| "scriptPubKey":    | (json object)      |                                                                                     |
| "asm"              | (string)           | `scriptPubKey` in assembly format                                                   |
| "hex"              | (string)           | `scriptPubKey` in hex format                                                        |
| "reqSigs"          | (numeric)          | the number of required signatures                                                   |
| "type"             | (string)           | the type, e.g. pubkeyhash                                                           |
| "addresses"        | (array of strings) | an array of Komodo addresses                                                        |
| "address"          | (string)           | the blockchain address                                                              |
| "version"          | (numeric)          | the version                                                                         |
| "coinbase"         | (boolean)          | whether this is a coinbase transaction                                              |

#### 📌 Examples

Command:

```bash
./komodo-cli gettxout "d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d" 1
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "bestblock": "061d724764a60009e782aa7a52c7543b6b3ca7b552bffcd3e3b5010caeaeb19e",
    "confirmations": 1,
    "rawconfirmations": 14,
    "value": 13541.42222075,
    "scriptPubKey": {
      "asm": "OP_DUP OP_HASH160 4518e50fdb31bb5951cd570342325bde15408fa3 OP_EQUALVERIFY OP_CHECKSIG",
      "hex": "76a9144518e50fdb31bb5951cd570342325bde15408fa388ac",
      "reqSigs": 1,
      "type": "pubkeyhash",
      "addresses": ["RFaYXUJUE7CziS73EE6gvaqFduVo9KWjXT"]
    },
    "version": 4,
    "coinbase": false
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettxout", "params": ["d7f9b34ad3e86f48fce55dbec1f2925b8dcbd15199977fd75d224254db9ae80d", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "bestblock": "000000020cce6743086cbcb97e90c0ad2735118615dd22b393e10f67cb6f13c7",
      "confirmations": 1,
      "rawconfirmations": 15,
      "value": 13541.42222075,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 4518e50fdb31bb5951cd570342325bde15408fa3 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9144518e50fdb31bb5951cd570342325bde15408fa388ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": ["RFaYXUJUE7CziS73EE6gvaqFduVo9KWjXT"]
      },
      "version": 4,
      "coinbase": false
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## gettxoutproof

**gettxoutproof '\["transaction\_id", ... ]' ( "blockhash\_string" )**

The `gettxoutproof` method returns a hex-encoded proof showing that the indicated transaction was included in a block.

<Note>
  The <b>gettxoutproof</b> method relies on the <b>txindex</b> runtime parameter. This parameter is enabled by default on all KMD-based blockchains, and should never be disabled.
</Note>

### Arguments

| Name        | Type               | Description                                                                       |
| ----------- | ------------------ | --------------------------------------------------------------------------------- |
| "txid"      | (string)           | a transaction hash                                                                |
| "blockhash" | (string, optional) | if specified, the method looks for the relevant transaction id in this block hash |

### Response

| Name   | Type     | Description                                                   |
| ------ | -------- | ------------------------------------------------------------- |
| "data" | (string) | a string that is a serialized, hex-encoded data for the proof |

#### 📌 Examples

Command:

```bash
./komodo-cli gettxoutproof '["c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"]' "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d
  ```
</CollapsibleSection>

## gettxoutsetinfo

**gettxoutsetinfo**

The `gettxoutsetinfo` method returns statistics about the unspent transaction output set.

<Note>
  Note this call may take a long time to complete, depending on the state of your blockchain.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                | Type      | Description                       |
| ------------------- | --------- | --------------------------------- |
| "height"            | (numeric) | the current block height (index)  |
| "bestblock"         | (string)  | the best block hash hex           |
| "transactions"      | (numeric) | the number of transactions        |
| "txouts"            | (numeric) | the number of output transactions |
| "bytes\_serialized" | (numeric) | the serialized size               |
| "hash\_serialized"  | (string)  | the serialized hash               |
| "total\_amount"     | (numeric) | the total amount                  |

#### 📌 Examples

Command:

```bash
./komodo-cli gettxoutsetinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "height": 459,
    "bestblock": "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813",
    "transactions": 258,
    "txouts": 261,
    "bytes_serialized": 18051,
    "hash_serialized": "fdd2039fa21400be0928b26dfe534f543dc5090989bcbd97fdc81b30ce7dca3a",
    "total_amount": 10.16456229
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutsetinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "height": 459,
      "bestblock": "0a28e2fb630b282138bf23bb79f597b11acff6f57c8d9c1c10fa54770035c813",
      "transactions": 258,
      "txouts": 261,
      "bytes_serialized": 18051,
      "hash_serialized": "fdd2039fa21400be0928b26dfe534f543dc5090989bcbd97fdc81b30ce7dca3a",
      "total_amount": 10.16456229
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## kvsearch

**kvsearch "key\_string"**

The `kvsearch` method searches for a key stored via the [kvupdate](/smart-chains/api/blockchain/#kvupdate) command.

<Note>
  This feature is only available for Smart Chains.
</Note>

### Arguments

| Name | Type               | Description                                            |
| ---- | ------------------ | ------------------------------------------------------ |
| key  | (string, required) | the key for which the user desires to search the chain |

### Response

| Name            | Type      | Description                                               |
| --------------- | --------- | --------------------------------------------------------- |
| "coin"          | (string)  | the chain on which the key is stored                      |
| "currentheight" | (numeric) | the current height of the chain                           |
| "key"           | (string)  | the key                                                   |
| "keylen"        | (string)  | the length of the key                                     |
| "owner"         | (string)  | a hex string representing the owner of the key            |
| "height"        | (numeric) | the height at which the key was stored                    |
| "expiration"    | (numeric) | the height at which the key will expire                   |
| "flags"         | (numeric) | `1` if the key was created with a password; `0` otherwise |
| "value"         | (string)  | the stored value                                          |
| "valuesize"     | (string)  | the amount of characters stored                           |

#### 📌 Examples

Command:

```bash
./komodo-cli kvsearch examplekey
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "coin": "MYCOIN",
    "currentheight": 566,
    "key": "examplekey",
    "keylen": 10,
    "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
    "height": 561,
    "expiration": 2001,
    "flags": 0,
    "value": "examplevalue",
    "valuesize": 12
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "kvsearch", "params": ["examplekey"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "coin": "MYCOIN",
      "currentheight": 566,
      "key": "examplekey",
      "keylen": 10,
      "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
      "height": 561,
      "expiration": 2001,
      "flags": 0,
      "value": "examplevalue",
      "valuesize": 12
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## kvupdate

**kvupdate "key\_string" "value\_string" days "passphrase\_string"**

The `kvupdate` method stores a key/value pair via OP\_RETURN.

<Note>
  This feature is available only for Smart Chains. The maximum value memory size is 8kB.
</Note>

### Arguments

| Name         | Type                | Description                                                            |
| ------------ | ------------------- | ---------------------------------------------------------------------- |
| "key"        | (string, required)  | key (should be unique)                                                 |
| "value"      | (string, required)  | value                                                                  |
| "days"       | (numeric, required) | amount of days before the key expires (1440 blocks/day); minimum 1 day |
| "passphrase" | (string, optional)  | passphrase required to update this key                                 |

### Response

| Name         | Type      | Description                               |
| ------------ | --------- | ----------------------------------------- |
| "coin"       | (string)  | the chain on which the key is stored      |
| "height"     | (numeric) | the height at which the key was stored    |
| "expiration" | (numeric) | the height at which the key will expire   |
| "flags"      | (string)  | the amount of days the key will be stored |
| "key"        | (numeric) | the stored key                            |
| "keylen"     | (numeric) | the length of the key                     |
| "value"      | (numeric) | the stored value                          |
| "valuesize"  | (string)  | the length of the stored value            |
| "fee"        | (string)  | the transaction fee paid to store the key |
| "txid"       | (string)  | the transaction id                        |

#### 📌 Examples

Command:

```bash
./komodo-cli kvupdate "examplekey" "examplevalue" 2 "examplepassphrase"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "coin": "MYCOIN",
    "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
    "height": 566,
    "expiration": 2006,
    "flags": 3,
    "key": "examplekey",
    "keylen": 10,
    "value": "examplevalue",
    "valuesize": 12,
    "fee": 0.001,
    "txid": "2dc76f39188bb006931a2c924fdf66bc3baf149bf880fffad778cabd6ace5749"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "kvupdate", "params": ["examplekey", "examplevalue", "2", "examplepassphrase"] }' -H 'content-type: text/plain;' http://127.0.0.1:9801
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "coin": "MYCOIN",
      "owner": "1ff91604c6adb6ec550e7575fe9f1ca591704572e125f55bed03a21c242c31b7",
      "height": 566,
      "expiration": 2006,
      "flags": 3,
      "key": "examplekey",
      "keylen": 10,
      "value": "examplevalue",
      "valuesize": 12,
      "fee": 0.001,
      "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## minerids

**minerids height**

The `minerids` method returns information about the notary nodes and external miners at a specific block height. The response will calculate results according to the 2000 blocks proceeding the indicated "height" block.

### Arguments

| Name    | Type     | Description                    |
| ------- | -------- | ------------------------------ |
| heights | (number) | the block height for the query |

### Response

| Name         | Type     | Description                               |
| ------------ | -------- | ----------------------------------------- |
| "mined":     |          |                                           |
| "notaryid"   | (number) | the id of the specific notary node        |
| "kmdaddress" | (string) | the KMD address of the notary node        |
| "pubkey"     | (string) | the public signing key of the notary node |
| "blocks"     | (number) |                                           |

#### 📌 Examples

Command:

```bash
./komodo-cli minerids 1000000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "mined": [
      {
        "notaryid": 0,
        "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc",
        "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
        "blocks": 22
      }
        ...    (63 responses omitted for brevity)
      ,
      {
        "pubkey": "external miners",
        "blocks": 541
      }
    ],
    "numnotaries": 64
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "minerids", "params": ["1000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "mined": [
        {
          "notaryid": 0,
          "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc",
          "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
          "blocks": 22
        }
          ...    (63 responses omitted for brevity)
        ,
        {
          "pubkey": "external miners",
          "blocks": 541
        }
      ],
      "numnotaries": 64
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## notaries

**notaries height timestamp**

**notaries height**

**notaries timestamp**

The `notaries` method returns the public key, BTC address, and KMD address for each Komodo notary node.

Either or both of the height and timestamp parameters will suffice.

### Arguments

| Name      | Type     | Description                                      |
| --------- | -------- | ------------------------------------------------ |
| height    | (number) | the block height desired for the query           |
| timestamp | (number) | the timestamp of the block desired for the query |

### Response

| Name                 | Type     | Description                                                                                                                           |
| -------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| "notaries": \[ ... ] | (array)  |                                                                                                                                       |
| "pubkey"             | (string) | the public signing key of the indicated notary node, used on the KMD network to create notary-node authorized transactions            |
| "BTCaddress"         | (string) | the public BTC address the notary node uses on the BTC blockchain to create notarizations                                             |
| "KMDaddress"         | (string) | the public KMD address the notary node uses on the KMD blockchain to create notarizations                                             |
| "numnotaries"        | (number) | the number of notary nodes; typically this value is 64, but the value may vary on rare circumstances, such as during election seasons |
| "height"             | (number) | the block height number at which the notary-node information applies                                                                  |
| "timestamp"          | (number) | the timestamp at which the notary-node information applies                                                                            |

#### 📌 Examples

Command:

```bash
./komodo-cli notaries 1536365515
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "notaries": [
      {
        "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
        "BTCaddress": "1E2ac2gxeFR2ir1H3vqETTperWkiXkwy99",
        "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc"
      },
        ...  (63 responses omitted from the documentation for brevity)
    ],
    "numnotaries": 64,
    "height": 1536365515,
    "timestamp": 1536792974
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "notaries", "params": ["1000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
  "result": {
    "notaries": [
      {
        "pubkey": "03b7621b44118017a16043f19b30cc8a4cfe068ac4e42417bae16ba460c80f3828",
        "BTCaddress": "1E2ac2gxeFR2ir1H3vqETTperWkiXkwy99",
        "KMDaddress": "RNJmgYaFF5DbnrNUX6pMYz9rcnDKC2tuAc"
      },
        ...      (63 responses omitted from documentation for brevity)
    ],
    "numnotaries": 64,
    "height": 1000000,
    "timestamp": 1536365515
  },
  "error": null,
  "id": "curltest"
  }
  ```
</CollapsibleSection>

## verifychain

**verifychain ( checklevel numblocks )**

The `verifychain` method verifies the coin daemon's blockchain database.

<Note>
  Depending on the state of your blockchain database and daemon, this call can take a prolonged period of time to complete.
</Note>

### Arguments

| Name       | Type                                    | Description                                      |
| ---------- | --------------------------------------- | ------------------------------------------------ |
| checklevel | (numeric, optional, 0-4, default=3)     | indicates the thoroughness of block verification |
| numblocks  | (numeric, optional, default=288, 0=all) | indicates the number of blocks to verify         |

### Response

| Name       | Type      | Description                             |
| ---------- | --------- | --------------------------------------- |
| true/false | (boolean) | whether the verification was successful |

#### 📌 Examples

Command:

```bash
./komodo-cli verifychain
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "verifychain", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": true,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## verifytxoutproof

**verifytxoutproof "proof\_string"**

The `verifytxoutproof` method verifies that a proof points to a transaction in a block. It returns the transaction to which the proof is committed, or it will throw an RPC error if the block is not in the current best chain.

### Arguments

| Name            | Type               | Description                                      |
| --------------- | ------------------ | ------------------------------------------------ |
| "proof\_string" | (string, required) | the hex-encoded proof generated by gettxoutproof |

### Response

| Name   | Type     | Description                                                                                |
| ------ | -------- | ------------------------------------------------------------------------------------------ |
| "txid" | (string) | the transaction ids to which the proof commits; the array is empty if the proof is invalid |

#### 📌 Examples

Command:

```bash
./komodo-cli verifytxoutproof "040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  ["c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"]
  ```
</CollapsibleSection>

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "verifytxoutproof", "params": ["040000004cd8bd98c66020496d0b34a5f5412400146ba10d6c7ab4286f84f7008d8d390e9ca9575183f60906e293e9766997396bec59f1c0b966085de3d17f8ac3c9d5280000000000000000000000000000000000000000000000000000000000000000da05975bf50e0f202d004b81fcc388cfd411d8c7c59a548e070b5affe938ce8ce830f10b298b00002402939a9a31df1305b40d26d9748283b102c708258717248d0d63f01d2957d8e3dcf56f6e03000000022e4babc29707fbdd8da2e4277b7c8b8b09e837f409eb047c936904d75fc8e6267a9dcf39838a70d552bf5e246116bee43e93178916aae388d5bd87bf2e4a1fc7010d"] }' -H 'content-type: text/plain;' http://127.0.0.1:9801
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "c71f4a2ebf87bdd588e3aa168917933ee4be1661245ebf52d5708a8339cf9d7a"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain cclib Methods";
export const description = "The methods in this document interact with Antara Modules that make use of the `-ac_cclib` parameter.";

# CC Lib

The following methods interact with Antara Modules that make use of the `-ac_cclib` parameter.

## cclib

**cclib insert\_method insert\_evalcode \\"\[%22json\_string%22, json\_integer, ... ]\\"**

The `cclib` method allows the user to interact with the dynamic Antara Module associated with `evalcode`.

Each `evalcode` module has unique methods and json parameters associated, as well as unique responses.

#### cclib formatting

Arguments for `cclib` methods are supplied as arrays. When executed in the terminal, the values for the array can be added in a normal fashion. However, when `cclib` methods are executed as a part of a script, the shell cannot parse the arrays without additional formatting.

##### Array Formatting for Terminal

In the terminal, the array is bound by `''` single-quotation characters and strings are bound by `""` double-quotation characters.

Terminal format:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 '["03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",1]'
```

##### Array Formatting for Bash Scripts

In a bash-script, the array is bound by `\"\"` escaped double-quotation characters and strings within the array are bound by `%22 %22` characters. (`0x22` is the ASCII encoding for `"`.)

This format can be used in a terminal directly or in shell scripts, and therefore some developers may default to it, although the format is not always necessary.

Script format:

```bash
./komodo-cli -ac_name=MUSIG  cclib send 18 \"[%2203d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a%22,1]\"
```

<Note>
  The [cclibinfo](/smart-chains/api/cclib/#cclibinfo) method returns a complete
  list of available methods and their parameters for each unique `evalcode`.
</Note>

### Arguments

| Name         | Type             | Description                                                       |
| ------------ | ---------------- | ----------------------------------------------------------------- |
| method       | (string)         | the unique name of the method                                     |
| evalcode     | (decimal number) | the `EVALCODE` of the module of interest                          |
| json\_params | (array)          | the parameters to be supplied to the method, provided as an array |

### Response

| Name                                            | Type | Description |
| ----------------------------------------------- | ---- | ----------- |
| (the response for each `EVALCODE` is different) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclib combine 18 \"[%220225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a%22,%2202d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567%22]\"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "pkhash": "8897e150bfb07d3f967ffadb4b0f3c84ea73a94c0d715c4b7e6d9c816c5113a9",
    "combined_pk": "03d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a",
    "result": "success"
  }
  ```
</CollapsibleSection>

<DevComment>
  Need to find the correct way to issue the command from jl

  You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

  Command:

  ```bash
  curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "cclib", "params": ["combine", "18", "0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a", "02d3431950c2f0f9654217b6ce3d44468d3a9ca7255741767fdeee7c5ec6b47567"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
  ```

  <CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
    ```json
    ```
  </CollapsibleSection>
</DevComment>

## cclibaddress

**cclibaddress evalcode pubkey**

The `cclibaddress` method returns information about the addresses related to the specified `pubkey`, and according to the Antara Module associated with the specified `evalcode`. If no `pubkey` is provided, the `pubkey` used to the launch the daemon is the default.

### Arguments

| Name     | Type               | Description                                                 |
| -------- | ------------------ | ----------------------------------------------------------- |
| evalcode | (decimal number)   | the `EVALCODE` of the module of interest                    |
| pubkey   | (string, optional) | the public key related to the requested address information |

### Response

| Name                   | Type     | Description                                                                                                               |
| ---------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------- |
| result                 | (string) | whether the command executed successfully                                                                                 |
| CClibCCAddress         | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the Antara Module's privkey |
| CCbalance              | (number) | the amount of coins in the `CClibCCAddress`                                                                               |
| CClibNormalAddress     | (string) | the unmodified public address generated from the Antara Module's privkey                                                  |
| CClibCCTokensAddress   | (string) | this property is used for development purposes only and can otherwise be ignored                                          |
| myAddress              | (string) | the normal address generated from the `pubkey`                                                                            |
| myCCAddress(CClib)     | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                |
| PubkeyCCaddress(CClib) | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                |
| myCCaddress            | (string) | taking the parameter `evalcode` as a modifier, this is the public address that corresponds to the `pubkey`                |
| myCCbalance            | (number) | the amount of coins in `myCCaddress`                                                                                      |
| mybalance              | (number) | the amount of coins in `myAddress`                                                                                        |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclibaddress 18 0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "CClibCCAddress": "RKWS7jxyjPX9iaJttk8iMKf1AumanKypez",
    "CCbalance": 2.0977,
    "CClibNormalAddress": "RQHYfxb21ow4Xppt2H9x7k5XMhk7PMbKCc",
    "CClibCCTokensAddress": "RVjvG3or8b8asoYBJua9p97pf3RSpaEhRG",
    "myAddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
    "myCCAddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
    "PubkeyCCaddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
    "myCCaddress": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
    "myCCbalance": 0.0,
    "myaddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
    "mybalance": 94.60081561
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "cclibaddress", "params": ["18", "0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "result": "success",
      "CClibCCAddress": "RKWS7jxyjPX9iaJttk8iMKf1AumanKypez",
      "CClibCCBalance": 0.0,
      "CClibNormalAddress": "RQHYfxb21ow4Xppt2H9x7k5XMhk7PMbKCc",
      "CClibNormalBalance": 0.0,
      "CClibCCTokensAddress": "RVjvG3or8b8asoYBJua9p97pf3RSpaEhRG",
      "PubkeyCCaddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
      "PubkeyCCbalance(CClib)": 0.0,
      "myCCAddress(CClib)": "RJ2bk7v8nUZhensBW5FB2kx1TQcnmEtGTp",
      "myCCbalance(CClib)": 0.0,
      "myaddress": "RN727JeeiZ6NXic7PUKTCiHT1HvuBN4RDa",
      "mybalance": 100005.1364497
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## cclibinfo

**cclibinfo**

The `cclibinfo` method displays all the methods of all the modules that are available in the current library.

The library is loaded at runtime using the [-ac\_cclib](/antara/setup/antara-customizations/#ac-cclib) parameter.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name             | Type                    | Description                                                                                                                                                                                       |
| ---------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result           | (string)                | whether the command executed successfully                                                                                                                                                         |
| CClib            | (string)                | the name of the given CClibrary                                                                                                                                                                   |
| methods          | (array of json objects) | an array containing json objects, each of which describe a method of a module                                                                                                                     |
| evalcode         | (decimal number)        | the `EVALCODE` of the given Antara Module                                                                                                                                                         |
| funcid           | (character)             | this value is a mnemonic in the `OP_RETURN` for all generated transactions; if the provided method does not generate a transaction, this value is a single character that has no relevant meaning |
| name             | (string)                | the name of the Antara module                                                                                                                                                                     |
| method           | (string)                | the name of the method                                                                                                                                                                            |
| help             | (string)                | help for the method, including a description of the method's arguments                                                                                                                            |
| params\_required | (decimal number)        | the number of parameters that are required for the method to succeed                                                                                                                              |
| params\_max      | (decimal number)        | the maximum number of parameters the method can accept                                                                                                                                            |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=MUSIG cclibinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "CClib": "sudoku",
    "methods": [
      {
        "evalcode": 16,
        "funcid": "F",
        "name": "faucet2",
        "method": "fund",
        "help": "amount",
        "params_required": 1,
        "params_max": 1
      },
      {
        "evalcode": 16,
        "funcid": "G",
        "name": "faucet2",
        "method": "get",
        "help": "<no args>",
        "params_required": 0,
        "params_max": 0
      },
      {
        "evalcode": 17,
        "funcid": "G",
        "name": "sudoku",
        "method": "gen",
        "help": "<no args>",
        "params_required": 0,
        "params_max": 0
      },
  ..... (omitted for brevity)
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "cclibinfo", "params": [ ] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "result": "success",
      "CClib": "sudoku",
      "methods": [
        {
          "evalcode": 16,
          "funcid": "F",
          "name": "faucet2",
          "method": "fund",
          "help": "amount",
          "params_required": 1,
          "params_max": 1
        },
        {
          "evalcode": 16,
          "funcid": "G",
          "name": "faucet2",
          "method": "get",
          "help": "<no args>",
          "params_required": 0,
          "params_max": 0
        },
        {
          "evalcode": 17,
          "funcid": "G",
          "name": "sudoku",
          "method": "gen",
          "help": "<no args>",
          "params_required": 0,
          "params_max": 0
        },
        ..... (omitted for brevity)

      ]
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Control Methods";
export const description = "This document contains Control methods for a Smart Chain.";

# Control

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

<DevComment>
  These work for KMDLabs chains now, must revisit after they are modded to work for KMD

  ## getnotarysendmany

  **getnotarysendmany**

  The `getnotarysendmany` method returns a sendmany JSON array with Raddresses of the current notaries.

  Examples:

  > komodo-cli getnotarysendmany 10
  > curl --user myusername --data-binary '\{"jsonrpc": "1.0", "id":"curltest", "method": "getnotarysendmany", "params": \[10] }' -H 'content-type: text/plain;' [http://127.0.0.1:7771/](http://127.0.0.1:7771/)

  ## getiguanajson
</DevComment>

## getinfo

**getinfo**

The `getinfo` method returns an object containing various state info.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name              | Type               | Description                                                                                                                            |
| ----------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------------------------- |
| "version"         | (numeric)          | the server version                                                                                                                     |
| "protocolversion" | (numeric)          | the protocol version                                                                                                                   |
| "walletversion"   | (numeric)          | the wallet version                                                                                                                     |
| "balance"         | (numeric)          | the total balance of the wallet                                                                                                        |
| "blocks"          | (numeric)          | the current number of blocks processed in the server                                                                                   |
| "timeoffset"      | (numeric)          | the time offset                                                                                                                        |
| "connections"     | (numeric)          | the number of connections                                                                                                              |
| "proxy"           | (string, optional) | the proxy used by the server                                                                                                           |
| "difficulty"      | (numeric)          | the current difficulty                                                                                                                 |
| "testnet"         | (boolean)          | if the server is using testnet or not                                                                                                  |
| "keypoololdest"   | (numeric)          | the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool                                                |
| "keypoolsize"     | (numeric)          | how many new keys are pre-generated                                                                                                    |
| "unlocked\_until" | (numeric)          | the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked |
| "paytxfee"        | (numeric)          | the transaction fee set in COIN/kB                                                                                                     |
| "relayfee"        | (numeric)          | minimum relay fee for non-free transactions in COIN/kB                                                                                 |
| "errors"          | (string)           | any error messages                                                                                                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli getinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "version": 1001550,
    "protocolversion": 170003,
    "KMDversion": "0.2.0",
    "notarized": 0,
    "prevMoMheight": 0,
    "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
    "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
    "notarizedtxid_height": "mempool",
    "KMDnotarized_height": 0,
    "notarized_confirms": 0,
    "walletversion": 60000,
    "balance": 10.16429765,
    "blocks": 459,
    "longestchain": 0,
    "timeoffset": 0,
    "tiptime": 1536624090,
    "connections": 0,
    "proxy": "",
    "difficulty": 1.000026345948652,
    "testnet": false,
    "keypoololdest": 1536262464,
    "keypoolsize": 101,
    "paytxfee": 0.0,
    "relayfee": 0.000001,
    "errors": "",
    "name": "SIDD",
    "p2pport": 9800,
    "rpcport": 9801,
    "magic": -759875707,
    "premine": 10
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "version": 1001550,
      "protocolversion": 170003,
      "KMDversion": "0.2.0",
      "notarized": 0,
      "prevMoMheight": 0,
      "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
      "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
      "notarizedtxid_height": "mempool",
      "KMDnotarized_height": 0,
      "notarized_confirms": 0,
      "walletversion": 60000,
      "balance": 10.16429765,
      "blocks": 459,
      "longestchain": 0,
      "timeoffset": 0,
      "tiptime": 1536624090,
      "connections": 0,
      "proxy": "",
      "difficulty": 1.000026345948652,
      "testnet": false,
      "keypoololdest": 1536262464,
      "keypoolsize": 101,
      "relayfee": 1e-6,
      "paytxfee": 0,
      "errors": "",
      "name": "SIDD",
      "p2pport": 9800,
      "rpcport": 9801,
      "magic": -759875707,
      "premine": 10
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## help

**help ( "command" )**

The `help` method lists all commands, or all information for a specified command.

### Arguments

| Name      | Type               | Description                      |
| --------- | ------------------ | -------------------------------- |
| "command" | (string, optional) | the command requiring assistance |

### Response

| Name      | Type               | Description                      |
| --------- | ------------------ | -------------------------------- |
| "command" | (string, optional) | the command requiring assistance |

#### 📌 Examples

Command:

```bash
./komodo-cli help
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  == Addressindex ==
  getaddressbalance
  getaddressdeltas
  getaddressmempool
  getaddresstxids
  getaddressutxos
  getsnapshot

  == Auction ==
  auctionaddress [pubkey]

  == Blockchain ==
  coinsupply <height>
  getbestblockhash
  getblock "hash|height" ( verbose )
  getblockchaininfo
  getblockcount

  getblockhash index
  getblockhashes timestamp
  getblockheader "hash" ( verbose )
  getchaintips
  getdifficulty

  ........ (other responses omitted for brevity)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli help getaddressbalance
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  Returns the balance for an address(es) (requires addressindex to be enabled).

  Arguments:
  {
    "addresses"
      [
        "address"  (string) The base58check encoded address
        ,...
      ]
  }

  Result:
  {
    "balance"  (string) The current balance in satoshis
    "received"  (string) The total number of satoshis received (including change)
  }

  Examples:
  > komodo-cli getaddressbalance '{"addresses": ["RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87"]}'
  > curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressbalance", "params": [{"addresses": ["RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:7771/
  ```
</CollapsibleSection>

## stop

**stop**

The `stop` method instructs the coin daemon to shut down.

The amount of time it takes to shut down the chain will vary depending on the chain's current state.

<Note type="warning">
  Forcefully stopping the chain should be avoided, as it may corrupt the local
  database. In the event of a corrupted database, the user will need to{" "}
  <b>resync</b>.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                           | Type | Description |
| ------------------------------ | ---- | ----------- |
| Komodo server stopping         |      |             |
| \[COIN] Komodo server stopping |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli stop
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  "Komodo server stopping"
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "stop", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  { "result": "Komodo server stopping", "error": null, "id": "curltest" }
  ```
</CollapsibleSection>
export const title = "Smart Chain CrossChain Methods";
export const description = "This document contains Cross-Chain methods for a Smart Chain.";

# Cross-Chain API

## Introduction

The Crosschain API allows a user to transfer (or "migrate") assets from one chain to another. Compatible forms of assets include coins and tokens.

The fundamental principle of migration is that a specific amount of assets are burned in the source chain and then the same specific amount of assets are created on the destination chain.

#### Different methods of migration using the Komodo Platform

*   MoMoM notarized migration
    *   "MoMoM" stands for "Merkle root of Merkle roots of Merkle roots"
*   An alternative migration method with notarization of the given burn transaction by notary operators (this is a backup solution to the above MoMoM method)
*   Self-managed import

#### Crosschain API Flow

*   Make an <b>export</b> or <b>burn</b> transaction in the source chain.
*   Create an "import" transaction for the burned value.
    *   This is created on the source chain, but the transaction is sent on the destination chain
*   Komodo's validation code checks that for the import transaction there exists a corresponding burn transaction, and that this transaction is not spent more than once.

#### Requirement

The source and destination chains should have the same `CCid` parameter ([ac\_cc](/antara/setup/antara-customizations/#ac-cc)). The value of this parameter should be greater than 100; this indicates to the Komodo software that the coins on both chains are fungible with each other.

<Note>
  *   In the examples, we use two chains. The source chain is <b>CFEKHOUND</b> and the destination chain is <b>CFEKDRAGON</b>.
</Note>

## MoMoM Notarized Migration

The MoMoM notarized migration API allows the migration of coin or token value using Komodo's notary network. This facilitates the highly scalable multi-chain architecture of Smart Chains on the Komodo Platform.

Notary nodes store "fingerprints" of the blocks belonging to the blockchains of the various assets in the main Komodo chain (KMD). The "fingerprints" can also be referred to as <b>MoM</b>, or `merkle root of merkle roots`.

The fingerprints of fingerprints are delivered back into the blockchain of the assets as back notarizations. To learn more about the notarization process, [please visit this linked article](https://komodoplatform.com/komodo-platforms-new-scalability-tech/).

### Workflow of the MoMoM value migration

*   On the source chain, the user calls the method [migrate\_createburntransaction](/smart-chains/api/crosschain/#migrate-createburntransaction) and broadcasts the hex of the returned burn transaction (`BurnTxHex`) using the [sendrawtransaction](/smart-chains/api/rawtransactions/#createrawtransaction) method. The user also receives the `payouts object` from this method
*   On the source chain, the user runs [migrate\_createimporttransaction](/smart-chains/api/crosschain/#migrate-createimporttransaction) with the hex value of the burn transaction and the `payouts object` in hex format as arguments
*   On the main Komodo chain (KMD) the user calls [migrate\_completeimporttransaction](/smart-chains/api/crosschain/#migrate-completeimporttransaction) with the import transaction in hex format which was received from the previous call as an argument.
    *   As a part of this process, the proof object for the burn transaction inside the import transaction is extended with MoMoM data. This allows verification of the burn transaction on the destination chain by using the standard Komodo notarization process without the need to create additional proof objects

### migrate\_createburntransaction

**migrate\_createburntransaction destChain destAddress amount \[tokenid]**

The `migrate_createburntransaction` method creates a transaction burning a specific amount of coins or tokens. This method also creates a `payouts object` which is later used to create an import transaction for the value corresponding to the burned amount. This method should be called on the source chain.

The method creates a burn transaction and returns it. This should be broadcast to the source chain using the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method. After the burn transaction is successfully mined, the user might have to wait for some amount of time for the back notarization to reach the source chain. The back notarization contains the `MoMoM` fingerprints of the mined block that contains the burn transaction.

The hex value of the burn transaction along with the other returned value `payouts` are used as arguments for the `migrate_createimporttransaction` method.

#### Arguments

| Name          | Type                | Description                                                                                                                                                                                                                                            |
| ------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "destChain"   | (string, required)  | the name of the destination chain                                                                                                                                                                                                                      |
| "destAddress" | (string, required)  | the address on the destination chain where coins are to be sent; the pubkey if tokens are to be sent                                                                                                                                                   |
| "amount"      | (numeric, required) | the amount in coins or tokens that should be burned on the source chain and created on the destination chain; if the indicated assets are tokens, the amount can be set only to 1, as only migration of non-fungible tokens are supported at this time |
| "tokenid"     | (string, optional)  | token id in hex; if set, the software assumes that the user is migrating tokens                                                                                                                                                                        |

#### Response

| Name        | Type     | Description                                                                                                |
| ----------- | -------- | ---------------------------------------------------------------------------------------------------------- |
| "payouts"   | (string) | a hex string of the created payouts; this value is passed into the migrate\_createimporttransaction method |
| "BurnTxHex" | (string) | a hex string of the returned burn transaction                                                              |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createburntransaction CFEKDRAGON RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4 7.77
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "payouts": "014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
    "BurnTxHex": "0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createburntransaction", "params": ["CFEKDRAGON","RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4","7.77"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "payouts": "014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
      "BurnTxHex": "0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

Broadcast the transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND sendrawtransaction 0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
  ```
</CollapsibleSection>

### migrate\_converttoexport

**migrate\_converttoexport rawtx dest\_symbol**

The `migrate_converttoexport` method allows the user to create a customized burn transaction (as opposed to a fully automated burn transaction). This method converts a given transaction to a burn transaction.

The method adds proof data to the transaction, extracts the transaction vouts, calculates their value, and burns the value by sending it to an opreturn vout. This vout is then added to the created transaction. (An opreturn vout cannot be spent at a later date, and therefore funds sent to an opreturn vout are permanently burnt.)

The other returned value, `payouts`, is used in the `migrate_createimporttransaction` method.

The caller of the method bears the responsibility to fund and sign the returned burn transaction using the methods [fundrawtransaction](/smart-chains/api/rawtransactions/#fundrawtransaction) and [signrawtransaction](/smart-chains/api/rawtransactions/#signrawtransaction).

The signed burn transaction must be broadcast to the {/* FIXME destination chain ? */} source chain using the [sendrawtansaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method.

<Note type="warning">
  Limitations

  *   The <b>migrate\_converttoexport</b> method supports only coins (tokens are not supported)
  *   The burn transaction must be stored in the import transaction's opreturn vout. Because an opreturn's data size is limited to 10,001 bytes, we recommend that the user limit the burn transaction's size to 30% of the opreturn object
</Note>

#### Arguments

| Name        | Type               | Description                        |
| ----------- | ------------------ | ---------------------------------- |
| "burntx"    | (string, required) | the burn transaction in hex format |
| "destChain" | (string, required) | the name of the destination chain  |

#### Response

| Name       | Type     | Description                                                                                          |
| ---------- | -------- | ---------------------------------------------------------------------------------------------------- |
| "payouts"  | (string) | a hex string of the created payouts; this is passed into the migrate\_createimporttransaction method |
| "exportTx" | (string) | a hex string of the returned burn transaction                                                        |

#### 📌 Examples

Create a raw transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND createrawtransaction '[{"txid":"ad930d24e0d1c060d7acf46170e31b6863cb429969449d81babd7a644745bfff","vout":6}]' '{"RBQ1XwmzduHvciRJbXbWY9YBSNtaqZvfC4":0.077}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000
  ```
</CollapsibleSection>

Convert it to an export transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_converttoexport 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000 CFEKDRAGON
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "payouts": "01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
    "exportTx": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_converttoexport", "params": ["0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac00000000f36f00000000000000000000000000","CFEKDRAGON"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "payouts": "01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac",
      "exportTx": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

Sign the export transaction:

```bash
./komodo-cli -ac_name=CFEKHOUND signrawtransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000000ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000",
    "complete": true
  }
  ```
</CollapsibleSection>

Broadcast the export transaction (using the method [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction), with the option `allowhighfees` set to `true`)

```bash
./komodo-cli -ac_name=CFEKHOUND sendrawtransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000 true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb
  ```
</CollapsibleSection>

To see the rest of the process when `migrate_converttoexport` is used, click the following button:

<CollapsibleSection expandedText="Hide rest of the Steps" collapsedText="Show rest of the Steps">
  Create the import transaction using the signed export transaction that has been created:

  ```bash
  ./komodo-cli -ac_name=CFEKHOUND migrate_createimporttransaction 0400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f00000000000000000000000000 01207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac
  ```

  Response:

  ```json
  {
    "ImportTxHex": "0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd9b016a4d9701e211faf6efe321866a1f23d337190f69d97700ba3ec5e62bd325eb10de76d4edb073030597d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad340400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000"
  }
  ```

  Complete the import transaction by executing the `migrate_completeimporttransaction` method on the KMD chain:

  ```bash
  ./komodo-cli migrate_completeimporttransaction 0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd9b016a4d9701e211faf6efe321866a1f23d337190f69d97700ba3ec5e62bd325eb10de76d4edb073030597d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad340400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000
  ```

  Response:

  ```json
  {
    "ImportTxHex": "0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd1b026a4d1702e211e48af72fc33ac62659441e7ab56499ea8afd5a258299bed66982c45fc5d9683a230997d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad34063e78002b6855b2a948d95d576fffcd9933550d8b91a35f16c39313347e78906bdca88c092c043f25170cf027411f918e234623a395de76ebe854e57c06c6f3e12befa6a56885f7fe3da8523e184cb93b394510246de78a750858c37cb5342bf12de3742ebc2905c5ce4df63ebdb2a9d937933e0d13be142c2faa8055f0f7d90400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000"
  }
  ```

  Broadcast this transaction on the destination chain:

  ```bash
  ./komodo-cli -ac_name=CFEKDRAGON sendrawtransaction 0400008085202f8901db0a481412fab7a573f4dfd708e5b31f1756e4a13f327cad0470f47023c0e1ad00ca9a3b0201e2ffffffff02207e7500000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd1b026a4d1702e211e48af72fc33ac62659441e7ab56499ea8afd5a258299bed66982c45fc5d9683a230997d5b415e109dbadb1ec193255d6a22478d1a73ddbb49dd26d9419e8929a7608b7a9d42bf456c04852b93e1d50bee26870c13f90e12471b8b2c08ce9ae51c50d6fb355134e33e4c702181ad87a0f0bfec1861732f5c8b04eb9e64d2aaecf0274ef693f365305e5be0a98cc7c892b4d4c0fa75c952e0955fcb1fb0c2c4d3ad346813d801c8749e5a2b3834cbb874f11d8619523553fd21c9b07395f5679d1ad34063e78002b6855b2a948d95d576fffcd9933550d8b91a35f16c39313347e78906bdca88c092c043f25170cf027411f918e234623a395de76ebe854e57c06c6f3e12befa6a56885f7fe3da8523e184cb93b394510246de78a750858c37cb5342bf12de3742ebc2905c5ce4df63ebdb2a9d937933e0d13be142c2faa8055f0f7d90400008085202f8901ffbf4547647abdba819d44699942cb63681be37061f4acd760c0d1e0240d93ad0600000049483045022100f609176d691bade4060799424d7d3813ea3337ad8aabc79bb6fd51797b6ec9c80220073d1ba3a74da7e33bcccf5851c2152d66fcd7aa0d2c1521ec8b2ab444d656f801ffffffff0130a57500000000003b6a39e283150a4346454b445241474f4efa2fe05c5d6cb0bf5a9be2aec4f1cd7a10c9472d6abc1e9bb9dc5903a4ec1a5b0a094346454b484f554e4400000000f36f0000000000000000000000000000000000000000000000000000000000000000
  ```

  Response:

  ```bash
  f8285da90da40f929598652cd90e6dd9968d91b1f69bdba79c46890bfd210d63
  ```
</CollapsibleSection>

### migrate\_createimporttransaction

**migrate\_createimporttransaction burntx payouts \[notaryTxid1]...\[notaryTxidN]**

*   The `migrate_createimporttransaction` method performs the initial step in creating an import transaction. This method should be called on the source chain.
*   This method returns a created import transaction in hex format. This string should be passed to the `migrate_completeimporttransaction` method on the main KMD chain to be extended with the `MoMoM` proof object.
*   When using the MoMoM backup solution (described later), the created import transaction is not passed to the `migrate_completeimporttransaction` method.
*   The user may need to wait for some time before the back notarizations objects are stored in the destination chain.

#### Arguments

| Name          | Type               | Description                                                                                                    |
| ------------- | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "burntx"      | (string, required) | the burn transaction in hex format returned from the previous method                                           |
| "payouts"     | (string, required) | the payouts object in hex format returned from the previous method and used for creating an import transaction |
| "notaryTxid1" | (string, optional) | the notary approval transaction id 1, to be passed if the `MoMoM` backup solution is used for notarization     |
| "notaryTxidN" | (string, optional) | the notary approval transaction id N, to be passed if the `MoMoM` backup solution is used for notarization     |

#### Response

| Name          | Type     | Description                                  |
| ------------- | -------- | -------------------------------------------- |
| "ImportTxHex" | (string) | the created import transaction in hex format |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createimporttransaction 0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000 014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createimporttransaction", "params": ["0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c00000000000000000000000000","014014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### migrate\_completeimporttransaction

**migrate\_completeimporttransaction importtx**

The `migrate_completeimporttransaction` method performs the finalizing step in creating an import transaction. This method should be called on the KMD (Komodo) chain.

This method returns the import transaction in hex format, updated with the `MoMoM` proof object. This object provides confirmation that the burn transaction exists in the source chain.

The finalized import transaction should be broadcast on the destination chain through the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method.

Komodo recommends that the user wait until the notarization objects are stored in the destination chain before broadcasting the import transaction. Otherwise an error message is returned.

In the event that an error is returned, simply wait until the notarization objects are stored in the KMD chain and try again.

#### Arguments

| Name       | Type               | Description                                                                                                    |
| ---------- | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "importtx" | (string, required) | the import transaction in hex format created using the previous method                                         |
| "offset"   | (string, optional) | the number of blocks below the current KMD(Komodo) blockchain height in which a `MoMoM` proof must be searched |

#### Response

| Name          | Type     | Description                                                                 |
| ------------- | -------- | --------------------------------------------------------------------------- |
| "ImportTxHex" | (string) | import transaction in hex extended with the MoMoM proof of burn transaction |

#### 📌 Examples

Command:

```bash
./komodo-cli migrate_completeimporttransaction 0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fdc9016a4dc501e211da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_completeimporttransaction", "params": ["0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "ImportTxHex": "0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

Broadcast the transaction:

```bash
./komodo-cli CFEKDRAGON sendrawtransaction 0400008085202f89011016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd100ca9a3b0201e2ffffffff024014502e000000001976a914173a5c80d8956eed4f1b2d46e3855fc97b3b64cf88ac0000000000000000fd49026a4d4502e211a2f7550475bf21bac89b760b8c1e6a114d77c22de1584f3d65a09b98fe73360945082cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadfdfaa753cfdd54be8cc63b15bc2544964c03c43e0645a1ea9302522a1c9daf4c19dd9ff959973a556e4761ae171363572f782f5660a89acde315cd811a1b42140fa6d1de2ced3e371e4f8e4bca493a23d6121a608ccc0d66eb45b3ccce9518612bef75468f0fe5310972c8059e9aabf86b59a824bf5e2ac6f6b6eeb7dc171ebcb0400008085202f8901a91010764d209bb4bdc9586f44cfced36ea75289026e714e040acac9eea475c00c0000006b483045022100e57af148204d15daa51fde4d21f0a0e54e7dd237f2bb4ee4a82bf34b27002178022052dc8e4601dd0bcbab3024ef47517391258fe5ef0fc2d4be38cc10e0c15fdbb6012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ffffffff02403b5a0c00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac503b502e000000003b6a39e283150a4346454b445241474f4e8c5970dd6f483fef99e6be0bbc64adc1ab1060e341a5c2c8b0f0a56a6d7936e80a094346454b484f554e4400000000466c0000000000000000000000000000000000000000000000000000000000000000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d
  ```
</CollapsibleSection>

## Notarization Backup Solution

There is an alternative solution to notarize burn transactions. This method is useful when the automated MoMoM notarization method fails or is slow.

In this method, the user sends burn transactions to a special publishing resource that is monitored by the notary operators. The notary operators check this publishing resource, pick a burn transaction, validate and check the existence of the burn transaction in its source chain. The notary operators then create an approval transaction in the destination chain and return the transaction ids to the publishing resource.

### Alternative Transfer Method Flow

*   A user creates a burn transaction using the [migrate\_createburntransaction](/smart-chains/api/crosschain/#migrate-createburntransaction) method and publishes the transaction in hex format to a publishing resource
    *   The publishing resource is monitored by the notary operators (was tested in the [Komodo discord server](https://komodoplatform.com/discord))
*   The notary operators must collect the burn transaction, and check its validity and existence in the source chain
    *   To check the transaction, the notary operators use the `migrate_checkburntransactionsource` method
    *   If the burn transaction is successfully validated, the notary operators must create approval transactions using the method [migrate\_createnotaryapprovaltransaction](/smart-chains/api/crosschain/#migrate-createnotaryapprovaltransaction) in the destination chain and publish their transaction ids back into the publishing resource
*   The user collects the transaction ids and calls the [migrate\_createimporttransaction](/smart-chains/api/crosschain/#migrate-createimporttransaction) method, passing the collected notary approval transaction ids as arguments in the destination chain
    *   Currently, the user must have at least 5 successful notary-approval transactions for an import transaction to be considered as valid in the destination chain

### migrate\_checkburntransactionsource

**migrate\_checkburntransactionsource burntxid**

The `migrate_checkburntransactionsource` method allows a notary operator to check the burn transaction's structure and verify its presence in the source chain.

#### Arguments

| Name       | Type               | Description               |
| ---------- | ------------------ | ------------------------- |
| "burntxid" | (string, required) | the burn transaction's id |

#### Response

| Name           | Type               | Description                                                       |
| -------------- | ------------------ | ----------------------------------------------------------------- |
| "sourceSymbol" | (string)           | the source chain's name                                           |
| "targetSymbol" | (string)           | the target chain's name                                           |
| "targetCCid"   | (number)           | the target chain's `CCid`                                         |
| "tokenid"      | (string, optional) | the token id if a token is to be migrated                         |
| "TxOutProof"   | (string)           | the proof of the burn transaction's existence in the source chain |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_checkburntransactionsource d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "SourceSymbol": "CFEKHOUND",
    "TargetSymbol": "CFEKDRAGON",
    "TargetCCid": "533",
    "TxOutProof": "040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105",
    "result": "success"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_checkburntransactionsource", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "SourceSymbol": "CFEKHOUND",
      "TargetSymbol": "CFEKDRAGON",
      "TargetCCid": "533",
      "TxOutProof": "040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105",
      "result": "success"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### migrate\_createnotaryapprovaltransaction

**migrate\_createnotaryapprovaltransaction burntxid txoutproof**

A notary operator uses the `migrate_createnotaryapprovaltransaction` method to create an approval transaction in the destination chain with the proof of the burn transaction's existence in the source chain.

The returned notary approval transaction should be broadcast to the destination chain using the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method.

#### Arguments

| Name         | Type               | Description                                   |
| ------------ | ------------------ | --------------------------------------------- |
| "burntxid"   | (string, required) | the burn transaction's id                     |
| "txoutproof" | (string, required) | the proof of the burn transaction's existence |

#### Response

| Name          | Type     | Description                               |
| ------------- | -------- | ----------------------------------------- |
| "NotaryTxHex" | (string) | notary approval transaction in hex format |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND migrate_createnotaryapprovaltransaction d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610 040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "NotaryTxHex": "0400008085202f890101627137f51e780237504126737cc1b3af7ccb4069ce10436fc541cfd527ff56060000004847304402202014638b902dab110afe48ee72890ab08ba7c9818b54e7ff521a5079dccccfad022061b6f790ba0508b57d5d189cea8fba90ed601cfcfbb0fed6b7e4b21c37ec851601ffffffff031027000000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0a02fe0000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0000000000000000ec6a4ce9e8040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd1010500000000d26f00000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "migrate_createnotaryapprovaltransaction", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610","040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd10105"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "NotaryTxHex": "0400008085202f890101627137f51e780237504126737cc1b3af7ccb4069ce10436fc541cfd527ff560600000048473044022072aa2c271ec12a82df9f9667161b117da0814400f08f26950bae4ac762ea712302205350ac5faf430398e01dff7d6cb608e6b5eee580a2a85d70566096897fb052b601ffffffff031027000000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0a02fe0000000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac0000000000000000ec6a4ce9e8040000009c6c2e1c0607ea57d44d6d0518cebc341a76e8f294ad6d2844d84f09983b35013bfacfeb3d1a412c1261f59f122fae6ae3d657d3a1871902282519a0b0d08045fbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493ec64bd45c8fab0220360057fb64b4378bb1a33d9dcf9acf6e5b7c42f6a08db8eb87bfaad001910000143427efb28257954cb4e6596f4e06bdcad43cb9a402000000022cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b61016cf36b2605abe44354cd328d8cba6638c6cc53808d4e16609637e3f1c9fd1010500000000d56f00000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## Self Import API

The Self Import API is a special API available only in chains that need a pubkey to create new coins arbitrarily.

### selfimport

**selfimport destAddress amount**

The Self Import API allows a trusted pubkey to create more coins on the same chain.

#### Requirements

The chain must have the custom parameters `-ac_import=PUBKEY` and `-ac_pubkey` set to a pubkey which is allowed to create coins.

#### Self Import Flow

*   For creating more coins in the chain with `-ac_import=PUBKEY` enabled, use the <b>selfimport</b> method
*   The method returns a source transaction that contains a parameter with the amount of coins to create
    *   The returned value is a proof of the trusted pubkey owner's intention to create new coins in the chain
*   The returned source transaction should be broadcast to the chain using the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method. The source transaction spends a `txfee=10000 satoshis` from the `-ac_pubkey` owner's uxtos
*   After the source transaction is mined, the import transaction should also be broadcasted to the chain with the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method. After this transaction is mined, its vout contains the amount of created coins in the chosen destination address

#### Arguments

| Name          | Type               | Description                                        |
| ------------- | ------------------ | -------------------------------------------------- |
| "destAddress" | (string, required) | the address where the created coins should be sent |
| "amount"      | (number, required) | the amount in coins to create                      |

#### Response

| Name          | Type     | Description                          |
| ------------- | -------- | ------------------------------------ |
| "SourceTxHex" | (string) | the source transaction in hex format |
| "ImportTxHex" | (string) | the import transaction in hex format |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=IMPORTTEST selfimport RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3 100000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
    "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "selfimport", "params": ["RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3","100000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
      "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

To see the rest of the process of the `migrate_converttoexport` method, click the following button.

<CollapsibleSection expandedText="Hide the Whole Process" collapsedText="Show the Whole Process">
  ##### Node1

  Start a chain with the parameters `-ac_import=PUBKEY` and `-ac_pubkey=<pubkey>` (`<pubkey>` is the pubkey that can create coins at will ).

  ```bash
  ./komodod -ac_name=IMPORTTEST -ac_import=PUBKEY -ac_pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634 -ac_supply=777777 -ac_reward=100000000 -pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634
  ```

  Import the privkey corresponding to the pubkey used when starting the chain.

  ```bash
  ./komodo-cli -ac_name=IMPORTTEST importprivkey xxxxx
  ```

  ##### Node2

  Connect to the chain created in Node1.

  ```bash
  ./komodod -ac_name=IMPORTTEST -ac_import=PUBKEY -ac_pubkey=0257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634 -ac_supply=777777 -ac_reward=100000000 -addnode=<ip address of Node1>
  ```

  Notice that there is only `-ac_pubkey` in the above command but not `pubkey`. That's because, `-ac_pubkey` is part of the chain parameters and `-pubkey` is just [indicating the pubkey](/antara/tutorials/understanding-antara-addresses/#creating-and-launching-with-a-pubkey) to the particular daemon for various features.

  Verify that `connections:1` from the [getinfo](/smart-chains/api/control/#getinfo) method.

  ##### Node1

  Start mining in Node1.

  ```bash
  ./komodo-cli -ac_name=IMPORTTEST setgenerate true 1
  ```

  Verify that the balance increased by at least the amount specified in `-ac_supply` through the [getbalance](/smart-chains/api/wallet/#getbalance) method.

  Use the method `selfimport` to receive the `SourceTxHex` and the `ImportTxHex`.

  ```bash
  ./komodo-cli -ac_name=IMPORTTEST selfimport RM9n6rts1CBKX4oXziLp1WBBgEUjKKWHb3 100000
  ```

  ```json
  {
    "SourceTxHex": "0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000",
    "ImportTxHex": "0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000"
  }
  ```

  Broadcast the `SourceTxHex`.

  ```bash
  ./komodo-cli -ac_name=IMPORTTEST sendrawtransaction 0400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0310270000000000001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ace092f5050000000023210257e1074b542c47cd6f603e3d78400045df0781875f698138e92cb03055286634ac00000000000000000c6a0ae24100a0724e18090000000000008f0100000000000000000000000000
  ```

  Response.

  ```bash
  e0dd729342f9714957119c7d78342228f34dae48a0648b4339148c8abeb21ad5
  ```

  After the above transaction is confirmed, Broadcast the `ImportTxHex`.

  ```bash
  ./komodo-cli -ac_name=IMPORTTEST sendrawtransaction 0400008085202f89012764621f3e61d2b47b9f0595639db26b0455d5ac17f73676115e8967640a422400ca9a3b0201e2ffffffff0200a0724e180900001976a914823a9534f765ff5f56d1d5bddc029087972f321c88ac0000000000000000f16a4ceee211d51ab2be8a8c1439438b64a048ae4df3282234787d9c11574971f9429372dde089af17000400008085202f8901011063706ccf8ccb228566bf94ff2c34e544a3d856b7f061d7d881789dd89d130000000049483045022100efc45823b3e190cd6fab3192d2f1c7ce2945396868f786c0c1f3fca6d4d54378022011d19799fb30e089cc16c38557da301aeb707e289ca911e1c99e6fcc603ba01e01ffffffff0100a0724e18090000306a2ee28efefefe7f065055424b4559dded40d8b8826ad32af955a9ce0c2ebc0cd60d9978a1936d425b8f7bdc1c756700000000008f010000000000000000000000000000000000000000000000000000000000000000
  ```

  Response.

  ```bash
  e78096bb4139430276fd5176ff8ac97182be17606558eefb0c21c332192bd189
  ```

  Confirm that the address given to the `selfimport` command received the newly created funds.
</CollapsibleSection>

## Notary API

The following methods are available to the notary nodes for retrieving the blockchain "fingerprints" and notarization data.

### calc\_MoM

**calc\_MoM height MoMdepth**

The `calc_MoM` method calculates the value of the merkle root of the blocks' merkle roots (MoM), starting from the block of the indicated height for the chosen depth.

<Note>This method should be run on a Smart Chain.</Note>

#### Arguments

| Name       | Type               | Description                                                  |
| ---------- | ------------------ | ------------------------------------------------------------ |
| "height"   | (number, required) | the block height from which the `MoM` calculation must begin |
| "MoMdepth" | (number, required) | the number of blocks to include in the MoM calculation       |

#### Response

| Name       | Type     | Description                                            |
| ---------- | -------- | ------------------------------------------------------ |
| "coin"     | (string) | the chain's name                                       |
| "height"   | (string) | the starting block height                              |
| "MoMdepth" | (number) | the number of blocks included in the `MoM` calculation |
| "MoM"      | (string) | the `MoM` value                                        |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND calc_MoM 1000 100
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "coin": "CFEKHOUND",
    "height": 1000,
    "MoMdepth": 100,
    "MoM": "318e9e5636cb9ef99ca7343da72a3544fbcccb7889fa386083e69a8527557a4d"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "calc_MoM", "params": ["1000","100"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "coin": "CFEKHOUND",
      "height": 1000,
      "MoMdepth": 100,
      "MoM": "318e9e5636cb9ef99ca7343da72a3544fbcccb7889fa386083e69a8527557a4d"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### MoMoMdata

**MoMoMdata symbol kmdheight ccid**

The `MoMoMdata` method calculates the value of the merkle root of merkle roots of the blocks' merkle roots (MoMoM), starting from the block of the indicated height for the data of the indicated chain.

<Note>
  Execute this method on the KMD chain.
</Note>

#### Arguments

| Name        | Type               | Description                                                     |
| ----------- | ------------------ | --------------------------------------------------------------- |
| "symbol"    | (string, required) | the chain's name whose data's `MoMoM` value is to be calculated |
| "kmdheight" | (number, required) | the number of blocks to include in the `MoM` calculation        |
| "ccid"      | (number, required) | the chain's CCid                                                |

#### Response

| Name               | Type     | Description                                               |
| ------------------ | -------- | --------------------------------------------------------- |
| "coin"             | (string) | the chain's name                                          |
| "kmdheight"        | (string) | the starting block's height                               |
| "ccid"             | (number) | the chain's `CCid`                                        |
| "MoMs"             | (string) | the array of `MoM` values                                 |
| "notarizationHash" | (string) | the first found notarization transaction id for the chain |
| "MoMoM"            | (string) | the MoMoM value                                           |

#### 📌 Examples

Command:

```bash
./komodo-cli MoMoMdata CFEKHOUND 1350074 533
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "coin": "CFEKHOUND",
    "kmdheight": 1350069,
    "ccid": 533,
    "MoMs": [
      "e02b0479aad97b3edf57eaffe951f9cd536c37ae2b4aa05c080798eac484e30b",
      "24866dd7b381c2418e44aae5030b513160bd8d706f5f7bf1fa75db297052bf0d",
      "4d5613567bbd3f169b96f51765487493129c0f9357a62318013e3b22b488d711",
      "fc8f1911a109f506095bae52f9b4152a1469a42037b2aa22aa6f4d4d3b04101b",
      "a0d872460a4a8a44261ec9201567636e62fcda5580164a00051e7dcb8f64511e",
      "fbad42139d7d35947b9ae4f20f1a1e88cd83ac6732e246165eecc2d99b05ee36",
      "323c3c9fd87c555f6795ecbbec607ce32007fe90b8e435512cd417a2fc6e2637",
      "9677f063342198a462ea89c0542a79424219287bc8e025b8f976ef5841ce927b",
      "154b989f4e9900da37710bfd5c00130a4c7d796382843706594ab6443e09297e",
      "0e1b82ea82b5c97486e2620423ab5fe81085f32cc38bfd19f8aac9416b4c5b84",
      "35ec0d4946bbcba8aae8fa1f939d020c13750ecc100eaa33035e620aed702d86",
      "80bc23baef9c7b5555fb2a83323ae77b01f7747ead37a9f4f24bcd4b9485b28b"
    ],
    "notarization_hash": "3b202647603e18aeea6d07bb39cda4f1df12117ce1c9439772f066d6cbda72c5",
    "MoMoM": "f944a1951bafc7548644c53745ed20a671f7fc574388e5e73ab5ae0929b46bba",
    "data": "ba6bb42909aeb53ae7e5884357fcf771a620ed4537c5448654c7af1b95a144f900000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "MoMoMdata", "params": ["CFEKHOUND","1350074","533"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "coin": "CFEKHOUND",
      "kmdheight": 1350069,
      "ccid": 533,
      "MoMs": [
        "e02b0479aad97b3edf57eaffe951f9cd536c37ae2b4aa05c080798eac484e30b",
        "24866dd7b381c2418e44aae5030b513160bd8d706f5f7bf1fa75db297052bf0d",
        "4d5613567bbd3f169b96f51765487493129c0f9357a62318013e3b22b488d711",
        "fc8f1911a109f506095bae52f9b4152a1469a42037b2aa22aa6f4d4d3b04101b",
        "a0d872460a4a8a44261ec9201567636e62fcda5580164a00051e7dcb8f64511e",
        "fbad42139d7d35947b9ae4f20f1a1e88cd83ac6732e246165eecc2d99b05ee36",
        "323c3c9fd87c555f6795ecbbec607ce32007fe90b8e435512cd417a2fc6e2637",
        "9677f063342198a462ea89c0542a79424219287bc8e025b8f976ef5841ce927b",
        "154b989f4e9900da37710bfd5c00130a4c7d796382843706594ab6443e09297e",
        "0e1b82ea82b5c97486e2620423ab5fe81085f32cc38bfd19f8aac9416b4c5b84",
        "35ec0d4946bbcba8aae8fa1f939d020c13750ecc100eaa33035e620aed702d86",
        "80bc23baef9c7b5555fb2a83323ae77b01f7747ead37a9f4f24bcd4b9485b28b"
      ],
      "notarization_hash": "3b202647603e18aeea6d07bb39cda4f1df12117ce1c9439772f066d6cbda72c5",
      "MoMoM": "f944a1951bafc7548644c53745ed20a671f7fc574388e5e73ab5ae0929b46bba",
      "data": "ba6bb42909aeb53ae7e5884357fcf771a620ed4537c5448654c7af1b95a144f900000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### assetchainproof

**assetchainproof txid**

The `assetchainproof` method scans the chain for the back `MoM` notarization for a transaction corresponding to the given transaction id and returns a proof object with MoM branch. Scanning is performed from the height up to the chain tip, with a limit of `1440` blocks.

#### Arguments

| Name   | Type               | Description                                                  |
| ------ | ------------------ | ------------------------------------------------------------ |
| "txid" | (string, required) | the transaction id for which a proof object must be returned |

#### Response

| Name           | Type     | Description                                             |
| -------------- | -------- | ------------------------------------------------------- |
| "proof object" | (string) | the returned proof object with MoM branch in hex format |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND assetchainproof d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "assetchainproof", "params": ["d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "da14c5a904dcf9dcc5c4471bae0f3e90274bc782fcaf7a828c23190dbbd3392205042cd74dc8b4504472d782478b374fe3fa406f9b9199d5b8ccac7c202a73c812b6f7fb8e5644af270917b10fa879a0c5636de719d308efd245ff5613450b934a5f32fd21b84a67d7b6be78b5d625af836cf7efddab3c6e8fea54345bab9ea7732cf073ef25f0b8a0764d928c8a420d45beb793fa8ea93432a908c808e4f47daadf",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### getNotarisationsForBlock

**getNotarisationsForBlock height**

The `getNotarisationsForBlock` method returns the notarization transactions within the block of the given block hash.

#### Arguments

| Name     | Type               | Description                                  |
| -------- | ------------------ | -------------------------------------------- |
| "height" | (number, required) | the block number of the block to be searched |

#### Response

| Name             | Type     | Description                                                                                                                |
| ---------------- | -------- | -------------------------------------------------------------------------------------------------------------------------- |
| "Notary Cluster" | (string) | refers to the notary group which performed the notarizations; KMD for the main Komodo notaries, LABS for the LABS notaries |
| "txid"           | (string) | the notarization transaction's id                                                                                          |
| "chain"          | (string) | the chain that has been notarized                                                                                          |
| "height"         | (number) | the notarization transaction's block height                                                                                |
| "blockhash"      | (string) | the hash of the notarization transaction's block                                                                           |
| "notaries"       | (array)  | the [ids](https://github.com/jl777/komodo/blob/master/src/komodo_notary.h) of the notaries who performed the notarization  |

#### 📌 Examples

Command:

```bash
./komodo-cli getNotarisationsForBlock 1350074
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "KMD": [
      {
        "txid": "18c067eef7b264d3536e89e319e451d036f8c6a2256c60eb1132b9362f6d7dac",
        "chain": "KMD",
        "height": 1350060,
        "blockhash": "027d124806ce2938e166450ae50c06f11c2b254c2603b3c2d1024d48431b04ff",
        "notaries": [14, 17, 18, 19, 21, 25, 27, 28, 36, 43, 53, 55, 60]
      },
      {
        "txid": "17e77666028aa94f7793b7c916e82085d2cd555a75c21b55ba60989a7c49fff9",
        "chain": "HODL",
        "height": 447018,
        "blockhash": "0c321de920e0e3c342be96a8ffbe15c8dd738babfe7d7c5718ff2017f6f3247f",
        "notaries": [4, 18, 23, 29, 32, 39, 40, 44, 47, 48, 55, 57, 58]
      },
      {
        "txid": "2325ec9eebca3304b2b7587c5594659f40e0800d3add30c7209787af4393ded8",
        "chain": "BOTS",
        "height": 616740,
        "blockhash": "0923bbf209a22644ebe5d59555b770658e8e788579a4da1a49bf3f9e45324aa0",
        "notaries": [14, 15, 16, 25, 26, 30, 32, 43, 45, 46, 55, 57, 58]
      },
      {
        "txid": "2282d6adaeb1daa3c112395df2efc4a37bbd91f40905aecc294f908cae9cf0a1",
        "chain": "REVS",
        "height": 655866,
        "blockhash": "003dfc89999d585a92760ad335e4d3786b7860f1d1638ae0f4273cdc9dfa07e3",
        "notaries": [4, 14, 15, 16, 24, 25, 27, 32, 46, 47, 53, 55, 57]
      },
      {
        "txid": "5892ac6929f1e163ae8bad9219b52cd7d551bc295a461da9cae40accfd48ee8b",
        "chain": "MSHARK",
        "height": 631714,
        "blockhash": "07d02c0676f3a862a02190424a904d066cb1614b3866a4b7f8e11771ad5f3dde",
        "notaries": [4, 17, 23, 24, 27, 28, 30, 34, 36, 51, 56, 58, 60]
      }
    ],
    "LABS": [
      {
        "txid": "aae98ab897cedcf93600cea0b44ee4186514b2d43ac3ef07404ff4d862ef6e65",
        "chain": "LABSRCTEST",
        "height": 11655,
        "blockhash": "000e12b4d153f8e355d7ab76251c553c15116013cc678bcada5055342c1f7d7e",
        "notaries": [0, 4, 10, 13, 14, 17]
      },
      {
        "txid": "8c4ece82cc1aa467f61e9575718a06c5962934d573c13d60a715a349d5fe5694",
        "chain": "CFEKDRAGON",
        "height": 28990,
        "blockhash": "00e5a29c351f2c92e2435f8ed8d27335f6dc255bf3b658e1753ba7d3bec38efd",
        "notaries": [7, 10, 12, 13, 15, 17]
      }
    ]
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getNotarisationsForBlock", "params": [1350074] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "KMD": [
        {
          "txid": "18c067eef7b264d3536e89e319e451d036f8c6a2256c60eb1132b9362f6d7dac",
          "chain": "KMD",
          "height": 1350060,
          "blockhash": "027d124806ce2938e166450ae50c06f11c2b254c2603b3c2d1024d48431b04ff",
          "notaries": [14, 17, 18, 19, 21, 25, 27, 28, 36, 43, 53, 55, 60]
        },
        {
          "txid": "17e77666028aa94f7793b7c916e82085d2cd555a75c21b55ba60989a7c49fff9",
          "chain": "HODL",
          "height": 447018,
          "blockhash": "0c321de920e0e3c342be96a8ffbe15c8dd738babfe7d7c5718ff2017f6f3247f",
          "notaries": [4, 18, 23, 29, 32, 39, 40, 44, 47, 48, 55, 57, 58]
        },
        {
          "txid": "2325ec9eebca3304b2b7587c5594659f40e0800d3add30c7209787af4393ded8",
          "chain": "BOTS",
          "height": 616740,
          "blockhash": "0923bbf209a22644ebe5d59555b770658e8e788579a4da1a49bf3f9e45324aa0",
          "notaries": [14, 15, 16, 25, 26, 30, 32, 43, 45, 46, 55, 57, 58]
        },
        {
          "txid": "2282d6adaeb1daa3c112395df2efc4a37bbd91f40905aecc294f908cae9cf0a1",
          "chain": "REVS",
          "height": 655866,
          "blockhash": "003dfc89999d585a92760ad335e4d3786b7860f1d1638ae0f4273cdc9dfa07e3",
          "notaries": [4, 14, 15, 16, 24, 25, 27, 32, 46, 47, 53, 55, 57]
        },
        {
          "txid": "5892ac6929f1e163ae8bad9219b52cd7d551bc295a461da9cae40accfd48ee8b",
          "chain": "MSHARK",
          "height": 631714,
          "blockhash": "07d02c0676f3a862a02190424a904d066cb1614b3866a4b7f8e11771ad5f3dde",
          "notaries": [4, 17, 23, 24, 27, 28, 30, 34, 36, 51, 56, 58, 60]
        }
      ],
      "LABS": [
        {
          "txid": "aae98ab897cedcf93600cea0b44ee4186514b2d43ac3ef07404ff4d862ef6e65",
          "chain": "LABSRCTEST",
          "height": 11655,
          "blockhash": "000e12b4d153f8e355d7ab76251c553c15116013cc678bcada5055342c1f7d7e",
          "notaries": [0, 4, 10, 13, 14, 17]
        },
        {
          "txid": "8c4ece82cc1aa467f61e9575718a06c5962934d573c13d60a715a349d5fe5694",
          "chain": "CFEKDRAGON",
          "height": 28990,
          "blockhash": "00e5a29c351f2c92e2435f8ed8d27335f6dc255bf3b658e1753ba7d3bec38efd",
          "notaries": [7, 10, 12, 13, 15, 17]
        }
      ]
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### scanNotarisationsDB

**scanNotarisationsDB blockHeight symbol \[blocksLimit=1440]**

The `scanNotarisationsDB` method scans the notarization database backwards from the given block height for a notarization of the chain with the given name (symbol).

#### Arguments

| Name          | Type               | Description                                                           |
| ------------- | ------------------ | --------------------------------------------------------------------- |
| "blockHeight" | (number, required) | the starting block height from which notarizations are to be searched |
| "symbol"      | (string, required) | the chain's name whose notarizations are to be searched               |
| "blocksLimit" | (number, optional) | an optional block depth to search for notarizations                   |

#### Response

| Name       | Type     | Description                                                             |
| ---------- | -------- | ----------------------------------------------------------------------- |
| "height"   | (number) | the block height of the notarization transaction id that has been found |
| "hash"     | (string) | the hash of the notarization transaction id that has been found         |
| "opreturn" | (string) | the notarization data in hex format                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli scanNotarisationsDB 1350074 EMC2
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "height": 1350067,
    "hash": "1b86cd4512d02561359ecfc841ea49692a4c9da112393a17bd4479443fbd47a4",
    "opreturn": "45dd5cbd1972b23bfd272279f3f0bd3878ad5e020aa18f31072a096e25c261dfb4f02300454d433200000000000000000000000000000000000000000000000000000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "scanNotarisationsDB", "params": ["1350074","EMC2"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "height": 1350067,
      "hash": "1b86cd4512d02561359ecfc841ea49692a4c9da112393a17bd4479443fbd47a4",
      "opreturn": "45dd5cbd1972b23bfd272279f3f0bd3878ad5e020aa18f31072a096e25c261dfb4f02300454d433200000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## User API

The following are utility methods available to user. These methods assist in retrieving information about burn and import transactions.

### getimports

**getimports hash|height**

The `getimports` method lists import transactions in the indicated block of the chain.

#### Arguments

| Name             | Type                         | Description                               |
| ---------------- | ---------------------------- | ----------------------------------------- |
| "hash or height" | (string or number, required) | the block's hash or height to be searched |

#### Response

| Name            | Type              | Description                                         |
| --------------- | ----------------- | --------------------------------------------------- |
| "imports"       | (array)           |                                                     |
| "txid"          | (string)          | the import transaction id                           |
| "amount"        | (number)          | the import transaction's value in coins             |
| "export"        | (json)            | the export or burn transaction's infomation         |
| "txid"          | (string)          | the export transaction's id                         |
| "amount"        | (number)          | the export transaction's value                      |
| "txid"          | (string)          | the export transaction's id                         |
| "source"        | (string)          | the source chain's name                             |
| "tokenid"       | (string,optional) | the source chain's token id, if tokens are imported |
| "TotalImported" | (number)          | the total imported amount in coins                  |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKDRAGON getimports 027366fc75eb2adda37f54092f29130d3feafd5bf453b4005fbdc68a27391a8f
```

<Note>
  If the transaction id of an import is known, use the [gettransaction](/smart-chains/api/wallet/#gettransaction) method to retrieve its block hash.
</Note>

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "imports": [
      {
        "txid": "b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d",
        "amount": 0.0,
        "export": {
          "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
          "amount": 7.7701,
          "source": "CFEKHOUND"
        }
      }
    ],
    "TotalImported": 7.77,
    "time": 1557421253
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getimports", "params": ["027366fc75eb2adda37f54092f29130d3feafd5bf453b4005fbdc68a27391a8f"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "imports": [
        {
          "txid": "b2ed563617771d4a919fb13906e93c8ec485bed145a3f380583796663e285e0d",
          "amount": 0.0,
          "export": {
            "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
            "amount": 7.7701,
            "source": "CFEKHOUND"
          }
        }
      ],
      "TotalImported": 7.77,
      "time": 1557421253
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

### getwalletburntransactions

**getwalletburntransactions "count"**

The `getwalletburntransactions` method lists all the burn transactions in the current wallet.

#### Arguments

| Name    | Type               | Description                                                                                  |
| ------- | ------------------ | -------------------------------------------------------------------------------------------- |
| "count" | (number, optional) | the number of burn transactions to be returned; if omitted, defaults to 10 burn transactions |

#### Response

| Name           | Type               | Description                        |
| -------------- | ------------------ | ---------------------------------- |
| "txid"         | (string)           | the burn transaction's id          |
| "burnedAmount" | (number)           | the burned value in coins          |
| "tokenid"      | (string, optional) | the token id, if tokens are burned |
| "targetSymbol" | (string)           | the target chain's name            |
| "targetCCid"   | (number)           | the target chain's `CCid`          |

#### 📌 Examples

Command:

```bash
./komodo-cli -ac_name=CFEKHOUND getwalletburntransactions
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
      "burnedAmount": 7.7701,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    },
    {
      "txid": "060f48ac5cf0f79370623320015dc243f49ef2c23fb1b60592f77bc77d6609df",
      "burnedAmount": 0.7701,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    },
    {
      "txid": "ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb",
      "burnedAmount": 0.0771,
      "targetSymbol": "CFEKDRAGON",
      "targetCCid": "533"
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletburntransactions", "params": [""] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "txid": "d19f1c3f7e630966e1d40838c56c8c63a6cbd828d34c3544be5a60b236cf1610",
        "burnedAmount": 7.7701,
        "targetSymbol": "CFEKDRAGON",
        "targetCCid": "533"
      },
      {
        "txid": "060f48ac5cf0f79370623320015dc243f49ef2c23fb1b60592f77bc77d6609df",
        "burnedAmount": 0.7701,
        "targetSymbol": "CFEKDRAGON",
        "targetCCid": "533"
      },
      {
        "txid": "ade1c02370f47004ad7c323fa1e456171fb3e508d7dff473a5b7fa1214480adb",
        "burnedAmount": 0.0771,
        "targetSymbol": "CFEKDRAGON",
        "targetCCid": "533"
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Disclosure Methods";
export const description = "This document contains Disclosure methods for a Smart Chain.";

# Disclosure

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## z\_getpaymentdisclosure

<Note type="warning">
  EXPERIMENTAL FEATURE: Payment disclosure is currently DISABLED. This call
  always fails.
</Note>

**z\_getpaymentdisclosure transaction js\_index output\_index ("message")**

The `z_getpaymentdisclosure` method generates a payment disclosure for a given joinsplit output.

### Arguments

| Name            | Type               | Description                                         |
| --------------- | ------------------ | --------------------------------------------------- |
| "txid"          | (string, required) | (in development) {/* need to fill in this table */} |
| "js\_index"     | (string, required) |                                                     |
| "output\_index" | (string, required) |                                                     |
| "message"       | (string, optional) |                                                     |

### Response

| Name                | Type     | Description                             |
| ------------------- | -------- | --------------------------------------- |
| "paymentdisclosure" | (string) | a hex data string, with a "zpd:" prefix |

#### 📌 Examples

Command:

```bash
./komodo-cli z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 "refund"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (currently disabled)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in your coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getpaymentdisclosure", "params": ["96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2", 0, 0, "refund"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (currently disabled)
  ```
</CollapsibleSection>

## z\_validatepaymentdisclosure

**z\_validatepaymentdisclosure "paymentdisclosure"**

The `z_validatepaymentdisclosure` method validates a payment disclosure.

<Note type="warning">
  EXPERIMENTAL FEATURE: Payment disclosure is currently DISABLED. This call always fails.
</Note>

### Arguments

| Name                | Type               | Description                         |
| ------------------- | ------------------ | ----------------------------------- |
| "paymentdisclosure" | (string, required) | hex data string, with "zpd:" prefix |

### Response

| Name                 | Type | Description |
| -------------------- | ---- | ----------- |
| (currently disabled) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli z_validatepaymentdisclosure "zpd:706462ff004c561a0447ba2ec51184e6c204..."
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (currently disabled)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_validatepaymentdisclosure", "params": ["zpd:706462ff004c561a0447ba2ec51184e6c204..."] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (currently disabled)
  ```
</CollapsibleSection>
export const title = "Smart Chain Generate Methods";
export const description = "This document contains methods to manage mining and staking on a Smart Chain.";

# Generating

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## generate

**generate numblocks**

<Note>
  This function can only be used in the <b>regtest</b> mode (for testing
  purposes).
</Note>

The `generate` method instructs the coin daemon to immediately mine the indicated number of blocks.

### Arguments

| Name      | Type      | Description                              |
| --------- | --------- | ---------------------------------------- |
| numblocks | (numeric) | the desired number of blocks to generate |

### Response

| Name        | Type    | Description                |
| ----------- | ------- | -------------------------- |
| blockhashes | (array) | hashes of blocks generated |

#### 📌 Examples

Command:

```bash
./komodo-cli generate 2
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    "0475316d63fe48bb9d58373595cb334fc2553f65496edfb2fb17b9ed06f4c480",
    "00d29a2b7dec52baa9ab8e4264363f32b4989eef7dbb0a9932fbc11274195b5a"
  ]
  ```
</CollapsibleSection>

## getgenerate

**getgenerate**

The `getgenerate` method returns a boolean value indicating the server's mining status.

The default value is false.

<Note>
  See also <b>gen</b>.
</Note>

### Arguments

| Name   | Type   | Description |
| ------ | ------ | ----------- |
| (none) | (none) |             |

### Response

| Name       | Type      | Description                                           |
| ---------- | --------- | ----------------------------------------------------- |
| true/false | (boolean) | indicates whether the server is set to generate coins |

#### 📌 Examples

Command:

```bash
./komodo-cli getgenerate
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  false
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getgenerate", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": false,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## setgenerate

**setgenerate generate ( genproclimit )**

The `setgenerate` method allows the user to set the `generate` property in the coin daemon to `true` or `false`, thus turning generation (mining/staking) on or off.

Generation is limited to [genproclimit](/smart-chains/setup/common-runtime-parameters/#genproclimit) processors. Set `genproclimit` to `-1` to use maximum available processors.

<Note>
  See also the [getgenerate](/smart-chains/api/generate/#getgenerate) method to
  query the current setting, and
  [genproclimit](/smart-chains/setup/common-runtime-parameters/#genproclimit) for
  setting the default number of processors the daemon uses through the `.conf`
  file.
</Note>

### Arguments

| Name         | Type                | Description                                                                     |
| ------------ | ------------------- | ------------------------------------------------------------------------------- |
| generate     | (boolean, required) | set to true to turn on generation; set to off to turn off generation            |
| genproclimit | (numeric, optional) | set the processor limit for when generation is on; use value "-1" for unlimited |

### Response

| Name   | Type   | Description |
| ------ | ------ | ----------- |
| (none) | (none) |             |

#### 📌 Examples

##### Activate mining with maximum available processors

Command:

```bash
./komodo-cli setgenerate true -1
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

##### Activate staking

Command:

```bash
./komodo-cli setgenerate true 0
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

##### Activate mining with 4 threads

Command:

```bash
./komodo-cli setgenerate true 4
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

##### Check the setting

Command:

```bash
./komodo-cli getgenerate
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

##### Turn off generation

Command:

```bash
./komodo-cli setgenerate false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

##### Turning the setting on via json RPC

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setgenerate", "params": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

<DevComment>
  FIXME: get confirmation from alright

  setstakingsplit

  **setstakingsplit split\_percentage**

  The `setstakingsplit` method allows the user to decide what happens to a UTXO that is successfully able to stake a block in the POS64 staking system (i.e. a Smart Chain started using the [-ac\_staked](/antara/setup/antara-customizations/#ac-staked) parameter).

  The argument `split_percentage` defines the percentage of the staking UTXO value to leave in the same address. The rest of of the staking UTXO value is added to the new UTXO created to the coinbase address.

  Examples:

  *   `split_percentage` = `0` merges the staking UTXO value and the coinbase value to the coinbase address
  *   `split_percentage` = `50` takes half of the staking UTXO value and sends it to the coinbase address
  *   `split_percentage` = `100` does not change the staking UTXO

  ### Arguments

  | Name              | Type                | Description                                                                                                                                                                                              |
  | ----------------- | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
  | split\_percentage | (numeric, required) | allowed value range: `0` to `100`; the percentage of the staking UTXO value to leave in the same address; the rest of of the staking UTXO value is added to the new UTXO created to the coinbase address |

  ### Response

  | Name              | Type      | Description           |
  | ----------------- | --------- | --------------------- |
  | split\_percentage | (numeric) | the supplied argument |

  #### 📌 Examples

  Command:

  ```bash
  ./komodo-cli -ac_name=HELLOWORLD setstakingsplit 0
  ```

  <CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
    ```json
    {
      "split_percentage": 0
    }
    ```
  </CollapsibleSection>

  Command:

  ```bash
  curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setstakingsplit", "params": [100] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
  ```

  <CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
    ```json
    {
      "split_percentage": 100
    }
    ```
  </CollapsibleSection>
</DevComment>
export const title = "Smart Chain API"
export const description = "This section contains descriptions of the various default methods available for Smart Chains."

# Smart Chain API

This section of the documentation contains descriptions of the various default methods available for Smart Chains.
export const title = "Smart Chain Jumblr Methods";
export const description = "Jumblr functionality is deprecated.";

# Jumblr

<Note>
  At this time, all zero-knowledge transaction and Jumblr functionality on the main KMD chain is disabled.

  Other Smart Chains in the Komodo ecosystem offer zero-knowledge transaction functionality. However, no Smart Chain currently offers Jumblr, and therefore this documentation is currently deprecated.

  Please check with the developers of your desired Smart Chain to learn more.
</Note>

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## Basic Instructions

*   Install Komodo following the [installation guides](/smart-chains/setup/installing-from-source/#linux) and change into the `komodod` subdirectory using:

```bash
cd ~/komodo/src
```

*   Start the daemon:

```bash
./komodod &
```

*   Designate a KMD address with at least 10.024 KMD funds:

```bash
./komodo-cli jumblr_deposit KMD_address
```

<Note>
  The jumblr process continues until there are less than \~ 10.024 KMD in the
  deposit address.
</Note>

*   Designate a destination address for your funds. This should be a transparent address that you are keeping secret:

```bash
komodo-cli jumblr_secret destination_KMD_address
```

*   Leave your node running until the balance in your first address reaches below 10.024 KMD and the destination address receives the correct amount.

<Note type="warning">
  Jumblr is created to be resistant against time-based analysis. Because of
  this, Jumblr is purposefully designed not to be fast. You will need to leave
  your node running for several hours for the process to finish.
</Note>

#### 📌 Examples

Designate your deposit address.

```bash
./komodo-cli jumblr_deposit RT4mSUjG35QeuGcedsfpHtP5MhDeEGTAqb
```

Designate your secret destination address.

```bash
./komodo-cli jumblr_secret RS46GZ5iTkt2exdauQG3JJ8fdnZNJUvAc1
```

## jumblr\_deposit

**jumblr\_deposit "depositaddress"**

The `jubmlr_deposit` method indicates the address from which Jumblr should withdraw funds. There should be at least 10.024 KMD in this address. Jumblr will withdraw funds in increments of 10, 100, or 7770 KMD.

<Note>
  While shielded z\_address technology is available on all KMD-based Smart
  Chains, the Jumblr engine and methods are only available on the KMD mainnet.
</Note>

### Arguments

| Name             | Type               | Description                                       |
| ---------------- | ------------------ | ------------------------------------------------- |
| "depositaddress" | (string, required) | the address from which Jumblr will withdraw funds |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli jumblr_deposit RT4mSUjG35QeuGcedsfpHtP5MhDeEGTAqb
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## jumblr\_pause

**jumblr\_pause**

The `jumblr_pause` method instructs Jumblr to temporarily pause the privacy-shielding process.

<Note>
  See also <b>jumblr\_resume</b>.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli jumblr_pause
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## jumblr\_resume

**jumblr\_resume**

The `jumblr_resume` method instructs Jumblr to resume the privacy-shielding process.

<Note>
  See also <b>jumblr\_pause</b>.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli jumblr_resume
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## jumblr\_secret

**jumblr\_secret "secretaddress"**

The `jumblr_secret` method indicates to Jumblr the final t destination address. This should be a separate t address that has no connection to the `wallet.dat` file of your `jumblr_deposit` address. Ideally, you should only access the final `jumblr_secret` address via a separate node, and with other layers of privacy (VPN, Tor, etc.).

### Arguments

| Name            | Type               | Description                         |
| --------------- | ------------------ | ----------------------------------- |
| "secretaddress" | (string, required) | the destination transparent address |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli jumbr_secret "RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>
export const title = "Smart Chain Mining Methods";
export const description = "This document contains Mining methods for a Smart Chain.";

# Mining

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## getblocksubsidy

**getblocksubsidy height\_number**

The `getblocksubsidy` method returns the block-subsidy reward. The resulting calculation takes into account the mining slow start. This method can be used in conjunction with custom mining rewards designed by the developers of a KMD-based Smart Chain.

### Arguments

| Name   | Type                | Description                                                                                                   |
| ------ | ------------------- | ------------------------------------------------------------------------------------------------------------- |
| height | (numeric, optional) | the block height; if the block height is not provided, the method defaults to the current height of the chain |

### Response

| Name    | Type      | Description              |
| ------- | --------- | ------------------------ |
| "miner" | (numeric) | the mining reward amount |

#### 📌 Examples

Command:

```bash
./komodo-cli getblocksubsidy 100
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "miner": 3.0
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblocksubsidy", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "miner": 3.0
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getblocktemplate

**getblocktemplate ( "jsonrequestobject" )**

<Note>
  See <a href="https://en.bitcoin.it/wiki/BIP_0022">the Bitcoin wiki</a> for the
  full specification.
</Note>

The `getblocktemplate` method returns data that is necessary to construct a block.

If the request parameters include a `mode` key, it is used to explicitly select between the default 'template' request, a 'proposal' or 'disablecb'.

#### A Note on Unique Mining Circumstances

There are many features in the Komodo Ecosystem that can make a Smart Chain's daemon produce non-standard coinbase transactions. Examples include a Smart Chain parameter that creates new coins for a specific pubkey in every block or a CC module that adds outputs to the coinbase transaction.

This can be dealt using a mode called `disablecb`

Usage:

```bash
./komodo-cli getblocktemplate '{"mode":"disablecb"}'
```

The block template produced using this mode doesn't have the `"coinbasetxn": { ... }` json object but adds the coinbase transaction to the `"transactions":[ ... ]` array, just like a regular transaction.

Now the pool software can use the `"transactions":[ ... ]` array to create a block and take fees in the payment processor.
Team member, `Blackjok3r`, developed a coinbase-override method for this purpose. Please see [this repo](https://github.com/webworker01/knomp/#disable-coinbase-mode) for details.

### Arguments

| Name                           | Type               | Description                                                                                                    |
| ------------------------------ | ------------------ | -------------------------------------------------------------------------------------------------------------- |
| "jsonrequestobject" : \{ ... } | (string, optional) | a json object in the following spec                                                                            |
| "mode"                         | (string, optional) | this must be set to "template" or omitted                                                                      |
| "capabilities": \[ ... ]       | (array, optional)  | a list of strings                                                                                              |
| "support"                      | (string)           | client side supported features: "longpoll", "coinbasetxn", "coinbasevalue", "proposal", "serverlist", "workid" |

### Response

| Name                    | Type               | Description                                                                                                                                                                                                                                                                                      |
| ----------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "version"               | (numeric)          | the block version                                                                                                                                                                                                                                                                                |
| "previousblockhash"     | (string)           | the hash of current highest block                                                                                                                                                                                                                                                                |
| "finalsaplingroothash"  | (string)           | the hash of the final sapling root                                                                                                                                                                                                                                                               |
| "transactions":\[ ... ] | (array)            | the contents of non-coinbase transactions that should be included in the next block                                                                                                                                                                                                              |
| "data"                  | (string)           | transaction data encoded in hexadecimal (byte-for-byte)                                                                                                                                                                                                                                          |
| "hash"                  | (string)           | the hash/id encoded in little-endian hexadecimal                                                                                                                                                                                                                                                 |
| "depends" : \[ ... ]    | (array)            | an array of numbers                                                                                                                                                                                                                                                                              |
| number                  | (numeric)          | the indexes of transactions that must be present in the final block if this transaction is present in the final block; the index of the array of transactions starts with "1"                                                                                                                    |
| "fee"                   | (numeric)          | the difference in value between transaction inputs and outputs in satoshis; for coinbase transactions, this is the negative number of the total collected block fees, not including the block subsidy; if a key is not present, the fee is unknown and clients MUST NOT assume it is not present |
| "sigops"                | (numeric)          | the total number of sigops, as counted for the purposes of block limits; if a key is not present, the sigop count is unknown and clients MUST NOT assume they are not present.                                                                                                                   |
| "required"              | (boolean)          | if provided and true, this transaction must be in the final block                                                                                                                                                                                                                                |
| "coinbasetxn": \{ ... } | (json object)      | information for the coinbase transaction                                                                                                                                                                                                                                                         |
| "longpollid"            | (string)           | the last seen longpollid when this response was sent by the server                                                                                                                                                                                                                               |
| "data"                  | (string)           | transaction data encoded in hexadecimal (byte-for-byte)                                                                                                                                                                                                                                          |
| "hash"                  | (string)           | the hash/id encoded in little-endian hexadecimal                                                                                                                                                                                                                                                 |
| "depends" : \[ ... ]    | (array)            | an array of numbers                                                                                                                                                                                                                                                                              |
| "fee"                   | (numeric)          | the difference in value between transaction inputs and outputs in satoshis; for coinbase transactions, this is the negative number of the total collected block fees, not including the block subsidy; if a key is not present, the fee is unknown and clients MUST NOT assume it is not present |
| "sigops"                | (numeric)          | the total number of sigops, as counted for the purposes of block limits; if a key is not present, the sigop count is unknown and clients MUST NOT assume they are not present.                                                                                                                   |
| "foundersreward"        | (numeric)          | the founder's reward that should be paid out in this block; this key is present only in the blocks that payout the founder's reward; present only in chains with [ac\_founders](/antara/setup/antara-customizations/#ac-founders) enabled                                                        |
| "coinbasevalue"         | (numeric)          | the value of the coinbase transaction (in satoshis)                                                                                                                                                                                                                                              |
| "required"              | (boolean)          | if provided and true, this transaction must be in the final block                                                                                                                                                                                                                                |
| "target"                | (string)           | the hash target                                                                                                                                                                                                                                                                                  |
| "mintime"               | (numeric)          | the minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                                                                    |
| "mutable": \[ ... ]     | (array of strings) | a list of ways the block template may be changed                                                                                                                                                                                                                                                 |
| "value"                 | (string)           | a way the block template may be changed, e.g. "time", "transactions", "prevblock"                                                                                                                                                                                                                |
| "noncerange"            | (string)           | a range of valid nonces                                                                                                                                                                                                                                                                          |
| "sigoplimit"            | (numeric)          | the limit of sigops in blocks                                                                                                                                                                                                                                                                    |
| "sizelimit"             | (numeric)          | the limit of block size                                                                                                                                                                                                                                                                          |
| "curtime"               | (numeric)          | current timestamp in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                                                                                                        |
| "bits"                  | (string)           | the compressed target of the next block                                                                                                                                                                                                                                                          |
| "height"                | (numeric)          | the height of the next block                                                                                                                                                                                                                                                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli getblocktemplate '{"mode":"template","capabilities":["workid"]}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "capabilities": ["proposal"],
    "version": 4,
    "previousblockhash": "01499bd2021bb8f74e65712fdeb2a689b12b183eb9e64584d9ea9ebd6e38754e",
    "finalsaplingroothash": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
    "transactions": [],
    "coinbasetxn": {
      "data": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025600ffffffff0200e1f505000000002321039d6cc8a91d6551258a68e9d4bf8e8cfe3defd4be1f9e1c3f341f7a8592772fc8ac80c3c9010000000023210225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270aacb0918c5c",
      "hash": "ac7f63d0df14a996d77a2883e6341615245811b5a8e36a48b7ca8011eb6a149f",
      "depends": [],
      "fee": 0,
      "sigops": 2,
      "foundersreward": 30000000,
      "coinbasevalue": 100000000,
      "required": true
    },
    "longpollid": "01499bd2021bb8f74e65712fdeb2a689b12b183eb9e64584d9ea9ebd6e38754e7",
    "target": "0f0f0f0000000000000000000000000000000000000000000000000000000000",
    "mintime": 1552716187,
    "mutable": ["time", "transactions", "prevblock"],
    "noncerange": "00000000ffffffff",
    "sigoplimit": 60000,
    "sizelimit": 2000000,
    "curtime": 1552716208,
    "bits": "200f0f0f",
    "height": 6
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblocktemplate", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "capabilities": ["proposal"],
      "version": 4,
      "previousblockhash": "0c77fb62dcabffd39c0b4ad79da9a51ecc4265158b01ae09d7fd70f93ab7d499",
      "transactions": [
        {
          "data": "010000000d0bf48c25bbb9e5c9cf2959c39ea62266784932a17a8fe1ad190197c398e341870200000048473044022071db2fad2d5bab5f6cf8e2d415fe9cfbc146fc561ce55c379044d5eab7206e1b0220296970cf0265e28a49ac525faef6114386d2ed5c8ea2ced9ccfcd37ca4563bf401ffffffff50aca334345c7b4e7285d883d58efeb74c43e58d4fa61bac21f922a014f292aa1700000048473044022038f17fe42006a3f30ff658f0c8b1495567ffd0dbbe4ba36229df4bcabce201740220516ed6fca4a453f3305b47315d5efd2b230b3a575cb506cb04c89a730a62eade01ffffffff73e2bd82aa10c0bf751d7eabff50209e46827294c2b77932a096f89f7a4aa631210000004847304402200d7f4c2b8a537c98e19f0044d97c0d5ee6afb598d9b4523d586ec39b5be68ed0022071c5587f347bf56b0d1a340e6326c1ec612ee6a77abf5a24e93a446eeaee31af01ffffffffc335b0a285d04766b560bec88c191ed4494bb7e6e964eba1f5ccde3a89ad2e5a0100000049483045022100dce3c8e92b1487bb39681e58634f6414df14bf848b4a0de3ce11e2ddd4b5836202201e8ce810a67fb84350c62e3c5ed28bc1350d754f3a61a3c1a85e824c946fb30801ffffffff2ed2a51a1f8fe7feb456fa21c4ae172733d921c933e0ddc1368cfd9e09a746e5030000004847304402204f2c0eee23e34937b624e8ec4f0221ad3a43787fdbaa5b936ac39d2a3d30d7fe02200fd6e39b0eac4cbd80601f9625b40152e3bad6115f4d1e158b8709aa215778fb01ffffffff31b2c613750303538593437354af923637ee972932d1997fc93bf8d9199ebe905c000000494830450221008c760aef6b34d79e7076b6c249506c91070931f641039f44243e6abf798c731d02203c9a44d0adb04e64956720b4a97b49944825fa704679c21b18679a63c98e99ec01ffffffff0a81b4834feaa5f1044540928290e6d19667ede024923836d94bac13c7c9237914000000494830450221009d8ceb46e48dc0e86e13b0a549efbedc95ca199e1068f8e5e1f31cf4460dee3f022005079476092ac474c42ffae9fcf49fba82f68c94637ea97add61a5b1a147badb01ffffffffd81465cb221c3374a0a69bffc9f2bc225249328c50badd8683c351b2c30fdb171700000048473044022039da2916a77777c77b1a97840d1a888f2b12f0994ad134c8075a0b659884211a022006cbb6c807d1814b88f280e0036306e6d73cc79c0b6ff60966f47161feaccb3e01ffffffff59128ea85b2240d8b781a00b1ad0ebcdd8502d8d3f5722878f963b7f601e1d69020000004847304402203374d06656f35edf5d1b0d16455da2d6f22520a00c948a9c1d6bf51dba7a70ef0220529ec3146e080a637118b891a6b739f58e6f57d2aa3a24759a39eb6696af36ac01ffffffffc7d79714f379e9de8d752861f27d7e4685137dc6db5ad2cd50ec7b36429826d7050000004847304402207a426bb189ac657a9e8b699c67091de8df28306ce67b14653aea561800dfcb1502207e00216a6ff84e3f5b6d82c0683d8ea72a9fd6f636f9b3102b657e09a5f7481501ffffffffd872945ebfef211230ad8147f994892ab45c6cb4710ac29950e40354e1861d78e300000049483045022100af153b219376ffcbef42bd900e678d2504a6acd7c2bf945dcae895a9f07da79702201615016f196ad9452755d9c303fa151c242ed963b5373d148db733482487e8af01ffffffff671edc29af69a848081dd3790afb3fb113377d995e34ea9f219331d5c18c6885ad000000484730440220572ad6110ca5bafd749cfb77740f1aaac35e18c4a814cfb771c5286dd8b1249802207f4a27b90ff91663ee8ec6fc14dae64d16274fd2e35069ac6891de0385740a9801ffffffffba4dc1b3ef20747310640e4e0337c8db570ec63fa62eeffc492098502eaa9a2e5700000049483045022100f3ac3b80a66b6f1e6f96faf15a6535b104fbba987b357732e5b45830841a0a0a02202fee1f97494b2232a32517272d49992612729f4d9f762ede8d9b06ddf294293001ffffffff02f0810100000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac0000000000000000506a4c4da83be8f6e61cb9837708c1a847bdd80b8b8c1e1b9067b338433ca6c663869d004c6e01004345414c00e76cb540d63746c82676637b51e4f9f894c444822844224dd840975c7652dd760e00000000000000",
          "hash": "14473b8754bf69cc365784633e1a80787d4f9f950c95c48af0c6a28983c31098",
          "depends": [],
          "fee": 31200,
          "sigops": 1
        }
      ],
      "coinbasetxn": {
        "data": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0503e6590f00ffffffff01a010e311000000002321029400ae04d9c0e3e49b114fc5e0a7e250ece5f5b5b8f1614075ddfd62c67319aeac57a4985b",
        "hash": "334b02c0c2fa087862f845fefbd8f6ac4b72e4aed6d024f22b7fa0aa84759006",
        "depends": [],
        "fee": -93600,
        "sigops": 1,
        "coinbasevalue": 300000000,
        "required": true
      },
      "longpollid": "0c77fb62dcabffd39c0b4ad79da9a51ecc4265158b01ae09d7fd70f93ab7d499147",
      "target": "0000000670be0000000000000000000000000000000000000000000000000000",
      "mintime": 1536729888,
      "mutable": ["time", "transactions", "prevblock"],
      "noncerange": "00000000ffffffff",
      "sigoplimit": 20000,
      "sizelimit": 2000000,
      "curtime": 1536730200,
      "bits": "1d0670be",
      "height": 1006054
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getlocalsolps

**getlocalsolps**

The `getlocalsolps` method returns the average local solutions per second since this node was started.

<Note>
  This is the same information shown on the metrics screen (if enabled).
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type      | Description                      |
| ------ | --------- | -------------------------------- |
| "data" | (numeric) | the solutions-per-second average |

#### 📌 Examples

Command:

```bash
./komodo-cli getlocalsolps
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0.4141607577247555
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getlocalsolps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 0.4141607577247555,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getmininginfo

**getmininginfo**

The `getmininginfo` method returns a json object containing mining-related information.

### Arguments

| Name   | Type   | Description |
| ------ | ------ | ----------- |
| (none) | (none) |             |

### Response

| Name               | Type      | Description                                                                                                                                                                            |
| ------------------ | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "blocks"           | (numeric) | the current block                                                                                                                                                                      |
| "currentblocksize" | (numeric) | the last block size                                                                                                                                                                    |
| "currentblocktx"   | (numeric) | the last block transaction                                                                                                                                                             |
| "difficulty"       | (numeric) | the current difficulty                                                                                                                                                                 |
| "errors":          |           |                                                                                                                                                                                        |
| "generate"         | (boolean) | if the generation is on or off (see [getgenerate](/smart-chains/api/generate/#getgenerate) or [setgenerate](/smart-chains/api/generate/#setgenerate) calls)                            |
| "genproclimit"     | (numeric) | the processor limit for generation; `-1` if no generation (see [getgenerate](/smart-chains/api/generate/#getgenerate) or [setgenerate](/smart-chains/api/generate/#setgenerate) calls) |
| "localsolps"       | (numeric) | the average local solution rate (solutions per second) since this node was started                                                                                                     |
| "networksolps"     | (numeric) | the estimated network solution rate (solutions per second)                                                                                                                             |
| "pooledtx":        |           |                                                                                                                                                                                        |
| "testnet"          | (boolean) | if using testnet or not                                                                                                                                                                |
| "chain"            | (string)  | the current network name as defined in BIP70 (main, test, regtest)                                                                                                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli getmininginfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "blocks": 1007341,
    "currentblocksize": 0,
    "currentblocktx": 0,
    "difficulty": 42918151.0730477,
    "errors": "",
    "genproclimit": -1,
    "localsolps": 0,
    "networksolps": 11414148,
    "networkhashps": 11414148,
    "pooledtx": 5,
    "testnet": false,
    "chain": "main",
    "generate": false,
    "numthreads": -1
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getmininginfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "blocks": 1007341,
      "currentblocksize": 0,
      "currentblocktx": 0,
      "difficulty": 42918151.0730477,
      "errors": "",
      "genproclimit": -1,
      "localsolps": 0,
      "networksolps": 11414148,
      "networkhashps": 11414148,
      "pooledtx": 11,
      "testnet": false,
      "chain": "main",
      "generate": false,
      "numthreads": -1
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getnetworkhashps

**getnetworkhashps ( blocks height )**

<Note type="warning">
  DEPRECATED: Use <b>getnetworksolps</b> instead.
</Note>

The `getnetworkhashps` method returns the estimated network solutions per second based on the last `n` blocks.

Pass in `blocks` value to override the default number of blocks. Passing in `-1` will return a value based on the average `hashps` of the relevant difficulty window.

Pass in `height` to estimate the network speed at the time when a certain block was found.

### Arguments

| Name   | Type                             | Description                                                                                |
| ------ | -------------------------------- | ------------------------------------------------------------------------------------------ |
| blocks | (numeric, optional, default=120) | the number of blocks (use `-1` to calculate over the relevant difficulty averaging window) |
| height | (numeric, optional, default=-1)  | the block height that corresponds to the requested data                                    |

### Response

| Name | Type      | Description                       |
| ---- | --------- | --------------------------------- |
| data | (numeric) | the solutions-per-second estimate |

#### 📌 Examples

Command:

```bash
./komodo-cli getnetworkhashps
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10724120
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworkhashps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 10724120,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getnetworksolps

**getnetworksolps ( blocks height )**

The `getnetworksolps` method returns the estimated network solutions per second based on the last `n` blocks.

Pass in `blocks` to override the default number of blocks. Use -1 to calculate according to the relevant difficulty averaging window.
Pass in `height` to estimate the network speed at the time when a certain block was found.

### Arguments

| Name   | Type                             | Description                                                                                       |
| ------ | -------------------------------- | ------------------------------------------------------------------------------------------------- |
| blocks | (numeric, optional, default=120) | the number of blocks; use `-1` to calculate according to the relevant difficulty averaging window |
| height | (numeric, optional, default=-1)  | the block height that corresponds to the requested data                                           |

### Response

| Name | Type      | Description                     |
| ---- | --------- | ------------------------------- |
| data | (numeric) | solutions per second, estimated |

#### 📌 Examples

Command:

```bash
./komodo-cli getnetworksolps
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  17547717
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworksolps", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 17547717,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## prioritisetransaction

**prioritisetransaction "transaction\_id" priority\_delta fee\_delta**

The `prioritisetransaction` method instructs the daemon to accept the indicated transaction into mined blocks at a higher (or lower) priority. The transaction selection algorithm considers the transaction as it would have a higher priority.

<Note>
  This method is inherited from the original Bitcoin protocol, of which KMD is a
  fork (via Zcash). For more examples regarding this method, please see [the
  linked
  documentation.](https://bitcoincore.org/en/doc/0.16.1/rpc/mining/prioritisetransaction/)
</Note>

### Arguments

| Name              | Type                | Description                                                                                                                                                                                                           |
| ----------------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "transaction\_id" | (string, required)  | the transaction id                                                                                                                                                                                                    |
| priority\_delta   | (numeric, required) | the priority to add or subtract (if negative). The transaction selection algorithm assigns the tx a higher or lower priority. The transaction priority calculation: `coinage * value_in_satoshis / txsize`            |
| fee\_delta        | (numeric, required) | the fee value in satoshis to add or subtract (if negative); the fee is not actually paid, only the algorithm for selecting transactions into a block considers the transaction as if it paid a higher (or lower) fee. |

### Response

| Name | Type      | Description  |
| ---- | --------- | ------------ |
| true | (boolean) | returns true |

#### 📌 Examples

Command:

```bash
./komodo-cli prioritisetransaction "7dc902b280da27cf2dabe41ed6f4d04c828714f289435db193a49341005607eb" 0.0 10000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "prioritisetransaction", "params": ["7dc902b280da27cf2dabe41ed6f4d04c828714f289435db193a49341005607eb", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": true,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## submitblock

**submitblock "hexdata" ( "jsonparametersobject" )**

The `submitblock` method instructs the daemon to propose a new block to the network.

<Note>
  The <b>jsonparametersobject</b> parameter is currently ignored. See [the
  linked
  documentation](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki)
  for full specification details.
</Note>

<Note>
  Note: for more information on <b>submitblock</b> parameters and results, see
  [the linked
  documentation](https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission)
</Note>

### Arguments

| Name                              | Type                         | Description                                                           |
| --------------------------------- | ---------------------------- | --------------------------------------------------------------------- |
| "hexdata"                         | (string, required)           | the hex-encoded block data to submit                                  |
| "jsonparametersobject" : \{ ... } | (string, optional)           | object of optional parameters                                         |
| "workid"                          | (string, sometimes optional) | if the server provides a workid, it MUST be included with submissions |

### Response

| Name                     | Type | Description                                                                          |
| ------------------------ | ---- | ------------------------------------------------------------------------------------ |
| "duplicate"              |      | the node already has a valid copy of the block                                       |
| "duplicate-invalid"      |      | the node already has the block, but it is invalid                                    |
| "duplicate-inconclusive" |      | the node already has the block but has not validated it                              |
| "inconclusive"           |      | the node has not validated the block, it may not be on the node's current best chain |
| "rejected"               |      | the block was rejected as invalid                                                    |

#### 📌 Examples

Command:

```bash
./komodo-cli submitblock "0400000029865a4962f43d6f95fdf9ccc89f82377a23d1fdc41eaf943c7881a5ca55c5018973d81f5ce7ab99f027b15c86ca88ec5e4b6f35ad4018bfc2058568bbe7f526000000000000000000000000000000000000000000000000000000000000000097954a5b9e830c1d1600ac305580abea34bda62eb503b02fc4b7872428cfa60bf5824a9b78fc0000fd400500c80d4a8c84cec781a5740d8d3fb18587a850b6380f073cd861c4ce7c4290460c533e0d4dd3b89fe0f0052ccdf9d450a1dfcd7263a39422000378da3eeb621078af689447a5ed0a7265a857463a36d72cdd35910d14de9816a25d631aeb0249ede829aca77f9cce1a2e4a84b75e4bd515845043d52f718638fb41e92d8b18bfe1f49e1c0d23223a285b2850e8469dfbb9782b20c8bebf2a61d7b7d8eea310c7c8d5bfa612bf94fd05562ec8876eacafa0c334a651ef70c941459161b60c20511087d63223878052d4fd1a92298789d7c57609fe3a247489674592e8e34a1728b28e2c2b3165f01d5fefa22e6384f7fe4e566de1741e264f057a0feb1b35d51694647ba52afd71c3bd375b924da95e2b413dbea256a2de9ccddcab88bd2e69cc3acc8a778b4d1db78b41df9fea6d69b071f570f628ad47537d081740a4f2c4fa6666dbb862a6d02ff07b5ae0a9fa24b003fa0355dbde0425d6c14452f0d357f2cfd97960c343ba73789a2d7ba580ea8834ef656a9e79c49fc0f61aa9452a644c8bc06afe31dce2a7ca5d6995adc8ce1f77165a075399e1d006e2bb57c09ffd6e21fcff440645faef599264a3b8c005cf60683371ba1af8847d1992c64e512f13d9d2d364969759233a27c65e1f2f1113cdb665e3e8f7baa2c398c4a2ee85a6ad1bdb095962fafaa01c3d85bc820653544b89b6e75a584d8d04bc77e5284a9ebbcd46c1a6732b841e46c876976805d932a90ac215bcc37801900d49cfb87fe5c809b30ebd8ece38669153c1f1a2438253a56a6507d556cc16b2990f0bd290fea59462d25eebdbfcb78eb403c8080e0c68e8e2ef8f67145121bce83b94dc8f9d0a742752323c5a4b42409ffcc37053c58596deff7981a20e3f412c07c839a341fdc177d5e28f7909696f90c90efff14048f440e7ea3181378f66d35b0697dc02c60154778f438cdd3dba5dc4c2763319498bbb3b8fae17508b073d07d83f5f1dc71bf2dc205f06245872620dfa341dbcdf9c574598c121120e91dd687dfd08451369ab29a11dc73f69d0722992a1c70cf1498ec9b9143fcb0abfd7b1e39189125e8567cb2cc3d71fcdb541a0776a5a665161f98385633153fc9702f079269a1dac0d2c708f5d94e346159858cfd50624ff5a0505358739b5f41adbe739bf75852eebb06eeccd79e030019a5227cd9a19e77b6821ba0794fe09cb074f40ce0b92c081c31cda2d4711d53889fc6f0579839fa74309768ef0a796fa1fa660e150d3ea5c0a369e1297d11177fc284524d6d5e40eb7ee4b400f6dfd6a10402904394e1694de300ddd565622e7ca7ed62970ff5add0b36a513b5d90d2194cf414ecc97e5dcc88698e06405dea09f49503c81cc61518f8aee882da6eeae09b4127a7fcc0c0829fca8fda3502ebf13ece0a90a8dfd05d8e514452247f79472c20683e2b1fde5ec14a2453bf00f9f1cd5a088d229a7fdfdfdc24f176fb9a8a409af70d894998957394d30a46668d71cd16907aa800ee9d96c2b9fc7fb5a7944a9b8d4f76609fc186e3c0a4d80fb9c8c236f76eb00bc24dd9abddef7d653740ece7141ac6175f7e9cab1cb0216e85adde43907b60c0581336b50ccd7682f28f00f7efd663df4d31701141657da989d236d16052c4b59fc46fb41657a26d7074fbc9dee602f7d03b86179e4c12bc0df253f815319dff12353a478d95febd5f902e363734e6e5ef4bf1865eb70750b9238be3382a51ded182569d112f37870d43465615ca9174d41f7f3b9eb780a28c7dba674075bbe04538ad669eef7716d1b7b252d49da3b00993f0c829860a1efafdcdc865d46f2f8aec9893b5bc607db33272e5b9f7cf134595e1ad5e8f34b1b7f93ca181c513afc4d8a531c36929e95cfbb4d268a9d94f80201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0603860f0e0101ffffffff0188b6e1110000000023210383d0b37f59f4ee5e3e98a47e461c861d49d0d90c80e9e16f7e63686a2dc071f3ac67954a5b01000000010b1561554a46ec535c4972a3a16652b270ee4af847ec3bbfcf6ba663ebcfefcb1a00000049483045022100b9cd7c1c56d69d9b05d695f9ac86c1233427ec26860774a0eb4e6052fe11ca8502207eca5a4eda1ccf92ccdb501ab7d61cf084d0f4431f059e27ee13ce11f9aa159b01ffffffff0188130000000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  duplicate
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "submitblock", "params": ["0400000029865a4962f43d6f95fdf9ccc89f82377a23d1fdc41eaf943c7881a5ca55c5018973d81f5ce7ab99f027b15c86ca88ec5e4b6f35ad4018bfc2058568bbe7f526000000000000000000000000000000000000000000000000000000000000000097954a5b9e830c1d1600ac305580abea34bda62eb503b02fc4b7872428cfa60bf5824a9b78fc0000fd400500c80d4a8c84cec781a5740d8d3fb18587a850b6380f073cd861c4ce7c4290460c533e0d4dd3b89fe0f0052ccdf9d450a1dfcd7263a39422000378da3eeb621078af689447a5ed0a7265a857463a36d72cdd35910d14de9816a25d631aeb0249ede829aca77f9cce1a2e4a84b75e4bd515845043d52f718638fb41e92d8b18bfe1f49e1c0d23223a285b2850e8469dfbb9782b20c8bebf2a61d7b7d8eea310c7c8d5bfa612bf94fd05562ec8876eacafa0c334a651ef70c941459161b60c20511087d63223878052d4fd1a92298789d7c57609fe3a247489674592e8e34a1728b28e2c2b3165f01d5fefa22e6384f7fe4e566de1741e264f057a0feb1b35d51694647ba52afd71c3bd375b924da95e2b413dbea256a2de9ccddcab88bd2e69cc3acc8a778b4d1db78b41df9fea6d69b071f570f628ad47537d081740a4f2c4fa6666dbb862a6d02ff07b5ae0a9fa24b003fa0355dbde0425d6c14452f0d357f2cfd97960c343ba73789a2d7ba580ea8834ef656a9e79c49fc0f61aa9452a644c8bc06afe31dce2a7ca5d6995adc8ce1f77165a075399e1d006e2bb57c09ffd6e21fcff440645faef599264a3b8c005cf60683371ba1af8847d1992c64e512f13d9d2d364969759233a27c65e1f2f1113cdb665e3e8f7baa2c398c4a2ee85a6ad1bdb095962fafaa01c3d85bc820653544b89b6e75a584d8d04bc77e5284a9ebbcd46c1a6732b841e46c876976805d932a90ac215bcc37801900d49cfb87fe5c809b30ebd8ece38669153c1f1a2438253a56a6507d556cc16b2990f0bd290fea59462d25eebdbfcb78eb403c8080e0c68e8e2ef8f67145121bce83b94dc8f9d0a742752323c5a4b42409ffcc37053c58596deff7981a20e3f412c07c839a341fdc177d5e28f7909696f90c90efff14048f440e7ea3181378f66d35b0697dc02c60154778f438cdd3dba5dc4c2763319498bbb3b8fae17508b073d07d83f5f1dc71bf2dc205f06245872620dfa341dbcdf9c574598c121120e91dd687dfd08451369ab29a11dc73f69d0722992a1c70cf1498ec9b9143fcb0abfd7b1e39189125e8567cb2cc3d71fcdb541a0776a5a665161f98385633153fc9702f079269a1dac0d2c708f5d94e346159858cfd50624ff5a0505358739b5f41adbe739bf75852eebb06eeccd79e030019a5227cd9a19e77b6821ba0794fe09cb074f40ce0b92c081c31cda2d4711d53889fc6f0579839fa74309768ef0a796fa1fa660e150d3ea5c0a369e1297d11177fc284524d6d5e40eb7ee4b400f6dfd6a10402904394e1694de300ddd565622e7ca7ed62970ff5add0b36a513b5d90d2194cf414ecc97e5dcc88698e06405dea09f49503c81cc61518f8aee882da6eeae09b4127a7fcc0c0829fca8fda3502ebf13ece0a90a8dfd05d8e514452247f79472c20683e2b1fde5ec14a2453bf00f9f1cd5a088d229a7fdfdfdc24f176fb9a8a409af70d894998957394d30a46668d71cd16907aa800ee9d96c2b9fc7fb5a7944a9b8d4f76609fc186e3c0a4d80fb9c8c236f76eb00bc24dd9abddef7d653740ece7141ac6175f7e9cab1cb0216e85adde43907b60c0581336b50ccd7682f28f00f7efd663df4d31701141657da989d236d16052c4b59fc46fb41657a26d7074fbc9dee602f7d03b86179e4c12bc0df253f815319dff12353a478d95febd5f902e363734e6e5ef4bf1865eb70750b9238be3382a51ded182569d112f37870d43465615ca9174d41f7f3b9eb780a28c7dba674075bbe04538ad669eef7716d1b7b252d49da3b00993f0c829860a1efafdcdc865d46f2f8aec9893b5bc607db33272e5b9f7cf134595e1ad5e8f34b1b7f93ca181c513afc4d8a531c36929e95cfbb4d268a9d94f80201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0603860f0e0101ffffffff0188b6e1110000000023210383d0b37f59f4ee5e3e98a47e461c861d49d0d90c80e9e16f7e63686a2dc071f3ac67954a5b01000000010b1561554a46ec535c4972a3a16652b270ee4af847ec3bbfcf6ba663ebcfefcb1a00000049483045022100b9cd7c1c56d69d9b05d695f9ac86c1233427ec26860774a0eb4e6052fe11ca8502207eca5a4eda1ccf92ccdb501ab7d61cf084d0f4431f059e27ee13ce11f9aa159b01ffffffff0188130000000000002321020e46e79a2a8d12b9b5d12c7a91adb4e454edfae43c0a0cb805427d2ac7613fd9ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "duplicate",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Network Methods";
export const description = "This document contains Network methods for a Smart Chain.";

# Network

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## addnode

**addnode "node" "add|remove|onetry"**

The `addnode` method attempts to add or remove a node from the addnode list, or to make a single attempt to connect to a node.

### Arguments

| Name      | Type               | Description                                                                                                             |
| --------- | ------------------ | ----------------------------------------------------------------------------------------------------------------------- |
| "node"    | (string, required) | the node (see [getpeerinfo](/smart-chains/api/network/#getpeerinfo) for nodes)                                          |
| "command" | (string, required) | 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli addnode "192.168.0.6:8233" "onetry"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "addnode", "params": ["192.168.0.6:8233", "onetry"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## clearbanned

**clearbanned**

The `clearbanned` method clears all banned IPs.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli clearbanned
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "clearbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## disconnectnode

**disconnectnode "node"**

The `disconnectnode` method instructs the daemon to immediately disconnect from the specified node.

Use `getpeerinfo` to determine the result.

### Arguments

| Name   | Type               | Description                                                                              |
| ------ | ------------------ | ---------------------------------------------------------------------------------------- |
| "node" | (string, required) | the node's address (see [getpeerinfo](/smart-chains/api/network/#getpeerinfo) for nodes) |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli disconnectnode "192.168.0.6:8233"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "disconnectnode", "params": ["192.168.0.6:8233"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## getaddednodeinfo

**getaddednodeinfo dns ( "node" )**

The `getaddednodeinfo` method returns information about the given added node, or all added nodes.

If `dns` is set to `false`, only a list of added nodes is returned. Otherwise, connection information is also provided.

<Note>
  Nodes added via <b>onetry</b> are not listed here.
</Note>

### Arguments

| Name   | Type                | Description                                                                                               |
| ------ | ------------------- | --------------------------------------------------------------------------------------------------------- |
| dns    | (boolean, required) | if false, only a list of added nodes will be provided; otherwise, connection information is also provided |
| "node" | (string, optional)  | if provided, the method returns information about this specific node; otherwise, all nodes are returned   |

### Response

| Name                   | Type             | Description                                                      |
| ---------------------- | ---------------- | ---------------------------------------------------------------- |
| "addednode"            | (string)         | the node ip address                                              |
| "connected"            | (boolean)        | if connected                                                     |
| "addresses" : \[ ... ] | (array of jsons) |                                                                  |
| "address"              | (string)         | the server host and port                                         |
| "connected"            | (string)         | "connected" accepts two possible values: "inbound" or "outbound" |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddednodeinfo true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "addednode": "78.47.196.146",
      "connected": true,
      "addresses": [
        {
          "address": "78.47.196.146:7770",
          "connected": "outbound"
        }
      ]
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getaddednodeinfo true "78.47.205.239"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "addednode": "78.47.205.239",
      "connected": true,
      "addresses": [
        {
          "address": "78.47.205.239:7770",
          "connected": "outbound"
        }
      ]
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddednodeinfo", "params": [true, "78.47.205.239"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "addednode": "78.47.205.239",
        "connected": true,
        "addresses": [
          {
            "address": "78.47.205.239:7770",
            "connected": "outbound"
          }
        ]
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getconnectioncount

**getconnectioncount**

The `getconnectioncount` method returns the number of connections to other nodes.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name | Type      | Description          |
| ---- | --------- | -------------------- |
| n    | (numeric) | the connection count |

#### 📌 Examples

Command:

```bash
./komodo-cli getconnectioncount
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getconnectioncount", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 10,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getdeprecationinfo

**getdeprecationinfo**

The `getdeprecationinfo` method returns an object containing current version and deprecation block height.

<Note>This method is applicable only to the KMD main net.</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                | Type      | Description                                                                                                                                               |
| ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "version"           | (numeric) | the server version                                                                                                                                        |
| "subversion"        | (string)  | the server sub-version string (i.e. "/MagicBean:x.y.z\[-v]/")                                                                                             |
| "deprecationheight" | (numeric) | the block height at which this version will deprecate and shut down (unless [disabledeprecation](https://electriccoin.co/blog/new-release-1-1-2/) is set) |

#### 📌 Examples

Command:

```bash
./komodo-cli getdeprecationinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "version": 1001550,
    "subversion": "/MagicBean:1.0.15/",
    "deprecationheight": 1400000
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getdeprecationinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "version": 1001550,
      "subversion": "/MagicBean:1.0.15/",
      "deprecationheight": 1400000
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getnettotals

**getnettotals**

The `getnettotals` method returns information about network traffic, including bytes in, bytes out, and current time.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name             | Type      | Description          |
| ---------------- | --------- | -------------------- |
| "totalbytesrecv" | (numeric) | total bytes received |
| "totalbytessent" | (numeric) | total bytes sent     |
| "timemillis"     | (numeric) | total cpu time       |

#### 📌 Examples

Command:

```bash
./komodo-cli getnettotals
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "totalbytesrecv": 29853501,
    "totalbytessent": 15589555,
    "timemillis": 1536821874559
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnettotals", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "totalbytesrecv": 29872297,
      "totalbytessent": 15650741,
      "timemillis": 1536821938902
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getnetworkinfo

**getnetworkinfo**

The `getnetworkinfo` method returns an object containing various state info regarding p2p networking.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                       | Type             | Description                                                                          |
| -------------------------- | ---------------- | ------------------------------------------------------------------------------------ |
| "version"                  | (numeric)        | the server version                                                                   |
| "subversion"               | (string)         | the server subversion string (i.e. "/MagicBean:x.y.z\[-v]/")                         |
| "protocolversion"          | (numeric)        | the protocol version                                                                 |
| "localservices"            | (string)         | the services we offer to the network                                                 |
| "timeoffset"               | (numeric)        | the time offset                                                                      |
| "connections"              | (numeric)        | the number of connections                                                            |
| "networks": \[ ... ]       | (array of jsons) | information per network                                                              |
| "name"                     | (string)         | network (ipv4, ipv6 or onion)                                                        |
| "limited"                  | (boolean)        | whether the network is limited using -onlynet                                        |
| "reachable"                | (boolean)        | whether the network is reachable                                                     |
| "proxy"                    | (string)         | (submitted as "host:port") the proxy that is used for this network, or empty if none |
| "relayfee"                 | (numeric)        | minimum relay fee for non-free transactions in COIN/kB                               |
| "localaddresses": \[ ... ] | (array of jsons) | list of local addresses                                                              |
| "address"                  | (string)         | network address                                                                      |
| "port"                     | (numeric)        | network port                                                                         |
| "score"                    | (numeric)        | relative score                                                                       |
| "warnings"                 | (string)         | any network warnings (such as alert messages)                                        |

#### 📌 Examples

Command:

```bash
./komodo-cli getnetworkinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "version": 1001550,
    "subversion": "/MagicBean:1.0.15/",
    "protocolversion": 170003,
    "localservices": "0000000000000001",
    "timeoffset": -1,
    "connections": 10,
    "networks": [
      {
        "name": "ipv4",
        "limited": false,
        "reachable": true,
        "proxy": "",
        "proxy_randomize_credentials": false
      },
      {
        "name": "ipv6",
        "limited": false,
        "reachable": true,
        "proxy": "",
        "proxy_randomize_credentials": false
      },
      {
        "name": "onion",
        "limited": true,
        "reachable": false,
        "proxy": "",
        "proxy_randomize_credentials": false
      }
    ],
    "relayfee": 0.000001,
    "localaddresses": [],
    "warnings": ""
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnetworkinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "version": 1001550,
      "subversion": "/MagicBean:1.0.15/",
      "protocolversion": 170003,
      "localservices": "0000000000000001",
      "timeoffset": -1,
      "connections": 10,
      "networks": [
        {
          "name": "ipv4",
          "limited": false,
          "reachable": true,
          "proxy": "",
          "proxy_randomize_credentials": false
        },
        {
          "name": "ipv6",
          "limited": false,
          "reachable": true,
          "proxy": "",
          "proxy_randomize_credentials": false
        },
        {
          "name": "onion",
          "limited": true,
          "reachable": false,
          "proxy": "",
          "proxy_randomize_credentials": false
        }
      ],
      "relayfee": 1e-6,
      "localaddresses": [],
      "warnings": ""
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getpeerinfo

**getpeerinfo**

The `getpeerinfo` method returns data about each connected network node as a json array of objects.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                 | Type      | Description                                                          |
| -------------------- | --------- | -------------------------------------------------------------------- |
| "id"                 | (numeric) | peer index                                                           |
| "addr":,             | (string)  | the ip address and port of the peer ("host:port")                    |
| "addrlocal"          | (string)  | local address ("ip:port")                                            |
| "services"           | (string)  | the services offered                                                 |
| "lastsend"           | (numeric) | the time in seconds since epoch (Jan 1 1970 GMT) of the last send    |
| "lastrecv"           | (numeric) | the time in seconds since epoch (Jan 1 1970 GMT) of the last receive |
| "bytessent"          | (numeric) | the total bytes sent                                                 |
| "bytesrecv"          | (numeric) | the total bytes received                                             |
| "conntime"           | (numeric) | the connection time in seconds since epoch (Jan 1 1970 GMT)          |
| "timeoffset"         | (numeric) | the time offset in seconds                                           |
| "pingtime"           | (numeric) | ping time                                                            |
| "pingwait"           | (numeric) | ping wait                                                            |
| "version"            | (numeric) | the peer version, such as 170002                                     |
| "subver"             | (string)  | the string version (i.e. "/MagicBean:x.y.z\[-v]/")                   |
| "inbound"            | (boolean) | inbound (true) or outbound (false)                                   |
| "startingheight"     | (numeric) | the starting height (block) of the peer                              |
| "banscore"           | (numeric) | the ban score                                                        |
| "synced\_headers"    | (numeric) | the last header we have in common with this peer                     |
| "synced\_blocks"     | (numeric) | the last block we have in common with this peer                      |
| "inflight": \[ ... ] | (array)   |                                                                      |
| number               | (numeric) | the block height requested from this peer                            |

#### 📌 Examples

Command:

```bash
./komodo-cli getpeerinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "id": 1,
      "addr": "78.47.196.146:7770",
      "addrlocal": "69.178.104.172:49724",
      "services": "0000000000000001",
      "lastsend": 1536827621,
      "lastrecv": 1536827617,
      "bytessent": 5181633,
      "bytesrecv": 6245958,
      "conntime": 1536792412,
      "timeoffset": -2,
      "pingtime": 0.234065,
      "version": 170003,
      "subver": "/MagicBean:1.0.15/",
      "inbound": false,
      "startingheight": 1007074,
      "banscore": 45,
      "synced_headers": 1007671,
      "synced_blocks": 1007671,
      "inflight": [],
      "whitelisted": false
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getpeerinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "id": 1,
        "addr": "78.47.196.146:7770",
        "addrlocal": "69.178.104.172:49724",
        "services": "0000000000000001",
        "lastsend": 1536827702,
        "lastrecv": 1536827698,
        "bytessent": 5195639,
        "bytesrecv": 6247781,
        "conntime": 1536792412,
        "timeoffset": -2,
        "pingtime": 0.234605,
        "version": 170003,
        "subver": "/MagicBean:1.0.15/",
        "inbound": false,
        "startingheight": 1007074,
        "banscore": 45,
        "synced_headers": 1007672,
        "synced_blocks": 1007672,
        "inflight": [],
        "whitelisted": false
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listbanned

**listbanned**

The `listbanned` method lists all banned IP addresses and subnets.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name            | Type      | Description                                           |
| --------------- | --------- | ----------------------------------------------------- |
| "address"       | (string)  | the address/subnet that is banned                     |
| "banned\_until" | (numeric) | the timestamp, at which point the ban will be removed |

#### 📌 Examples

Command:

```bash
./komodo-cli listbanned
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "address": "78.47.205.239/255.255.255.255",
      "banned_until": 1536945306
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "address": "78.47.205.239/255.255.255.255",
        "banned_until": 1536945306
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## ping

**ping**

The `ping` method requests that a ping be sent to all other nodes, to measure ping time.

Results provided in `getpeerinfo`, `pingtime` and `pingwait` fields are decimal seconds.

The `ping` command is handled in queue with all other commands, so it measures processing backlog, not just network ping.

<Note>
  Use <b>getpeerinfo</b> to see <b>ping</b> results.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli ping
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "ping", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## setban

**setban "ip(/netmask)" "add|remove" (bantime) (absolute)**

The `setban` method attempts to add or remove an IP address (and subnet, if indicated) from the banned list.

### Arguments

| Name           | Type                  | Description                                                                                                                                                                                                             |
| -------------- | --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "ip(/netmask)" | (string, ip required) | the IP/subnet (see `getpeerinfo` for nodes ip) with an optional netmask (default is /32 = single ip)                                                                                                                    |
| "command"      | (string, required)    | use "add" to add an IP/subnet to the list, or "remove" to remove an IP/subnet from the list                                                                                                                             |
| bantime        | (numeric, optional)   | indicates how long (in seconds) the ip is banned (or until when, if \[absolute] is set). 0 or empty means the ban is using the default time of 24h, which can also be overwritten using the -bantime runtime parameter. |
| absolute       | (boolean, optional)   | if set to true, the bantime must be an absolute timestamp (in seconds) since epoch (Jan 1 1970 GMT)                                                                                                                     |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

<Note>
  Use <b>listbanned</b> to view results.
</Note>

#### 📌 Examples

Command:

```bash
./komodo-cli setban "192.168.0.6" "add" 86400
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli setban "192.168.0.0/24" "add"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setban", "params": ["78.47.205.239", "add", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>
export const title = "nSPV";
export const description =
  "nSPV enhances the normal Simple Payment Verification (SPV) technology available for a Smart Chain.";

# nSPV

nSPV enhances the normal "Simple Payment Verification" (SPV) technology available for a Smart Chain. To learn more about regular SPV technology, [read this entry on the Bitcoin wiki.](https://en.bitcoinwiki.org/wiki/Simplified_Payment_Verification)

nSPV leverages the dPoW security mechanism of the Komodo Platform to enable secure and scalable super-lite "SPV" clients. An nSPV client network utilizes a smaller amount of computation and storage resources compared to a normal SPV network. For all Smart Chains that enable nSPV, full nodes on the network can serve the necessary data to nSPV nodes for the latter to have full wallet functionality.

All Komodo-compatible Smart Chains, including the KMD main chain, can utilize this technology.

More details are available in the blog posts [here](https://medium.com/@jameslee777/nspv-a-simple-approach-to-superlight-clients-leveraging-notarizations-75d7ef5a37a9) and [here.](https://medium.com/@jameslee777/nspv-reference-cli-client-cf1ffdc03631)

This document is intended for using the nSPV features through the `komodod` and `komodo-cli`

There is an alternate implementation called [libnspv](https://github.com/jl777/libnspv) that is standalone and works as a full wallet for Komodo and any Smart Chain that has dPoW enabled.

To use the following methods, the daemon must be started with the command line parameter: `-nSPV=1`. The parameter instructs the daemon to act as a nSPV client.

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## nspv\_broadcast

**nspv\_broadcast hex**

Use this method to broadcast the hex value returned by the [nspv\_spend](#nspv_spend) method.

#### Arguments

| Name | Type     | Description                   |
| ---- | -------- | ----------------------------- |
| hex  | (string) | the transaction in hex format |

#### Response

| Name      | Type     | Description                                                                                                                              |
| --------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command was successful                                                                                                       |
| expected  | (string) | the expected transaction id                                                                                                              |
| broadcast | (string) | the broadcasted transaction id                                                                                                           |
| retcode   | (number) | the return code<br /><br />0: no error<br /><br />-1,-2,-3: failure<br /><br />-200x: mostly OK, some of the inputs may not be notarized |
| type      | (string) | the type of the broadcast                                                                                                                |
| lastpeer  | (string) | the last known peer                                                                                                                      |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "broadcast", "params": ["0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ace77e395d000000000000000000000000000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "expected": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "broadcast": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "retcode": 1,
    "type": "broadcast and mempool",
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_getinfo

**nspv\_getinfo \[hdrheight]**

Use this method to get the general information on the state of the blockchain at the moment.

### Arguments

| Name      | Type               | Description                                                            |
| --------- | ------------------ | ---------------------------------------------------------------------- |
| hdrheight | (number, optional) | supplies the height of the block for which the header data is required |

### Response

| Name                     | Type     | Description                                                                                                                                 |
| ------------------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------- |
| result                   | (string) | whether the command was successful                                                                                                          |
| nSPV                     | (string) | the mode of nSPV                                                                                                                            |
| address                  | (string) | the address corresponding to the wifkey                                                                                                     |
| pubkey                   | (string) | the pubkey corresponding to the wifkey                                                                                                      |
| wifexpires               | (string) | the time in seconds till the login expires                                                                                                  |
| height                   | (number) | the current height of the blockchain                                                                                                        |
| chaintip                 | (string) | the blockhash of the last block                                                                                                             |
| notarization             | (json)   | a json containing the notarization details                                                                                                  |
| notarized\_height        | (number) | the height of the latest block that has been notarized                                                                                      |
| notarized\_blockhash     | (string) | the blockhash of the latest block that has been notarized                                                                                   |
| notarization\_txid       | (string) | the id of the transaction in which the notarization data is included in the chain being dPoW'ed                                             |
| notarization\_txidheight | (number) | the height of the block in which the notarization transaction is included                                                                   |
| notarization\_desttxid   | (string) | the id of the transaction in which the notarization data is included in the chain acting as the data store                                  |
| header                   | (string) | a json containing the details of the header (of the current block by default / block of height specified by `hdrheight` if it is specified) |
| height                   | (number) | the height of the block that has been queried                                                                                               |
| blockhash                | (string) | the blockhash of the block that has been queried                                                                                            |
| hashPrevBlock            | (string) | the blockhash of the block before the block that has been queried                                                                           |
| hashMerkleRoot           | (string) | the merkleroot of the block that has been queried                                                                                           |
| nTime                    | (number) | a timestamp recording when this block was created                                                                                           |
| nBits                    | (number) | the calculated difficulty target being used for this block                                                                                  |
| protocolversion          | (string) | the version of the client; helps the nspv client disconnect from nodes that are out of date                                                 |
| lastpeer                 | (string) | the last known peer                                                                                                                         |

### :pushpin: Examples

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "nspv_getinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "nSPV": "superlite",
    "height": 1458356,
    "chaintip": "09b322ed45c2346316fb7f5bc9fbd7a4e27ea1b4803f68ad4c9649c13f19b479",
    "notarization": {
      "notarized_height": 1458340,
      "notarized_blockhash": "02ec52149e0ebc3d8c0e33612f6a6da76ceb01d3604cd3a63269c9c14f8b50ce",
      "notarization_txid": "3f6e11d0f210fd2fa2d39359fae3e70ce63cfc78e2cf555b1a84d88eb7eab7da",
      "notarization_txidheight": 1458354,
      "notarization_desttxid": "500a12dd8aab6b82db602f3f8f7f80573f6d4af6be4d9eb96dee0accf4ecf1b6"
    },
    "header": {
      "height": 1458356,
      "blockhash": "09b322ed45c2346316fb7f5bc9fbd7a4e27ea1b4803f68ad4c9649c13f19b479",
      "hashPrevBlock": "08d31454a0f5a05c1cb194d608c803b94ec0012d0257d08102da8e26439d48af",
      "hashMerkleRoot": "26123db79cfa63d79e92a375271349e4ba4e0a6d9eddf3fc2044572d29045a16",
      "nTime": 1564069327,
      "nBits": 486605795
    },
    "protocolversion": 0,
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_hdrsproof

**nspv\_hdrsproof prevheight nextheight**

This method scans backwards from the `prevheight` until the process encounters a notarization transaction, then forward from `nextheight` until the process encounters another notarization transaction.

Then the process finds the notarized blocks corresponding to these two notarization transactions.

Then the process returns all the block headers between these two notarized blocks.

Now that both ends of this segment of blocks are notarized blocks, all block headers in this segment can be validated to see if they link back to each other.

### Arguments

| Name       | Type     | Description                                      |
| ---------- | -------- | ------------------------------------------------ |
| prevheight | (number) | the block number from which headers are required |
| nextheight | (number) | the block number to which headers are required   |

### Response

| Name           | Type     | Description                                                                                                                                 |
| -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------- |
| result         | (string) | whether the command was successful                                                                                                          |
| prevht         | (string) | the height of the first notarized block below the height `prevheight`                                                                       |
| nextht         | (string) | the height of the first notarized block above the height `nextheight`                                                                       |
| prevtxid       | (string) | the id of the transaction that contains the notarization data of the block of height `prevht`                                               |
| prevtxidht     | (string) | the height of the block in which the transaction with id `prevtxid` is present                                                              |
| prevtxlen      | (string) | the length of the transaction with id `prevtxid`                                                                                            |
| nexttxid       | (string) | the id of the transaction that contains the notarization data of the block of height `nextht`                                               |
| nexttxidht     | (string) | the height of the block in which the transaction with id `nexttxid` is present                                                              |
| nexttxlen      | (string) | the length of the transaction with id `nexttxid`                                                                                            |
| numhdrs        | (string) | the number of headers being returned                                                                                                        |
| headers        | (string) | a json containing the details of the header (of the current block by default / block of height specified by `hdrheight` if it is specified) |
| height         | (number) | the height of the block that has been queried                                                                                               |
| blockhash      | (string) | the blockhash of the block that has been queried                                                                                            |
| hashPrevBlock  | (string) | the blockhash of the block before the block that has been queried                                                                           |
| hashMerkleRoot | (string) | the merkleroot of the block that has been queried                                                                                           |
| nTime          | (number) | a timestamp recording when this block was created                                                                                           |
| nBits          | (number) | the calculated difficulty target being used for this block                                                                                  |
| lastpeer       | (string) | the last known peer                                                                                                                         |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "hdrsproof", "params": [1456692, 1456694 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "prevht": 1456680,
    "nextht": 1456700,
    "prevtxid": "e82367899ee7a5cb65dabe058cd7369392564f83834c8f1f81a21958da5d241c",
    "prevtxidht": 1456693,
    "prevtxlen": 1637,
    "nexttxid": "f11f30e4e62ac3567fa553ace89b1fbde7ffaefaa4f94926f3561928a537b753",
    "nexttxidht": 1456713,
    "nexttxlen": 1630,
    "numhdrs": 21,
    "headers": [
      {
        "height": 1456680,
        "blockhash": "00000000a651e00fa2a71c47511be85ef87e83d5715be3a17ed943b141cdd4d9",
        "hashPrevBlock": "06a51aacc1cb0575cc0a0d33dd001409367fe55b5e97a6d1055d70f60a60ba15",
        "hashMerkleRoot": "4f999aa4c45c2ffc6e43f1c96d5bf8a85a70e056462ff81167ebc1a16698ebf4",
        "nTime": 1563968164,
        "nBits": 486609566
      },
      {
        "height": 1456681,
        "blockhash": "08075e165473d74b87d55ce7ffecd85fb29989876dd596de56ed5cb22eb02b93",
        "hashPrevBlock": "00000000a651e00fa2a71c47511be85ef87e83d5715be3a17ed943b141cdd4d9",
        "hashMerkleRoot": "731295c1dc6067df17b5ff8385213981eb4f65f09f8475e15bc53a55f77b6a5f",
        "nTime": 1563968224,
        "nBits": 486608614
      },
      {
        "height": 1456682,
        "blockhash": "08359b03c7493467c9dbc83ed40c1e606cf3f35a086dd044ac37247d3c298610",
        "hashPrevBlock": "08075e165473d74b87d55ce7ffecd85fb29989876dd596de56ed5cb22eb02b93",
        "hashMerkleRoot": "385ad9e93468c50169def8f30853b094ce8fc89a552deac1c7332956639e9281",
        "nTime": 1563968284,
        "nBits": 486609613
      },
      {
        "height": 1456683,
        "blockhash": "000000010981eef2db9a4a68c274e9e4fe3c8e9ac39e9c666926531ed808d37b",
        "hashPrevBlock": "08359b03c7493467c9dbc83ed40c1e606cf3f35a086dd044ac37247d3c298610",
        "hashMerkleRoot": "6484bec614bf2d4e5ad80e1360f4feb1445d3c24732e1c69bc755dea43be5887",
        "nTime": 1563968229,
        "nBits": 486609556
      },
      {
        "height": 1456684,
        "blockhash": "021ec75467e5b61c226b0f001ffa58e0b7bb6c20b3529fc5ea1f00584601fd64",
        "hashPrevBlock": "000000010981eef2db9a4a68c274e9e4fe3c8e9ac39e9c666926531ed808d37b",
        "hashMerkleRoot": "bd6fbe8e522cb8ae2c06a3af7dd24aa9c8f81e161b1ffd5af2f98434f31cb75f",
        "nTime": 1563968321,
        "nBits": 486609344
      },
      {
        "height": 1456685,
        "blockhash": "024fb917266ec5dc1442116696bb92fe1a19388e6c299362c8f21a895b484a4d",
        "hashPrevBlock": "021ec75467e5b61c226b0f001ffa58e0b7bb6c20b3529fc5ea1f00584601fd64",
        "hashMerkleRoot": "cfc5f2c113970aae7b268f6215dff2d88114f7ee625906f4af1000e55941672b",
        "nTime": 1563968400,
        "nBits": 486609586
      },
      {
        "height": 1456686,
        "blockhash": "07ff3fbe03ed0f8d4d672d278554131631405ee9c8550f93f5b92ae97255c841",
        "hashPrevBlock": "024fb917266ec5dc1442116696bb92fe1a19388e6c299362c8f21a895b484a4d",
        "hashMerkleRoot": "cd02fb3979c59c274e547ef040ac21e72516ec29512ef94d34e38886ce1c50ca",
        "nTime": 1563968498,
        "nBits": 486609053
      },
      {
        "height": 1456687,
        "blockhash": "0aa762a49575bed937e3b67ef7f35b50c73ba1e15885bcd561b0024ec63cdc8f",
        "hashPrevBlock": "07ff3fbe03ed0f8d4d672d278554131631405ee9c8550f93f5b92ae97255c841",
        "hashMerkleRoot": "933a601ec6640b1b327a742edfd4e14c0f1a293ad3fda15db9cb87910185bde7",
        "nTime": 1563968672,
        "nBits": 486608999
      },
      {
        "height": 1456688,
        "blockhash": "0330f6d6d7f2fd87b077165f5c0271129d2f000b65d876db2941c34f87da4491",
        "hashPrevBlock": "0aa762a49575bed937e3b67ef7f35b50c73ba1e15885bcd561b0024ec63cdc8f",
        "hashMerkleRoot": "f83e3585b96988d8dc531c7533ff0bff287ea29e5914b488cbbe3e2d480bb383",
        "nTime": 1563968732,
        "nBits": 486608215
      },
      {
        "height": 1456689,
        "blockhash": "00000000760596dbc4a35428f245346c740bda0c30f0d56136692ed023b0087e",
        "hashPrevBlock": "0330f6d6d7f2fd87b077165f5c0271129d2f000b65d876db2941c34f87da4491",
        "hashMerkleRoot": "3f7a1d70a9d5f7a7ab73862d9f89e2c1ad05d18d5fb04bf360a9b7e2029fe420",
        "nTime": 1563968711,
        "nBits": 486608250
      },
      {
        "height": 1456690,
        "blockhash": "0a735f0f144f0f3d079b9674ef0e3dc39b29ae7c254dccfc7e2b1dc8bf902eb7",
        "hashPrevBlock": "00000000760596dbc4a35428f245346c740bda0c30f0d56136692ed023b0087e",
        "hashMerkleRoot": "63734e94b3ce30f7f0de7a7e3546ee4617bfffca22391fcfac807cdc042aa8ed",
        "nTime": 1563968812,
        "nBits": 486608101
      },
      {
        "height": 1456691,
        "blockhash": "0ecceb771f4706188ac1db125ba3228ddd97d30043e437576605a764f43c57eb",
        "hashPrevBlock": "0a735f0f144f0f3d079b9674ef0e3dc39b29ae7c254dccfc7e2b1dc8bf902eb7",
        "hashMerkleRoot": "d7f6ea68b87b15dcadb8c7f56aebcc11c8cc395186822d67e56c99bcbe95ba30",
        "nTime": 1563968929,
        "nBits": 486609120
      },
      {
        "height": 1456692,
        "blockhash": "0000000034cb2953e5bb5d4137209e8d8ef98608b0dc50f77dfb5174b06f5a26",
        "hashPrevBlock": "0ecceb771f4706188ac1db125ba3228ddd97d30043e437576605a764f43c57eb",
        "hashMerkleRoot": "1f521201d68355b2f0ab5ac7b6e34c998409f60d1789415b3d7673b746ae5545",
        "nTime": 1563968934,
        "nBits": 486609800
      },
      {
        "height": 1456693,
        "blockhash": "01a724e7686a4dce74884ebd8bd869c855d1a71afc80c906830acfa1d14811cd",
        "hashPrevBlock": "0000000034cb2953e5bb5d4137209e8d8ef98608b0dc50f77dfb5174b06f5a26",
        "hashMerkleRoot": "0796959f32409791221a66859b6abbbf5ec31c2afcc22e7b606911da97612e4e",
        "nTime": 1563969054,
        "nBits": 486611292
      },
      {
        "height": 1456694,
        "blockhash": "000000008b4a3386489d1438ddc1220652942c95053f2c95c72c6868af215c8a",
        "hashPrevBlock": "01a724e7686a4dce74884ebd8bd869c855d1a71afc80c906830acfa1d14811cd",
        "hashMerkleRoot": "8ea989e47aa590fbabf19b5a7dbace61f32be3c51c558b991f7718b27eaa6b98",
        "nTime": 1563969053,
        "nBits": 486610300
      },
      {
        "height": 1456695,
        "blockhash": "00325ddee8e46aa1dcea791e370f87bcd94654a19d7bbf69d9fc6fd2afa5bc1f",
        "hashPrevBlock": "000000008b4a3386489d1438ddc1220652942c95053f2c95c72c6868af215c8a",
        "hashMerkleRoot": "dffc52dcc7c758616ec081e376f3385b1f75f41463e5fe2580e720b7c41637a1",
        "nTime": 1563969170,
        "nBits": 486609719
      },
      {
        "height": 1456696,
        "blockhash": "0121ba6e77b2d89461f23390193e5d355ba09abcebd8fa774d13dc925f67d927",
        "hashPrevBlock": "00325ddee8e46aa1dcea791e370f87bcd94654a19d7bbf69d9fc6fd2afa5bc1f",
        "hashMerkleRoot": "31fbd5fc898ec987575eb676abedcee5480375365e7554ac9aa90489c5e29e57",
        "nTime": 1563969248,
        "nBits": 486609177
      },
      {
        "height": 1456697,
        "blockhash": "008f9c7128023e04d1896d101a74b7a5020b4a9c4d372116f8a25117d6fc89b0",
        "hashPrevBlock": "0121ba6e77b2d89461f23390193e5d355ba09abcebd8fa774d13dc925f67d927",
        "hashMerkleRoot": "6122994bfb8f97dc6275119004c042afdd2cf6eab9a8e294f0ef5549793c39e2",
        "nTime": 1563969346,
        "nBits": 486610067
      },
      {
        "height": 1456698,
        "blockhash": "0dffa8155af91fb742dfc6252bd4f7bfd85e7c770db5b06edf45b54bed6afeb8",
        "hashPrevBlock": "008f9c7128023e04d1896d101a74b7a5020b4a9c4d372116f8a25117d6fc89b0",
        "hashMerkleRoot": "d2429d0ee8c131bdba55058e86d7e55c68041dcfe0c72ff8596542fc35571a2e",
        "nTime": 1563969406,
        "nBits": 486609959
      },
      {
        "height": 1456699,
        "blockhash": "0e4f73be5d71475d1203e2bd5350f631b4afc90db65ff1a46a0d0ce9ff6082b0",
        "hashPrevBlock": "0dffa8155af91fb742dfc6252bd4f7bfd85e7c770db5b06edf45b54bed6afeb8",
        "hashMerkleRoot": "0edb7a7f18d2bcf5fd5e1364cd913e8e9769bf7e51292d5d57e5b886fdf39834",
        "nTime": 1563969466,
        "nBits": 486610314
      },
      {
        "height": 1456700,
        "blockhash": "09b87ed9bc81684322cb3fd36775232d4609210ff75fe7a075a5f859f573d7f1",
        "hashPrevBlock": "0e4f73be5d71475d1203e2bd5350f631b4afc90db65ff1a46a0d0ce9ff6082b0",
        "hashMerkleRoot": "98547e5781d6a0d04fd952bd5ff92223bbb4ca03a991818c445f58d2ad88e8bc",
        "nTime": 1563969526,
        "nBits": 486609186
      }
    ],
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_listtransactions

**nspv\_listtransactions \[address \[isCC \[skipcount \[filter]]]]**

This method returns a list of transactions for an address.

#### Arguments

| Name      | Type               | Description                                                                                                |
| --------- | ------------------ | ---------------------------------------------------------------------------------------------------------- |
| address   | (string, optional) | the address for which transactions are to be listed; if not specified, the current active address is used  |
| isCC      | (number, optional) | only return transactions that are related to Antara modules                                                |
| skipcount | (number, optional) | skips the specified number of transactions starting from the oldest; always returns the latest transaction |
| filter    | (number, optional) | (in development)                                                                                           |

#### Response

| Name      | Type             | Description                                                                             |
| --------- | ---------------- | --------------------------------------------------------------------------------------- |
| result    | (string)         | whether the command was successful                                                      |
| txids     | (array of jsons) | an array containing jsons that describe the transactions                                |
| height    | (number)         | the height of the block in which the transaction was included                           |
| txid      | (string)         | the id of the transaction                                                               |
| value     | (number)         | the amount of coins in the vin/vout (inputs and outputs)                                |
| vin/vout  | (number)         | the index of vin/vout in the transaction                                                |
| address   | (string)         | the address for which the transactions are being returned                               |
| isCC      | (number)         | whether the address belongs to an Antara module                                         |
| height    | (number)         | the height of the blockchain when this response was returned                            |
| numtxids  | (number)         | number of vouts/vins being returned                                                     |
| skipcount | (number)         | the number of transactions that have been skipped, starting from the oldest transaction |
| filter    | (number)         | (in development)                                                                        |
| lastpeer  | (string)         | the last known peer                                                                     |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "listtransactions", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "txids": [
      {
        "height": 1453830,
        "txid": "04df7641f114c14fa4fbe2ec6e8ef5b55417f78fd12ef90b1217fcf512cb5ec2",
        "value": 2.98,
        "vout": 1
      },
      {
        "height": 1453881,
        "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
        "value": -2.98,
        "vin": 0
      },
      {
        "height": 1453881,
        "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
        "value": 2.00999,
        "vout": 1
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": 1,
        "vout": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": -2.00999,
        "vin": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": 1.00989,
        "vout": 1
      }
    ],
    "address": "RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",
    "isCC": 0,
    "height": 1458248,
    "numtxids": 6,
    "skipcount": 0,
    "filter": 0,
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_listunspent

**nspv\_listunspent \[address \[isCC \[skipcount \[filter]]]]**

Use this method to retrieve all the unspent outputs belonging to an address.

#### Arguments

| Name      | Type               | Description                                                                                                |
| --------- | ------------------ | ---------------------------------------------------------------------------------------------------------- |
| address   | (string, optional) | the address for which transactions are to be listed; if not specified, the current active address is used  |
| isCC      | (number, optional) | only return transactions that are related to Antara modules                                                |
| skipcount | (number, optional) | skips the specified number of transactions starting from the oldest; always returns the latest transaction |
| filter    | (number, optional) | (in development)                                                                                           |

#### Response

| Name      | Type             | Description                                                  |
| --------- | ---------------- | ------------------------------------------------------------ |
| result    | (string)         | whether the command was successful                           |
| utxos     | (array of jsons) | an array containing jsons that describe the outputs          |
| height    | (number)         | the height of the block in which the output was created      |
| txid      | (string)         | the id of the transaction in which the output is present     |
| vout      | (number)         | the index of the vout (output) in the transaction            |
| value     | (number)         | the amount of coins in the vout (output)                     |
| rewards   | (number)         | the amount of active user rewards claimable by the output    |
| address   | (string)         | the address for which the transactions are being returned    |
| isCC      | (number)         | whether the address belongs to an Antara module              |
| height    | (number)         | the height of the blockchain when this response was returned |
| numutxos  | (number)         | number of vouts(outputs) being returned                      |
| balance   | (number)         | the total balance available for the address                  |
| rewards   | (number)         | the total rewards claimable by the address                   |
| skipcount | (number)         | the number of utoxs that have been skipped; from the oldest  |
| filter    | (number)         | (in development)                                             |
| lastpeer  | (string)         | the last known peer                                          |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "listunspent", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "utxos": [
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "vout": 0,
        "value": 1,
        "rewards": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "vout": 1,
        "value": 1.00989,
        "rewards": 0
      }
    ],
    "address": "RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",
    "isCC": 0,
    "height": 1458307,
    "numutxos": 2,
    "balance": 2.00989,
    "rewards": 0,
    "skipcount": 0,
    "filter": 0,
    "lastpeer": "nodeid.17"
  }
  ```
</collapse-text>

## nspv\_login

**nspv\_login wif**

Use this method to login to an address using its wifkey.

### Arguments

| Name | Type     | Description                                         |
| ---- | -------- | --------------------------------------------------- |
| wif  | (string) | the wifkey (wallet import format of the privatekey) |

### Response

| Name       | Type      | Description                                                                 |
| ---------- | --------- | --------------------------------------------------------------------------- |
| result     | (string)  | whether the command was successful                                          |
| status     | (string)  | the time till the expiry of the login                                       |
| address    | (string)  | the address corresponding to the wifkey                                     |
| pubkey     | (string)  | the pubkey corresponding to the wifkey                                      |
| wifprefix  | (number)  | the prefix of the wifkey (indicates the netwok the wifkey is to be used on) |
| compressed | (boolean) | indicates whether the wifkey is compressed                                  |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "login", "params": ["Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "status": "wif will expire in 777 seconds",
    "address": "Rxxxxxxxxxxxxxxxxxxx",
    "pubkey": "03xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "wifprefix": 188,
    "compressed": 1
  }
  ```
</collapse-text>

## nspv\_logout

**nspv\_logout**

Use this method to logout of the currently logged in address.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type     | Description                   |
| ------ | -------- | ----------------------------- |
| result | (string) | whether the command succeeded |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "logout", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  { "result": "success" }
  ```
</collapse-text>

## nspv\_mempool

**nspv\_mempool address isCC memfunc \[txid vout evalcode ccfunc]]]**

This method returns the current transactions in the mempool. The various parameters can be used to filter the transactions.

<DevComment>
  FIXME

  which args are optional and eachone's use

  and values and meanings of memfunc

  memfunc (0 all, 1 address recv, 2 txid/vout spent, 3 txid inmempool 4)
</DevComment>

### Arguments

| Name     | Type              | Description                                            |
| -------- | ----------------- | ------------------------------------------------------ |
| address  | (string,optional) | if the transactions should belong to the address       |
| isCC     | (number,optional) | if the transactions should belong to any Antara module |
| memfunc  | (number,optional) | TBD                                                    |
| txid     | (string,optional) | TBD                                                    |
| vout     | (number,optional) | TBD                                                    |
| evalcode | (number,optional) | TBD                                                    |
| ccfunc   | (number,optional) | TBD                                                    |

### Response

| Name     | Type               | Description                                                  |
| -------- | ------------------ | ------------------------------------------------------------ |
| result   | (string)           | whether the command was successful                           |
| txids    | (array of strings) | the ids of the transactions in the mempool                   |
| address  | (string)           | the address that was used to filter the mempool              |
| isCC     | (number)           | if the transactions returned belong to an Antara Module      |
| height   | (number)           | the height of the blockchain when this response was returned |
| numtxids | (number)           | the number of transaction ids that are being returned        |
| txid     | (string)           | TBD                                                          |
| vout     | (number)           | TBD                                                          |
| memfunc  | (number)           | TBD                                                          |
| type     | (string)           | the type of the filter apploed to the mempool                |
| lastpeer | (string)           | the last known peer                                          |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "mempool", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "txids": [
      "9f4a28bf746fc4a8f627302ff09159345a2ca4e3be404b7f4b02e90865c1b301",
      "f676945f97e791c54e9c2e507e715cd160ec39452aa9019610861039c199d532",
      "d6712c027c2396265b87a1645cda8fcb8ff40d6c0dd86ff932f25b51387b613b",
      "eb36d507991accc337c45bd9f0113050223fa0b7b43c76b400cf63fb21cfd26e",
      "76bafb69f1c58a0726df1719aa5eb16cdc026f06969dfeef20e5752889381b6f",
      "2d02915d392ca9323fbd2344e9f951dddf59a4a77794d121e88055d90df1bed1",
      "94f61cf68e30764ef31ea0376d74a1c9d774f6ccb4f2e612f9b650ab38405adf",
      "050020b9867306c2ab2b131391a9edf0ab72e4d4a018bb1837734850f78ba8f1"
    ],
    "address": "",
    "isCC": 0,
    "height": 1458372,
    "numtxids": 8,
    "txid": "0000000000000000000000000000000000000000000000000000000000000000",
    "vout": 0,
    "memfunc": 0,
    "type": "all mempool",
    "lastpeer": "nodeid.20"
  }
  ```
</collapse-text>

## nspv\_notarizations

**nspv\_notarizations height**

This method returns the notarization data for a given height.

### Arguments

| Name   | Type     | Description                                       |
| ------ | -------- | ------------------------------------------------- |
| height | (number) | the height at which notarization data is required |

### Response

| Name                     | Type     | Description                                                                                                |
| ------------------------ | -------- | ---------------------------------------------------------------------------------------------------------- |
| result                   | (string) | whether the command was successful                                                                         |
| prev                     | (json)   | the details of the previous notarization                                                                   |
| notarized\_height        | (number) | the height of the latest block that has been notarized                                                     |
| notarized\_blockhash     | (string) | the blockhash of the latest block that has been notarized                                                  |
| notarization\_txid       | (string) | the id of the transaction in which the notarization data is included in the chain being dPoW'ed            |
| notarization\_txidheight | (number) | the height of the block in which the notarization transaction is included                                  |
| notarization\_desttxid   | (string) | the id of the transaction in which the notarization data is included in the chain acting as the data store |
| next                     | (json)   | the details of the next notarization                                                                       |
| lastpeer                 | (string) | the last known peer                                                                                        |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "notarizations", "params": [145677] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "prev": {
      "notarized_height": 1457780,
      "notarized_blockhash": "0cd381289fcc84f28ed9759e6803d2da4f60757da55b91eb8c78b12d99f0f855",
      "notarization_txid": "fff01156657dccb6ba80cd6aa84676a2b66f7f5eb6b882f2cbe6fe87523bd3aa",
      "notarization_txidheight": 1457796,
      "notarization_desttxid": "a2a448d2094eb0687072c38332a5629595a1b30c51aa40b7c8ee8113054a63fc"
    },
    "next": {
      "notarized_height": 1457820,
      "notarized_blockhash": "000000010110afdc044b7652e9be1d177cfb369d16f431c421b3030ab9ca3e4a",
      "notarization_txid": "ba3e0792de1324cb557b9b8a8449d9142d1699e54e677f774d8491c4036f5e1c",
      "notarization_txidheight": 1457833,
      "notarization_desttxid": "e699a1cd513a35cfb8075cbbb5d3db62a6cbcdcced5744e2dcd6744d5e399126"
    },
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_spend

**nspv\_spend address amount**

<DevComment>FIXME doc retcodes?</DevComment>

This method can be used to spend some coins from the currently loggedin address to any other address.

### Arguments

| Name    | Type     | Description                  |
| ------- | -------- | ---------------------------- |
| address | (string) | the address of the recipient |
| amount  | (number) | the amount to be sent        |

### Response

| Name          | Type             | Description                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------ |
| rewards       | (string)         | the rewards being claimed by this spend transaction                                                                      |
| validated     | (string)         |                                                                                                                          |
| tx            | (json)           | a json containing details of the transaction                                                                             |
| nVersion      | (number)         | version of the komodo daemon                                                                                             |
| vin           | (array of jsons) | the inputs being consumed by the transaction                                                                             |
| txid          | (string)         | the id of the transaction whose input is being spent                                                                     |
| vout          | (number)         | the output number in the above transaction                                                                               |
| scriptSig     | (string)         | the redeem script that satisfies the scriptPubkey of the above output                                                    |
| sequenceid    | (number)         | the sequence number that has been set                                                                                    |
| vout          | (array of jsons) | the outputs being created by the transaction                                                                             |
| value         | (string)         | the value in the output                                                                                                  |
| scriptPubKey  | (string)         | the locking script placed on the above value                                                                             |
| nLockTime     | (number)         | the locktime that has been set                                                                                           |
| nExpiryHeight | (number)         | the block height after which the transaction will be removed from the mempool if it has not been mined                   |
| valueBalance  | (number)         |                                                                                                                          |
| result        | (string)         | whether the command succeeded                                                                                            |
| hex           | (string)         | the transaction in hex format; it should be broadcast to the network using the [nspv\_broadcast](#nspv_broadcast) method |
| retcodes      | (number)         | the return codes; given an indication on the success or failure in the creation of the transaction                       |
| lastpeer      | (string)         | the last known peer                                                                                                      |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "spend", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",1 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "rewards": "0.00000000",
    "validated": "0.00000000",
    "tx": {
      "nVersion": 4,
      "vin": [
        {
          "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
          "vout": 1,
          "scriptSig": "47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06",
          "sequenceid": 4294967295
        }
      ],
      "vout": [
        {
          "value": 1,
          "scriptPubKey": "76a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac"
        },
        {
          "value": 1.00989,
          "scriptPubKey": "210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac"
        }
      ],
      "nLockTime": 1564049127,
      "nExpiryHeight": 0,
      "valueBalance": 0
    },
    "result": "success",
    "hex": "0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ace77e395d000000000000000000000000000000",
    "retcodes": [0],
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_spentinfo

**nspv\_spentinfo txid vout**

This method returns the spent info of the output specified by the arguments.

### Arguments

| Name | Type     | Description                                                           |
| ---- | -------- | --------------------------------------------------------------------- |
| txid | (string) | the id of the transaction whose spent info is required                |
| vout | (number) | the vout number in the above transaction whose spent info is required |

### Response

| Name            | Type     | Description                                                           |
| --------------- | -------- | --------------------------------------------------------------------- |
| result          | (string) | whether the command succeeded                                         |
| txid            | (string) | the id of the transaction whose spent info is returned                |
| vout            | (string) | the vout number in the above transaction whose spent info is required |
| spentheight     | (string) | the block height at which the output has been spent                   |
| spenttxid       | (string) | the id of the transaction that spent this output                      |
| spentvini       | (string) | the input number of this output in the transaction that spent it      |
| spenttxlen      | (string) | the length of the transaction that spent this output                  |
| spenttxprooflen | (string) | the length of proof of the transaction that spent this output         |
| lastpeer        | (string) | the last known peer                                                   |

### :pushpin: Examples

Command:

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "spentinfo", "params": ["e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",1 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
    "vout": 1,
    "spentheight": 1458037,
    "spenttxid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "spentvini": 0,
    "spenttxlen": 254,
    "spenttxprooflen": 1655,
    "lastpeer": "nodeid.1"
  }
  ```
</collapse-text>

## nspv\_txproof

**nspv\_txproof txid vout \[height]**

This method is an internal function to be used by the [nspv\_listtransactions](#nspv_listtransactions) method

### Arguments

| Name   | Type              | Description                                        |
| ------ | ----------------- | -------------------------------------------------- |
| txid   | (string)          | the id of the transaction whose proof is requested |
| vout   | (number)          | the number of the output in the above transaction  |
| height | (number,optional) |                                                    |

### Response

| Name       | Type     | Description                                                  |
| ---------- | -------- | ------------------------------------------------------------ |
| txid       | (string) | the id of the transaction whose proof is returned            |
| height     | (string) | the height at which the proof of the transaction is returned |
| txlen      | (string) | the length of the transaction                                |
| txprooflen | (string) | the length of the proof for the transaction                  |
| lastpeer   | (string) | the last known peer                                          |

### :pushpin: Examples

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "nspv_txproof", "params": ["ae234c7f47bcb5adbe7c5c5661051865be0ce61422328de90fe5a3f8fa8b7c60", "4322"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": {
      "txid": "ae234c7f47bcb5adbe7c5c5661051865be0ce61422328de90fe5a3f8fa8b7c60",
      "height": 4322,
      "txlen": 119,
      "txprooflen": 0,
      "lastpeer": "159.65.93.178:12985"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</collapse-text>
export const title = "Smart Chain Rawtransaction Methods";
export const description = "This document contains Rawtransaction methods for a Smart Chain.";

# Rawtransactions

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## createrawtransaction

**createrawtransaction '\[\{ "txid": "id\_string", "vout": number }, ... ]' '\{ "address": amount, ... }'**

The `createrawtransaction` method creates a transaction, spending the given inputs and sending to the given addresses. The method returns a hex-encoded raw transaction.

<Note>
  This is a raw transaction, and therefore the inputs are not signed and the
  transaction is not stored in the wallet nor transmitted to the network.
</Note>

### Arguments

| Name           | Type                | Description                                                |
| -------------- | ------------------- | ---------------------------------------------------------- |
| "transactions" | (string, required)  | a json array of json objects                               |
| "txid"         | (string, required)  | the transaction id                                         |
| "vout"         | (numeric, required) | the output number                                          |
| "addresses"    | (string, required)  | a json object with addresses as keys and amounts as values |
| "address"      | (numeric, required) | the key is the address, the value is the COIN amount       |

### Response

| Name          | Type     | Description                     |
| ------------- | -------- | ------------------------------- |
| "transaction" | (string) | a hex string of the transaction |

#### 📌 Examples

Command:

```bash
./komodo-cli createrawtransaction '[{"txid":"9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30","vout":0}]' '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": [[{"txid":"9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30","vout":0}], {"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01} ]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## decoderawtransaction

**decoderawtransaction "hexstring"**

The `decoderawtransaction` method returns a json object representing the serialized, hex-encoded transaction.

### Arguments

| Name  | Type               | Description                |
| ----- | ------------------ | -------------------------- |
| "hex" | (string, required) | the transaction hex string |

### Response

| Name                     | Type                                           | Description                                                       |
| ------------------------ | ---------------------------------------------- | ----------------------------------------------------------------- |
| "txid"                   | (string)                                       | the transaction id                                                |
| "overwintered"           | (boolean)                                      | the overwintered flag                                             |
| "version"                | (numeric)                                      | the version                                                       |
| "versiongroupid"         | (string, optional)                             | the version group id (overwintered txs)                           |
| "locktime"               | (numeric)                                      | the lock time                                                     |
| "expiryheight"           | (numeric, optional)                            | last valid block height for mining transaction (overwintered txs) |
| "vin" : \[ ... ]         | (array of json objects)                        |                                                                   |
| "txid"                   | (string)                                       | the transaction id                                                |
| "vout" : \[ ... ]        | (numeric)                                      | the output number                                                 |
| "scriptSig"              | (json object)                                  | the script                                                        |
| "asm"                    | (string)                                       | asm                                                               |
| "hex"                    | (string)                                       | hex                                                               |
| "sequence"               | (numeric)                                      | the script sequence number                                        |
| "vout"                   | (array of json objects)                        |                                                                   |
| "value"                  | (numeric)                                      | the value                                                         |
| "number"                 | (numeric)                                      | index                                                             |
| "scriptPubKey"           | (json object)                                  |                                                                   |
| "asm"                    | (string)                                       | the asm                                                           |
| "hex"                    | (string)                                       | the hex                                                           |
| "reqSigs"                | (numeric)                                      | the required sigs                                                 |
| "type"                   | (string)                                       | the type, eg 'pubkeyhash'                                         |
| "addresses"              |                                                |                                                                   |
| "address"                | (string)                                       | the address                                                       |
| "vjoinsplit" : \[ ... ]  | (array of json objects, only for version >= 2) |                                                                   |
| "vpub\_old"              | (numeric)                                      | public input value                                                |
| "vpub\_new"              | (numeric)                                      | public output value                                               |
| "anchor"                 | (string)                                       | the anchor                                                        |
| "nullifiers" : \[ ... ]  | (array of strings)                             |                                                                   |
| "hex"                    | (string)                                       | input note nullifier                                              |
| "commitments" : \[ ... ] | (array of strings)                             |                                                                   |
| "hex"                    | (string)                                       | output note commitment                                            |
| "onetimePubKey"          | (string)                                       | the onetime public key used to encrypt the ciphertexts            |
| "randomSeed"             | (string)                                       | the random seed                                                   |
| "macs" : \[ ... ]        | (array of strings)                             |                                                                   |
| "hex"                    | (string)                                       | input note MAC                                                    |
| "proof"                  | (string)                                       | the zero-knowledge proof                                          |
| "ciphertexts" : \[ ... ] | (array of strings)                             |                                                                   |
| "hex"                    | (string)                                       | output note ciphertext                                            |

#### 📌 Examples

Command:

```bash
./komodo-cli decoderawtransaction "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "txid": "bdb537d0a0588eb63e696d5f6e5cdc7bda071fe39327c680f42e8c3af6719df1",
    "size": 85,
    "version": 1,
    "locktime": 0,
    "vin": [
      {
        "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30",
        "vout": 0,
        "scriptSig": {
          "asm": "",
          "hex": ""
        },
        "sequence": 4294967295
      }
    ],
    "vout": [
      {
        "value": 0.01,
        "valueSat": 1000000,
        "n": 0,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 56def632e67aa11c25ac16a0ee52893c2e5a2b6a OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi"]
        }
      }
    ],
    "vjoinsplit": []
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decoderawtransaction", "params": ["0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "txid": "bdb537d0a0588eb63e696d5f6e5cdc7bda071fe39327c680f42e8c3af6719df1",
      "size": 85,
      "version": 1,
      "locktime": 0,
      "vin": [
        {
          "txid": "9f44dc664882198b14e9a8c466d466efcdd070ccb6f57be8e2884aa11e7b2a30",
          "vout": 0,
          "scriptSig": {
            "asm": "",
            "hex": ""
          },
          "sequence": 4294967295
        }
      ],
      "vout": [
        {
          "value": 0.01,
          "valueSat": 1000000,
          "n": 0,
          "scriptPubKey": {
            "asm": "OP_DUP OP_HASH160 56def632e67aa11c25ac16a0ee52893c2e5a2b6a OP_EQUALVERIFY OP_CHECKSIG",
            "hex": "76a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac",
            "reqSigs": 1,
            "type": "pubkeyhash",
            "addresses": ["RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi"]
          }
        }
      ],
      "vjoinsplit": []
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## decodescript

**decodescript "hex"**

The `decodescript` method decodes a hex-encoded script.

### Arguments

| Name  | Type     | Description            |
| ----- | -------- | ---------------------- |
| "hex" | (string) | the hex encoded script |

### Response

| Name                  | Type               | Description                |
| --------------------- | ------------------ | -------------------------- |
| "asm"                 | (string)           | the script public key      |
| "hex"                 | (string)           | the hex-encoded public key |
| "type"                | (string)           | the output type            |
| "reqSigs"             | (numeric)          | the required signatures    |
| "addresses": \[ ... ] | (array of strings) |                            |
| "address"             | (string)           | the address                |
| "p2sh"                | (string)           | the script address         |

#### 📌 Examples

Command:

```bash
./komodo-cli decodescript "0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "asm": "0 0 0 48 7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff014042 00000000001976a91456def632e67a OP_LESSTHANOREQUAL [error]",
    "type": "nonstandard",
    "p2sh": "bQXGP7b2uRaWbMGkLaJat9LisWr8ZMGLbs"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decodescript", "params": ["0100000001302a7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "asm": "0 0 0 48 7b1ea14a88e2e87bf5b6cc70d0cdef66d466c4a8e9148b19824866dc449f0000000000ffffffff014042 00000000001976a91456def632e67a OP_LESSTHANOREQUAL [error]",
      "type": "nonstandard",
      "p2sh": "bQXGP7b2uRaWbMGkLaJat9LisWr8ZMGLbs"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## fundrawtransaction

**fundrawtransaction "hexstring"**

The `fundrawtransaction` method adds inputs to a transaction until it has enough `in` value to meet its `out` value. This will not modify existing inputs, and will add one `change` output to the outputs.

<Note>
  Inputs which were signed may need to be resigned after completion since
  in/outputs have been added. To sign the inputs added, use{" "}
  <b>signrawtransaction</b>.
</Note>

<Note>
  This method comes from the BTC codebase, of which KMD is ultimately a fork
  (via Zcash). For full details, please see [the linked
  documentation](https://bitcoin.org/en/developer-reference#fundrawtransaction)
</Note>

### Arguments

| Name        | Type               | Description                           |
| ----------- | ------------------ | ------------------------------------- |
| "hexstring" | (string, required) | the hex string of the raw transaction |

### Response

| Name        | Type      | Description                                        |
| ----------- | --------- | -------------------------------------------------- |
| "hex"       | (string)  | the resulting raw transaction (hex-encoded string) |
| "fee"       | (numeric) | the fee added to the transaction                   |
| "changepos" | (numeric) | the position of the added change output, or -1     |

#### 📌 Examples

Create a transaction with no inputs:

Command:

```bash
./komodo-cli createrawtransaction "[]" '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  01000000000140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
  ```
</CollapsibleSection>

Add sufficient unsigned inputs to meet the output value:

Command:

```bash
./komodo-cli fundrawtransaction "rawtransactionhex"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "",
    "changepos": 0,
    "fee": 0.0001174
  }
  ```
</CollapsibleSection>

Sign the transaction:

Command:

```bash
./komodo-cli signrawtransaction ""
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "",
    "complete": true
  }
  ```
</CollapsibleSection>

Send the transaction:

Command:

```bash
./komodo-cli sendrawtransaction ""
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95
  ```
</CollapsibleSection>

## getrawtransaction

**getrawtransaction "transaction\_id" ( verbose )**

The `getrawtransaction` method returns the raw transaction data.

If `verbose=0`, the method returns a string that is serialized, hex-encoded data for `transaction_id`. If `verbose` is non-zero, the method returns an object with information about `transaction_id`.

<Note>
  This method relies on the <b>txindex</b> runtime parameter, which is enabled
  by default on all KMD-based chains. Disabling <b>txindex</b> will cause this
  method to malfunction.
</Note>

### Arguments

| Name    | Type                           | Description                                                                   |
| ------- | ------------------------------ | ----------------------------------------------------------------------------- |
| "txid"  | (string, required)             | the transaction id                                                            |
| verbose | (numeric, optional, default=0) | if 0, the method returns a string in hex; otherwise, it returns a json object |

### Response (if `verbose` is not set, or set to `0`)

| Name   | Type     | Description                                 |
| ------ | -------- | ------------------------------------------- |
| "data" | (string) | the serialized, hex-encoded data for 'txid' |

### Response (if `verbose` > `0`)

| Name                     | Type                                           | Description                                                                 |
| ------------------------ | ---------------------------------------------- | --------------------------------------------------------------------------- |
| "hex"                    | (string)                                       | the serialized, hex-encoded data for 'txid'                                 |
| "txid"                   | (string)                                       | the transaction id (same as provided)                                       |
| "version"                | (numeric)                                      | the version                                                                 |
| "locktime"               | (numeric)                                      | the lock time                                                               |
| "expiryheight"           | (numeric, optional)                            | the block height after which the transaction expires                        |
| "vin" : \[ ... ]         | (array of json objects)                        |                                                                             |
| "txid"                   | (string)                                       | the transaction id                                                          |
| "vout"                   | (numeric)                                      |                                                                             |
| "scriptSig": \{ ... }    | (array of json objects)                        | the script                                                                  |
| "asm"                    | (string)                                       | asm                                                                         |
| "hex"                    | (string)                                       | hex                                                                         |
| "sequence"               | (numeric)                                      | the script sequence number                                                  |
| "vout" : \[ ... ]        | (array of json objects)                        |                                                                             |
| "value"                  | (numeric)                                      | the value                                                                   |
| "number"                 | (numeric)                                      | index                                                                       |
| "scriptPubKey"           |                                                |                                                                             |
| "asm"                    | (string)                                       | the asm                                                                     |
| "hex"                    | (string)                                       | the hex                                                                     |
| "reqSigs"                | (numeric)                                      | the required sigs                                                           |
| "type"                   | (string)                                       | the type, e.g. 'pubkeyhash'                                                 |
| "addresses" : \[ ... ]   | (array of strings)                             |                                                                             |
| "address"                | (string)                                       | the address                                                                 |
| "vjoinsplit" : \[ ... ]  | (array of json objects, only for version >= 2) |                                                                             |
| "vpub\_old"              | (numeric)                                      | public input value                                                          |
| "vpub\_new"              | (numeric)                                      | public output value                                                         |
| "anchor"                 | (string)                                       | the anchor                                                                  |
| "nullifiers"             |                                                |                                                                             |
| "hex"                    | (string)                                       | input note nullifier                                                        |
| "commitments" : \[ ... ] | (array of strings)                             |                                                                             |
| "hex"                    | (string)                                       | output note commitment                                                      |
| "onetimePubKey"          | (string)                                       | the onetime public key used to encrypt the ciphertexts                      |
| "randomSeed"             | (string)                                       | the random seed                                                             |
| "macs": \[ ... ]         | (array of strings)                             |                                                                             |
| "hex"                    | (string)                                       | input note MAC                                                              |
| "proof"                  | (string)                                       | the zero-knowledge proof                                                    |
| "ciphertexts": \[ ... ]  | (array of strings)                             |                                                                             |
| "hex"                    | (string)                                       | output note ciphertext                                                      |
| "blockhash"              | (string)                                       | the block hash                                                              |
| "height"                 | (numeric)                                      | height of the block                                                         |
| "confirmations"          | (numeric)                                      | a confirmation number that is aware of dPoW security                        |
| "rawconfirmations"       | (numeric)                                      | the raw confirmations (number of blocks on top of this transaction's block) |
| "time"                   | (numeric)                                      | the transaction time in seconds since epoch (Jan 1 1970 GMT)                |
| "blocktime"              | (numeric)                                      | the block time in seconds since epoch (Jan 1 1970 GMT)                      |

#### 📌 Examples

Command:

```bash
./komodo-cli getrawtransaction "a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getrawtransaction "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69" 1
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "0400008085202f890193b9bc75f8d057088c61a832cbbef4e4e6792eefce990bc77adc65056eb509eb010000006b483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374feffffff0220cbce3b280000001976a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac402a41510d0000001976a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac1b838a5cfa5b13000000000000000000000000",
    "txid": "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69",
    "overwintered": true,
    "version": 4,
    "versiongroupid": "892f2085",
    "locktime": 1552581403,
    "expiryheight": 1268730,
    "vin": [
      {
        "txid": "eb09b56e0565dc7ac70b99ceef2e79e6e4f4becb32a8618c0857d0f875bcb993",
        "vout": 1,
        "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
        "scriptSig": {
          "asm": "3045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b[ALL] 03ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374",
          "hex": "483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374"
        },
        "value": 2300.0,
        "valueSat": 230000000000,
        "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
        "sequence": 4294967294
      }
    ],
    "vout": [
      {
        "value": 1728.021,
        "interest": 0.0,
        "valueSat": 172802100000,
        "n": 0,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 0a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c61 OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RACRytPnrER2Mae5tKhnXnW5FqJSxLX5FY"]
        }
      },
      {
        "value": 571.978,
        "interest": 0.0,
        "valueSat": 57197800000,
        "n": 1,
        "scriptPubKey": {
          "asm": "OP_DUP OP_HASH160 a90b2782f35e63d9d2a0f57ac37baa4d9869d7b4 OP_EQUALVERIFY OP_CHECKSIG",
          "hex": "76a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac",
          "reqSigs": 1,
          "type": "pubkeyhash",
          "addresses": ["RQh1dxD25pU2NbhprGTMUsiwPzw1GJBeah"]
        }
      }
    ],
    "vjoinsplit": [],
    "valueBalance": 0.0,
    "vShieldedSpend": [],
    "vShieldedOutput": [],
    "blockhash": "0d1b5c0a59353f4290c52075cffadb32aeec6a1cdec9fa5625f9206ca6417a2f",
    "height": 1268711,
    "confirmations": 1,
    "rawconfirmations": 3,
    "time": 1552581666,
    "blocktime": 1552581666
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawtransaction", "params": ["3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hex": "0400008085202f890193b9bc75f8d057088c61a832cbbef4e4e6792eefce990bc77adc65056eb509eb010000006b483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374feffffff0220cbce3b280000001976a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac402a41510d0000001976a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac1b838a5cfa5b13000000000000000000000000",
      "txid": "3ac97fdd33c713857c1aac8de58cee5d51c768619602b969db9c752e65b28d69",
      "overwintered": true,
      "version": 4,
      "versiongroupid": "892f2085",
      "locktime": 1552581403,
      "expiryheight": 1268730,
      "vin": [
        {
          "txid": "eb09b56e0565dc7ac70b99ceef2e79e6e4f4becb32a8618c0857d0f875bcb993",
          "vout": 1,
          "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
          "scriptSig": {
            "asm": "3045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b[ALL] 03ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374",
            "hex": "483045022100bd390bb79971e15054cd203098d9109c0dac0ca20413ba5d9bfda66095b80ae902204d9afc50892fa13df30131a3f1fdbf7d1426307599c48cdf3069eb80de99660b012103ab19ae57aa6e013a660f82b5ffd1434d28c7a15f14c0b2eb40dae614e00b0374"
          },
          "value": 2300.0,
          "valueSat": 230000000000,
          "address": "R9kXMEiPQrFrDgNtnc7nYAQsDmLRXF2F5n",
          "sequence": 4294967294
        }
      ],
      "vout": [
        {
          "value": 1728.021,
          "interest": 0.0,
          "valueSat": 172802100000,
          "n": 0,
          "scriptPubKey": {
            "asm": "OP_DUP OP_HASH160 0a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c61 OP_EQUALVERIFY OP_CHECKSIG",
            "hex": "76a9140a11a6cd3eb3cc4005f6f8d1e8bfd47be9e99c6188ac",
            "reqSigs": 1,
            "type": "pubkeyhash",
            "addresses": ["RACRytPnrER2Mae5tKhnXnW5FqJSxLX5FY"]
          }
        },
        {
          "value": 571.978,
          "interest": 0.0,
          "valueSat": 57197800000,
          "n": 1,
          "scriptPubKey": {
            "asm": "OP_DUP OP_HASH160 a90b2782f35e63d9d2a0f57ac37baa4d9869d7b4 OP_EQUALVERIFY OP_CHECKSIG",
            "hex": "76a914a90b2782f35e63d9d2a0f57ac37baa4d9869d7b488ac",
            "reqSigs": 1,
            "type": "pubkeyhash",
            "addresses": ["RQh1dxD25pU2NbhprGTMUsiwPzw1GJBeah"]
          }
        }
      ],
      "vjoinsplit": [],
      "valueBalance": 0.0,
      "vShieldedSpend": [],
      "vShieldedOutput": [],
      "blockhash": "0d1b5c0a59353f4290c52075cffadb32aeec6a1cdec9fa5625f9206ca6417a2f",
      "height": 1268711,
      "confirmations": 1,
      "rawconfirmations": 5,
      "time": 1552581666,
      "blocktime": 1552581666
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## sendrawtransaction

**sendrawtransaction "hexstring" ( allowhighfees )**

The `sendrawtransction` method submits raw transaction (serialized, hex-encoded) to local nodes and the network.

Also see [createrawtransaction](/smart-chains/api/rawtransactions/#createrawtransaction) and [signrawtransaction](/smart-chains/api/rawtransactions/#signrawtransaction) calls.

### Arguments

| Name          | Type                               | Description                           |
| ------------- | ---------------------------------- | ------------------------------------- |
| "hexstring"   | (string, required)                 | the hex string of the raw transaction |
| allowhighfees | (boolean, optional, default=false) | whether to allow high fees            |

### Response

| Name  | Type     | Description                 |
| ----- | -------- | --------------------------- |
| "hex" | (string) | the transaction hash in hex |

#### 📌 Examples

Create a transaction:

Command:

```bash
./komodo-cli createrawtransaction '[{"txid" : "a44feb2e788d0332e283d8ca69c6a20999944dccac93246cbf9b36d841b08c95","vout":0}]' '{"RHCXHfXCZQpbUbihNHh5gTwfr7NXmJXmHi":0.01}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000
  ```
</CollapsibleSection>

Sign the transaction, and get back the hex:

Command:

```bash
./komodo-cli signrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
    "complete": true
  }
  ```
</CollapsibleSection>

Send the transaction (signed hex):

Command:

```bash
./komodo-cli sendrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  f1e041b2e2f1dafd331535d8277193aa27c33309a801949e0739a6b31c3d8a56
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendrawtransaction", "params": ["0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "f1e041b2e2f1dafd331535d8277193aa27c33309a801949e0739a6b31c3d8a56",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## signrawtransaction

**signrawtransaction "hexstring" ( \[\{ "txid": "id", "vout": n, "scriptPubKey": "hex", "redeemScript": "hex" }, ... ]\[ "privatekey1", ... ] sighashtype )**

The `signrawtransaction` method signs inputs for a raw transaction (serialized, hex-encoded). The second optional argument (may be `null`) is an array of previous transaction outputs that this transaction depends on, but may not yet be in the block chain. The third optional argument (may be `null`) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.

<Note>
  For full details, please see [the linked
  documentation](https://bitcoin.org/en/developer-reference#signrawtransaction)
</Note>

### Arguments

| Name           | Type                            | Description                                                                                                                                                                   |
| -------------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "hexstring"    | (string, required)              | the transaction hex string                                                                                                                                                    |
| "prevtxs"      | (string, optional)              | a json array of previous dependent transaction outputs                                                                                                                        |
| "txid"         | (string, required)              | the transaction id                                                                                                                                                            |
| "vout"         | (numeric, required)             | the output number                                                                                                                                                             |
| "scriptPubKey" | (string, required)              | the script key                                                                                                                                                                |
| "redeemScript" | (string, required for P2SH)     | redeem script                                                                                                                                                                 |
| "amount"       | (numeric, required)             | the amount spent                                                                                                                                                              |
| "privatekeys"  | (string, optional)              | a json array of base58-encoded private keys for signing                                                                                                                       |
| "privatekey"   | (string)                        | the private key in base58-encoding                                                                                                                                            |
| "sighashtype"  | (string, optional, default=ALL) | the signature hash type; the following options are available: `"ALL" \| "NONE" \| "SINGLE"` `"ALL" \| "ANYONECANPAY"` `"NONE" \| "ANYONECANPAY"` `"SINGLE" \| "ANYONECANPAY"` |

### Response

| Name        | Type      | Description                                              |
| ----------- | --------- | -------------------------------------------------------- |
| "hex"       | (string)  | the hex-encoded raw transaction with signature(s)        |
| "complete"  | (boolean) | whether the transaction has a complete set of signatures |
| "errors"    |           |                                                          |
| "txid"      | (string)  | the hash of the referenced, previous transaction         |
| "vout"      | (numeric) | the index of the output to spend and used as input       |
| "scriptSig" | (string)  | the hex-encoded signature script                         |
| "sequence"  | (numeric) | the script sequence number                               |
| "error"     | (string)  | verification or signing error related to the input       |

#### 📌 Examples

Command:

```bash
./komodo-cli signrawtransaction "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
    "complete": true
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's .conf file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransaction", "params": ["0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa40000000000ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hex": "0100000001958cb041d8369bbf6c2493accc4d949909a2c669cad883e232038d782eeb4fa4000000006a4730440220242c38740261799f9b6ccbde8f941e2567e86c84108c508d108d062ab9677b6e02206fea089b28c6d66d1c8f2343e1de7960dadafa3cf268c00f7dbe391cd8b9365f01210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc98ffffffff0140420f00000000001976a91456def632e67aa11c25ac16a0ee52893c2e5a2b6a88ac00000000",
      "complete": true
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Util Methods";
export const description = "This document contains Utility methods for a Smart Chain.";

# Util

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## createmultisig

**createmultisig nrequired \[ "key", ... ]**

The `createmultisig` method creates a multi-signature address with `n` signature(s) of `m` key(s) required. The method returns a json object with the address and redeemScript.

### Arguments

| Name             | Type                | Description                                                            |
| ---------------- | ------------------- | ---------------------------------------------------------------------- |
| number\_required | (numeric, required) | the number of required signatures out of the `n` key(s) or address(es) |
| "keys"           | (string, required)  | a json array of keys which are addresses or hex-encoded public keys    |
| "key"            | (string)            | an address or hex-encoded public key                                   |

### Response

| Name           | Type     | Description                                           |
| -------------- | -------- | ----------------------------------------------------- |
| "address"      | (string) | the value of the new multisig address                 |
| "redeemScript" | (string) | the string value of the hex-encoded redemption script |

#### 📌 Examples

Command:

```bash
./komodo-cli createmultisig 2 "[\"RJnVEQgucK1iwiRjfTZmreXkF49KgTErDn\",\"RCVyjn9MQ8Tw6YRJnDcsx67kfsmfUgLdfw\"]"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "address": "bZjsy6bt2ZdyHV5hfCNL2HsuA4eV63s5u6",
    "redeemScript": "52210384c0db4f1eaa142a2745742b942f989375dbec32c55310a793225bb5c43cdc9821021f527b7269ab18da85a50b7f45f572e8b017fce476de06cb80a2550ee7d4b11652ae"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createmultisig", "params": [2, ["RJnVEQgucK1iwiRjfTZmreXkF49KgTErDn","RCVyjn9MQ8Tw6YRJnDcsx67kfsmfUgLdfw"]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "address": "bNnKtDC6UuSt5kGJewCQ5b2BhzFK3HTQUV",
      "redeemScript": "522103ae084021ff011b527c34914d2c40148080c09254dd3c7d1f31f32549b53ccd232103bee23783f726ba81b5977473b172497260d9c261b9ef9f5a9dd51c545c8db0ac52ae"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## decodeccopret

**decodeccopret scriptPubKey**

The `decodeccopret` method decodes the OP RETURN data from a CC transaction to output the `EVALCODE` and `function id` of the method that produced the transaction.

#### Finding the OP RETURN Data From a CC Transaction

The OP RETURN data from a CC transaction can be found by following these steps:

*   Decode a transaction produced by a CC module using the method [getrawtransaction](/smart-chains/api/rawtransactions/#getrawtransaction)'s verbose option.
*   Look for the `vout` key; it is an array of jsons
*   Find the json that contains the `scriptPubkey`, and which has the `type:nulldata` key pair
*   Copy the `hex` value from that `scriptPubkey` json
*   This is the hex-string that is expected as the argument for the above method.
*   You can verify that the transaction was produced by a CC module by checking if one of the `vout` json's `scriptPubkey` json has the `type:cryptocondition` key pair

### Arguments

| Name         | Type     | Description                                                                                                            |
| ------------ | -------- | ---------------------------------------------------------------------------------------------------------------------- |
| scriptPubKey | (string) | the hex-string format `scriptPubKey` of the `type` : `nulldata` in the `vout` of a transaction produced by a CC module |

### Response

| Name       | Type                 | Description                                                   |
| ---------- | -------------------- | ------------------------------------------------------------- |
| result     | (string)             | whether the call succeeded                                    |
| OpRets     | (json)               | a json containing the keys `EVALCODE` and `function id`       |
| eval\_code | (hexadecimal number) | the `EVALCODE` of the method that produced the transaction    |
| function   | (string)             | the `function id` of the method that produced the transaction |

#### 📌 Examples

Command:

```bash
./komodo-cli decodeccopret 6a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "OpRets": [
      {
        "eval_code": "0x12",
        "function": "x"
      }
    ]
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "decodeccopret", "params": ["6a2412782103d31479e789014a96ba6dd60d50210045aa8292fe693f293d44615929f04cf57a"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "result": "success",
      "OpRets": [
        {
          "eval_code": "0x12",
          "function": "x"
        }
      ]
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## estimatefee

**estimatefee nblocks**

The `estimatefee` method estimates the approximate fee per kilobyte. The method is needed for a transaction to begin confirmation within `nblocks` blocks.

The value `-1.0` is returned if not enough transactions and blocks have been observed to make an estimate.

### Arguments

| Name    | Type      | Description                                                |
| ------- | --------- | ---------------------------------------------------------- |
| nblocks | (numeric) | the number of blocks within which the fee should be tested |

### Response

| Name | Type      | Description       |
| ---- | --------- | ----------------- |
| n    | (numeric) | the estimated fee |

#### 📌 Examples

Command:

```bash
./komodo-cli estimatefee 6
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0.00019376
  ```
</CollapsibleSection>

## estimatepriority

**estimatepriority nblocks**

The `estimatepriority` method estimates the approximate priority of a zero-fee transaction, when it needs to begin confirmation within `nblocks` blocks.

The value `-1.0` is returned if not enough transactions and blocks have been observed to make an estimate.

### Arguments

| Name    | Type      | Description                                                                       |
| ------- | --------- | --------------------------------------------------------------------------------- |
| nblocks | (numeric) | a statement indicating within how many blocks the transaction should be confirmed |

### Response

| Name | Type      | Description            |
| ---- | --------- | ---------------------- |
| n    | (numeric) | the estimated priority |

#### 📌 Examples

Command:

```bash
./komodo-cli estimatepriority 6
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  -1
  ```
</CollapsibleSection>

## invalidateblock

**invalidateblock "hash"**

The `invalidateblock` method permanently marks a block as invalid, as if it violated a consensus rule.

### Arguments

| Name | Type               | Description                              |
| ---- | ------------------ | ---------------------------------------- |
| hash | (string, required) | the hash of the block to mark as invalid |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli invalidateblock "02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "invalidateblock", "params": ["02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## reconsiderblock

**reconsiderblock "hash"**

The `reconsiderblock` method removes invalidity status of a block and its descendants, reconsidering them for activation. This can be used to undo the effects of the `invalidateblock` method.

### Arguments

| Name | Type               | Description                         |
| ---- | ------------------ | ----------------------------------- |
| hash | (string, required) | the hash of the block to reconsider |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli reconsiderblock "02f51fb2793b0728050c5e983ffed669594e0a2dda01dcb7a68d129fd87436e0"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## txnotarizedconfirmed

**txnotarizedconfirmed txid**

The `txnotarizedconfirmed` method returns information about a transaction's state of confirmation.

If the transaction is on a chain that has Komodo's dPoW security service, the method returns `true` if the transaction is notarized.

If the chain does not have dPoW, the method returned `true` if the confirmation number is greater than `60`.

### Arguments

| Name   | Type               | Description        |
| ------ | ------------------ | ------------------ |
| "txid" | (string, required) | the transaction id |

### Response

| Name     | Type      | Description                                                                                                                                                  |
| -------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "result" | (boolean) | whether the transaction is confirmed, for dPoW-based chains; for non-dPoW chains, the value indicates whether the transaction has `60` or more confirmations |

#### 📌 Examples

Command:

```bash
./komodo-cli txnotarizedconfirmed ce1e3df1fb24ab3301b4032c3a0af466ca03b9365f8c649511bdd72f5519fecb
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": true
  }
  ```
</CollapsibleSection>

## validateaddress

**validateaddress "komodoaddress"**

The `validateaddress` method returns information about the given address.

### Arguments

| Name      | Type               | Description             |
| --------- | ------------------ | ----------------------- |
| "address" | (string, required) | the address to validate |

### Response

| Name           | Type      | Description                                                                               |
| -------------- | --------- | ----------------------------------------------------------------------------------------- |
| "isvalid"      | (boolean) | indicates whether the address is valid. If it is not, this is the only property returned. |
| "address"      | (string)  | the address validated                                                                     |
| "scriptPubKey" | (string)  | the hex encoded scriptPubKey generated by the address                                     |
| "ismine"       | (boolean) | indicates whether the address is yours                                                    |
| "isscript"     | (boolean) | whether the key is a script                                                               |
| "pubkey"       | (string)  | the hex value of the raw public key                                                       |
| "iscompressed" | (boolean) | whether the address is compressed                                                         |
| "account"      | (string)  | DEPRECATED the account associated with the address; "" is the default account             |

#### 📌 Examples

Command:

```bash
./komodo-cli validateaddress "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "isvalid": true,
    "address": "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7",
    "scriptPubKey": "76a9142cd2a4e3d1c2738ee4fce61e73ea822dcaacb9b488ac",
    "segid": 9,
    "ismine": true,
    "iswatchonly": false,
    "isscript": false,
    "pubkey": "03c376b00b3a2ae43b8bf103a6c6962b241de684383301fe628a460b68a79ac1d8",
    "iscompressed": true,
    "account": ""
  }
  ```
</CollapsibleSection>

## verifymessage

**verifymessage "address" "signature" "message"**

The `verifymessage` method verifies a signed message.

<Note>
  See also <b>signmessage</b>.
</Note>

### Arguments

| Name        | Type               | Description                                              |
| ----------- | ------------------ | -------------------------------------------------------- |
| "address"   | (string, required) | the address to use for the signature                     |
| "signature" | (string, required) | the signature provided by the signer in base 64 encoding |
| "message"   | (string, required) | the message that was signed                              |

### Response

| Name       | Type      | Description                                 |
| ---------- | --------- | ------------------------------------------- |
| true/false | (boolean) | indicates whether the signature is verified |

#### 📌 Examples

Create the signature:

Command:

```bash
./komodo-cli signmessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "my message"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=
  ```
</CollapsibleSection>

Verify the signature:

Command:

```bash
./komodo-cli verifymessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=" "my message"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

## z\_validateaddress

**z\_validateaddress "zaddr"**

The `z_validateaddress` method returns information about the given z address.

### Arguments

| Name    | Type               | Description               |
| ------- | ------------------ | ------------------------- |
| "zaddr" | (string, required) | the z address to validate |

### Response

| Name              | Type      | Description                                                                        |
| ----------------- | --------- | ---------------------------------------------------------------------------------- |
| "isvalid"         | (boolean) | indicates whether the address is valid; if not, this is the only property returned |
| "address"         | (string)  | the z address validated                                                            |
| "ismine"          | (boolean) | indicates if the address is yours or not                                           |
| "payingkey"       | (string)  | the hex value of the paying key, a\_pk                                             |
| "transmissionkey" | (string)  | the hex value of the transmission key, pk\_enc                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli z_validateaddress "zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "isvalid": true,
    "address": "ztdChvxs2Z97X7qeBwsnRLbxva1ZVgWhFWZxZTA5bC8XLt9RHF8uXn16MWCU8DhKEt4gTtKqQwzsrk85f5tThWMNoYds2oX",
    "payingkey": "d9c09cb974fbe0bf7e36a2318b46396c5112511f90749531428936867d83bd92",
    "transmissionkey": "5ce3250912758cbb591e3d585ef110992f25ed7694b88f55315b060698b75404",
    "ismine": true
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Wallet Methods";
export const description = "This document contains Wallet methods for a Smart Chain.";

# Wallet

The following RPC calls interact with the `komodod` software, and are made available through the `komodo-cli` software.

## addmultisigaddress

**addmultisigaddress nrequired \[ "key", ... ] ( "account" )**

The `addmultisigaddress` method adds a multi-signature address to the wallet, where `nrequired` indicates the number of keys (out of the total provided) required to execute a transaction.

The keys function as signatures, allowing multiple parties or entities to manage an account. Each key in the array can be an address or a hex-encoded public key.

<Note>
  DEPRECATED: If <b>account</b> is specified, the method assigns the
  multi-signature address to that account.
</Note>

### Arguments

| Name         | Type                | Description                                                                                                                                              |
| ------------ | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| nrequired    | (numeric, required) | the number of required keys (out of the `n` submitted)                                                                                                   |
| "keysobject" | (string, required)  | a json array of addresses or hex-encoded public keys                                                                                                     |
| "address"    | (string)            | the address or hex-encoded public key                                                                                                                    |
| "account"    | (string, optional)  | DEPRECATED: if provided, "account" MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name      | Type     | Description                         |
| --------- | -------- | ----------------------------------- |
| "address" | (string) | an address associated with the keys |

#### 📌 Examples

Add a multisig address from 2 addresses:

Command:

```bash
./komodo-cli addmultisigaddress 2 '["RSWwtqsNr9mW21UXRm6Lz4AzQnj4pVzzkp","RW8d8EChHTooVbwF3reqHYgkzWCnJFLXgh"]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  bLz2YZ7Mm8MgPc9mPNiFqhjFPbFZU4WUD5
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "addmultisigaddress", "params": [2, ["RL4CuA2MSAbBiqJKQEr2TKnKT2fSwK99mG","RBYVFCxpJdLgvUixhguxzuH1TJpoNLYCJ6"]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "bNdB9fAt9HmQD8CmBjkY6QwmrNSBrbzsgA",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## backupwallet

**backupwallet "destination"**

The `backupwallet` method safely copies the `wallet.dat` file to the indicated destination. The `destination` input accepts only alphanumeric characters.

<Note>
  This method requires that the coin daemon have the <b>exportdir</b> runtime
  parameter enabled.
</Note>

### Arguments

| Name          | Type               | Description                                                                                                                                         |
| ------------- | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| "destination" | (string, required) | the destination filename, saved in the directory set by the [exportdir](/smart-chains/setup/common-runtime-parameters/#exportdir) runtime parameter |

### Response

| Name   | Type     | Description                           |
| ------ | -------- | ------------------------------------- |
| "path" | (string) | the full path of the destination file |

#### 📌 Examples

```bash
./komodo-cli backupwallet "mybackupdata"

/home/myusername/myexportdir/mybackupdata
```

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "backupwallet", "params": ["backupdata"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "/home/myusername/Desktop/backupdata",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## dumpprivkey

**dumpprivkey "address"**

The `dumpprivkey` method reveals the private key corresponding to the indicated `address`.

<Note>
  See also <b>importprivkey</b>.
</Note>

### Arguments

| Name      | Type               | Description                     |
| --------- | ------------------ | ------------------------------- |
| "address" | (string, required) | the address for the private key |

### Response

| Name   | Type     | Description     |
| ------ | -------- | --------------- |
| "data" | (string) | the private key |

#### 📌 Examples

Command:

```bash
./komodo-cli dumpprivkey "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  DONOTUSExxxxxxxxxxxxxxxxxxxx4KkCmRnnSg7iXvAUjoYivC8K
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "dumpprivkey", "params": ["RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "DONOTUSExxxxxxxxxxxxxxxxxxxx4KkCmRnnSg7iXvAUjoYivC8K",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## dumpwallet

**dumpwallet "filename"**

The `dumpwallet` method dumps all transparent-address wallet keys into a file, using a human-readable format.

Overwriting an existing file is not permitted. The `destination` parameter accepts only alphanumeric characters.

<Note>
  This method requires that the coin daemon have the
  [exportdir](/smart-chains/setup/common-runtime-parameters/#exportdir) runtime
  parameter enabled.
</Note>

### Arguments

| Name       | Type               | Description                                                                                                                          |
| ---------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------ |
| "filename" | (string, required) | the filename, saved in the folder set by the [exportdir](/smart-chains/setup/common-runtime-parameters/#exportdir) runtime parameter |

### Response

| Name   | Type     | Description                           |
| ------ | -------- | ------------------------------------- |
| "path" | (string) | the full path of the destination file |

#### 📌 Examples

Command:

```bash
./komodo-cli dumpwallet "test"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  /home/myusername/myexportdir/test
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "dumpwallet", "params": ["test"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "/home/myusername/myexportdir/test",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## encryptwallet

**encryptwallet "passphrase"**

<Note type="warning">
  Using the `encryptwallet` method will shutdown the Komodo daemon (`komodod`).
</Note>

<Note>
  This feature is available only on chains where `-ac_public` is enabled. Chains
  that feature private transactions cannot use this feature.
</Note>

The `encryptwallet` method encrypts the wallet with the indicated `passphrase`.

For more information, please see these instructions: [Encrypt Komodo's wallet.dat File](https://docs.komodoplatform.com/komodo/encrypt-wallet.html)

This method is for first-time encryption only. After the first encryption, any calls that interact with private keys will require the passphrase via [walletpassphrase](/smart-chains/api/wallet/#walletpassphrase) prior to calling the corresponding method. This includes methods that create a transaction, dump a private key for an address, sign a transaction, etc.

### Arguments

| Name       | Type     | Description                                                                                           |
| ---------- | -------- | ----------------------------------------------------------------------------------------------------- |
| passphrase | (string) | the passphrase for wallet encryption; the passphrase must be at least 1 character, but should be many |

### Response

| Text Response                                                                                                                                |
| -------------------------------------------------------------------------------------------------------------------------------------------- |
| wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup. |

#### 📌 Examples

##### Encrypt your wallet

Command:

```bash
./komodo-cli encryptwallet "mypassphrase"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
  ```
</CollapsibleSection>

##### Unlock the wallet for 60 seconds

Command:

```bash
./komodo-cli walletpassphrase "mypassphrase" 60
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (disabled)
  ```
</CollapsibleSection>

##### Lock the wallet again by removing the passphrase

Command:

```bash
./komodo-cli walletlock
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (No response)
  ```
</CollapsibleSection>

As a json rpc call:

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "encryptwallet", "params": ["mypassphrase"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  {
      "result" : "wallet encrypted; Komodo server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.",
      "error":null,
      "id":"curltest"
  }
  ```
</CollapsibleSection>

## getaccount

**getaccount "address"**

The `getaccount` method returns the account associated with the given address.

### Arguments

| Name      | Type               | Description |
| --------- | ------------------ | ----------- |
| "address" | (string, required) | the address |

### Response

| Name          | Type     | Description         |
| ------------- | -------- | ------------------- |
| "accountname" | (string) | the account address |

#### 📌 Examples

Command:

```bash
./komodo-cli getaccount "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccount", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## getaccountaddress

**getaccountaddress "account"**

<Note>DEPRECATED</Note>

The `getaccountaddress` method returns the current address for receiving payments to this account.

### Arguments

| Name      | Type               | Description                                                                                                           |
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name      | Type     | Description         |
| --------- | -------- | ------------------- |
| "address" | (string) | the account address |

#### 📌 Examples

Command:

```bash
./komodo-cli getaccountaddress
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccountaddress", "params": ["myaccount"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## getaddressesbyaccount

**getaddressesbyaccount "account"**

<Note>DEPRECATED</Note>

The `getaddressesbyaccount` method returns the list of addresses for the given `account`.

### Arguments

| Name      | Type               | Description                                                                                                           |
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

### Response

| Name      | Type     | Description                                  |
| --------- | -------- | -------------------------------------------- |
| "address" | (string) | an address associated with the given account |

#### 📌 Examples

Command:

```bash
./komodo-cli getaddressesbyaccount "tabby"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressesbyaccount", "params": ["tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## getbalance

**getbalance ( "account" minconf includeWatchonly )**

The `getbalance` method returns the server's total available balance.

<Note>
  The <b>account</b> input is deprecated.
</Note>

### Arguments

| Name             | Type                            | Description                                                                            |
| ---------------- | ------------------------------- | -------------------------------------------------------------------------------------- |
| "account"        | (string, optional)              | DEPRECATED if provided, it MUST be set to the empty string `""` or to the string `"*"` |
| minconf          | (numeric, optional, default=1)  | only include transactions confirmed at least this many times                           |
| includeWatchonly | (bool, optional, default=false) | also include balance in watchonly addresses (see `importaddress`)                      |

### Response

| Name   | Type      | Description      |
| ------ | --------- | ---------------- |
| amount | (numeric) | the total amount |

#### 📌 Examples

The total amount in the wallet:

Command:

```bash
./komodo-cli getbalance

```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.05000000
  ```
</CollapsibleSection>

The total amount in the wallet where at least five blocks are confirmed:

Command:

```bash
./komodo-cli getbalance "*" 5
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.05000000
  ```
</CollapsibleSection>

As a json rpc call:

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getbalance", "params": ["", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 10.09234883,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getbalance64

**getbalance64**

<Note>
  This method is part of the new <b>ac\_staked</b> functionality.
</Note>

The `getbalance64` method is used only on Smart Chains that are utilizing the `ac_staked` functionality. On KMD-based Proof-of-Stake (PoS) Smart Chains, all staked coins are placed into one of 64 segments (`segid`'s'). The `getbalance64` method returns the balance of coins in each `segid`. For further information, please reach out to our support team.

## getnewaddress

**getnewaddress ( "account" )**

The `getnewaddress` method returns a new address for receiving payments.

### Arguments

| Name      | Type               | Description                                                                                                                                                  |
| --------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "account" | (string, optional) | DEPRECATED: If provided, the account MUST be set to the empty string `""` to represent the default account; passing any other string will result in an error |

### Response

| Name      | Type     | Description     |
| --------- | -------- | --------------- |
| "address" | (string) | the new address |

#### 📌 Examples

Command:

```bash
./komodo-cli getnewaddress
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  "RYDuQ2oQCCz1PQNxUQTDAaRinWKiCoT2E6"
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnewaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "R9iQRG6J9eY8SwaCcYZ65QJxg5UhgLC5Rx",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getrawchangeaddress

**getrawchangeaddress**

The `getrawchangeaddress` returns a new address that can be used to receive change.

<Note>This is for use with raw transactions, NOT normal use.</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name      | Type     | Description |
| --------- | -------- | ----------- |
| "address" | (string) | the address |

#### 📌 Examples

Command:

```bash
./komodo-cli getrawchangeaddress
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  RS8oqzbjShKhftmuk2RpRmHH2hTAukp6yP
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawchangeaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getreceivedbyaccount

**getreceivedbyaccount "account" ( minconf )**

<Note>DEPRECATED</Note>

The <b>getreceivedbyaccount</b> method returns the total amount received by <b>account</b> in transactions with at least <b>minconf</b> confirmations.

### Arguments

| Name      | Type                           | Description                                                                                                           |
| --------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "account" | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times                                                          |

### Response

| Name   | Type      | Description                                |
| ------ | --------- | ------------------------------------------ |
| amount | (numeric) | the total amount received for this account |

#### 📌 Examples

Command:

```bash
./komodo-cli getreceivedbyaccount ""
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## getreceivedbyaddress

**getreceivedbyaddress "address" ( minconf )**

The `getreceivedbyaddress` method returns the total amount received by the given `address` in transactions with at least `minconf` confirmations.

### Arguments

| Name      | Type                           | Description                                                  |
| --------- | ------------------------------ | ------------------------------------------------------------ |
| "address" | (string, required)             | the address for transactions                                 |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Response

| Name   | Type      | Description                                                    |
| ------ | --------- | -------------------------------------------------------------- |
| amount | (numeric) | the total amount of the relevant coin received at this address |

#### 📌 Examples

Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.0500000
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" 0
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.0500000
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli getreceivedbyaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" 6
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.0500000
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getreceivedbyaddress", "params": ["RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 0,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## gettransaction

**gettransaction "txid" ( includeWatchonly )**

The `gettransaction` method queries detailed information about transaction `txid`. This command applies only to `txid`'s that are in the user's local wallet.

### Arguments

| Name               | Type                            | Description                                                                                                       |
| ------------------ | ------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| "txid"             | (string, required)              | the transaction id                                                                                                |
| "includeWatchonly" | (bool, optional, default=false) | whether to include watchonly addresses in the returned balance calculation and in the `details[]` returned values |

### Response

| Name                     | Type                    | Description                                                                                                              |
| ------------------------ | ----------------------- | ------------------------------------------------------------------------------------------------------------------------ |
| "amount"                 | (numeric)               | the transaction amount                                                                                                   |
| "confirmations"          | (numeric)               | a confirmation number that is aware of the dPoW security service                                                         |
| "rawconfirmations"       | (numeric)               | the raw confirmations (number of blocks on top of this transaction's block)                                              |
| "blockhash"              | (string)                | the block hash                                                                                                           |
| "blockindex"             | (numeric)               | the block index                                                                                                          |
| "blocktime"              | (numeric)               | the time in seconds since epoch (1 Jan 1970 GMT)                                                                         |
| "txid"                   | (string)                | the transaction id                                                                                                       |
| "time"                   | (numeric)               | the transaction time in seconds since epoch (1 Jan 1970 GMT)                                                             |
| "timereceived"           | (numeric)               | the time received in seconds since epoch (1 Jan 1970 GMT)                                                                |
| "details" : \[ ... ]     | (array)                 |                                                                                                                          |
| "account"                | (string)                | DEPRECATED the account name involved in the transaction; can be "" for the default account                               |
| "address"                | (string)                | the address involved in the transaction                                                                                  |
| "category"               | (string)                | the category - either `send` or `receive`                                                                                |
| "amount"                 | (numeric)               | the amount                                                                                                               |
| "vout"                   | (numeric)               | the vout value                                                                                                           |
| "vjoinsplit" : \[ ... ]  | (array of json objects) |                                                                                                                          |
| "anchor"                 | (string)                | merkle root of note commitment tree                                                                                      |
| "nullifiers" : \[ ... ]  | (array of strings)      | {/* Need these? If not, let's leave a comment here saying why they're not needed, so that next time we don't forget. */} |
| "hex"                    | (string)                |                                                                                                                          |
| "commitments" : \[ ... ] | (array of strings)      |                                                                                                                          |
| "hex"                    | (string)                |                                                                                                                          |
| "macs" : \[ ... ]        | (array of strings)      |                                                                                                                          |
| "hex"                    | (string)                |                                                                                                                          |
| "vpub\_old"              | (numeric)               | the amount removed from the transparent value pool                                                                       |
| "vpub\_new"              | (numeric)               | the amount added to the transparent value pool                                                                           |
| "hex"                    | (string)                | transaction data translated into hex                                                                                     |

#### 📌 Examples

Command:

```bash
./komodo-cli gettransaction "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "amount": 0.000001,
    "rawconfirmations": 14,
    "confirmations": 1,
    "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
    "blockindex": 1,
    "blocktime": 1552585479,
    "expiryheight": 1268793,
    "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
    "walletconflicts": [],
    "time": 1552585444,
    "timereceived": 1552585444,
    "vjoinsplit": [],
    "details": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "size": 254
      }
    ],
    "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli gettransaction "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a" true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "amount": 0.000001,
    "rawconfirmations": 14,
    "confirmations": 1,
    "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
    "blockindex": 1,
    "blocktime": 1552585479,
    "expiryheight": 1268793,
    "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
    "walletconflicts": [],
    "time": 1552585444,
    "timereceived": 1552585444,
    "vjoinsplit": [],
    "details": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "size": 254
      }
    ],
    "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettransaction", "params": ["34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "amount": 0.000001,
      "rawconfirmations": 19,
      "confirmations": 1,
      "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
      "blockindex": 1,
      "blocktime": 1552585479,
      "expiryheight": 1268793,
      "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
      "walletconflicts": [],
      "time": 1552585444,
      "timereceived": 1552585444,
      "vjoinsplit": [],
      "details": [
        {
          "account": "",
          "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
          "category": "receive",
          "amount": 0.000001,
          "vout": 1,
          "size": 254
        }
      ],
      "hex": "0400008085202f8901310bd18e1c5de58eed0482e13c855763e83fadb19c1abd330e62c07a13370edf1b0000006a47304402207a607ff3b479317dd41842f024380994ec7e4353c0cb33bff32bc795cfa8a7c202205ff036aeee1760f0677d22155be8210b78ffffb3b03f568304278a914fe6e0d1012103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8feffffff0254738e1d00000000232103336ca9db27cb6e882830e20dc525884e27dc94d557a5e68b972a5cbf9e8c62a8ac64000000000000001976a914522bd057d4304d6204187c99e6dece0c29bdbe9788acce928a5c395c13000000000000000000000000"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getunconfirmedbalance

**getunconfirmedbalance**

The `getunconfirmedbalance` method returns the server's total unconfirmed balance.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli getunconfirmedbalance
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  10.05000000
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getunconfirmedbalance", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 10.05,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## getwalletinfo

**getwalletinfo**

The `getwalletinfo` method returns an object containing various information about the wallet state.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name                   | Type      | Description                                                                                                                            |
| ---------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------- |
| "walletversion"        | (numeric) | the wallet version                                                                                                                     |
| "balance"              | (numeric) | the total confirmed balance of the wallet                                                                                              |
| "unconfirmed\_balance" | (numeric) | the total unconfirmed balance of the wallet                                                                                            |
| "immature\_balance"    | (numeric) | the total immature balance of the wallet                                                                                               |
| "txcount"              | (numeric) | the total number of transactions in the wallet                                                                                         |
| "keypoololdest"        | (numeric) | the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool                                                |
| "keypoolsize"          | (numeric) | how many new keys are pre-generated                                                                                                    |
| "unlocked\_until"      | (numeric) | the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked |
| "paytxfee"             | (numeric) | the transaction fee configuration, given as the relevant COIN per KB                                                                   |

#### 📌 Examples

Command:

```bash
./komodo-cli getwalletinfo
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "walletversion": 60000,
    "balance": 10.01334496,
    "unconfirmed_balance": 0.0,
    "immature_balance": 0.0001,
    "txcount": 106,
    "keypoololdest": 1536889653,
    "keypoolsize": 101,
    "paytxfee": 0.0
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "walletversion": 60000,
      "balance": 10.01334496,
      "unconfirmed_balance": 0,
      "immature_balance": 0.0001,
      "txcount": 106,
      "keypoololdest": 1536889653,
      "keypoolsize": 101,
      "paytxfee": 0
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## importaddress

**importaddress "address" ( "label" rescan )**

The `importaddress` method adds an address or script (in hex) that can be watched as if it were in your wallet, although it cannot be used to spend.

<Note>
  This call can take an increased amount of time to complete if rescan is true.
</Note>

### Arguments

| Name      | Type                              | Description                        |
| --------- | --------------------------------- | ---------------------------------- |
| "address" | (string, required)                | the address to watch               |
| "label"   | (string, optional, default="")    | an optional label                  |
| rescan    | (boolean, optional, default=true) | rescan the wallet for transactions |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Import an address with rescan:

Command:

```bash
./komodo-cli importaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli importaddress "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN" "testing" false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importaddress", "params": ["R9z796AehK5b6NCPeVkGUHSpJnawerf8oP", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## importprivkey

**importkey "komodoprivkey" ( "label" rescan )**

The `importprivkey` method adds a private key to your wallet.

<Note>
  This call can take minutes to complete if <b>rescan</b> is true.
</Note>

<Note>
  See also <b>dumpprivkey</b>.
</Note>

### Arguments

| Name      | Type                              | Description                                                                |
| --------- | --------------------------------- | -------------------------------------------------------------------------- |
| "privkey" | (string, required)                | the private key (see [dumpprivkey](/smart-chains/api/wallet/#dumpprivkey)) |
| "label"   | (string, optional, default="")    | an optional label                                                          |
| rescan    | (boolean, optional, default=true) | rescan the wallet for transactions                                         |
| block     | (integer, optional)               | block height to rescan from                                                |

### Response

| Name      | Type     | Description        |
| --------- | -------- | ------------------ |
| addresses | (string) | the public address |

#### 📌 Examples

Command:

```bash
./komodo-cli importprivkey "DONOTUSExxxxxxxxxxxxxxxxxxxxj4Xu9jjinhLpffhdtoKg5gar2"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  R9z796AehK5b6NCPeVkGUHSpJnawerf8oP
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli importprivkey "DONOTUSExxxxxxxxxxxxxxxxxxxxj4Xu9jjinhLpffhdtoKg5gar2" "testing" false
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  RFtA32tttJm89VWRWPCQtV8bkQ1FvE1MBG
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli importprivkey "DONOTUSExxxxxxxxxxxxxxxxxxxxj4Xu9jjinhLpffhdtoKg5gar2" "testing" true 1762762
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  RFtA32tttJm89VWRWPCQtV8bkQ1FvE1MBG
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importprivkey", "params": ["UwibHKsYfiM19BXQmcUwAfw331GzGQK8aoPqqYEbyoPrzc2965nE", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "RC5qhqgYRzf3dUXGAst9ah5LcuLjmMgT64",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## importwallet

**importwallet "filename"**

The `importwallet` method imports transparent-address keys from a wallet-dump file (see [dumpwallet](/smart-chains/api/wallet/#dumpwallet)).

### Arguments

| Name       | Type               | Description     |
| ---------- | ------------------ | --------------- |
| "filename" | (string, required) | the wallet file |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli importwallet "path/to/exportdir/nameofbackup"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importwallet", "params": ["path/to/exportdir/nameofbackup"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## keypoolrefill

**keypoolrefill ( newsize )**

The `keypoolrefill` method refills the keypool.

### Arguments

| Name    | Type                             | Description          |
| ------- | -------------------------------- | -------------------- |
| newsize | (numeric, optional, default=100) | the new keypool size |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli keypoolrefill
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli keypoolrefill 100
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "keypoolrefill", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listaccounts

**listaccounts ( minconf includeWatchonly )**

<Note>DEPRECATED</Note>

The <b>listaccounts</b> method returns an object that has account names as keys and account balances as values.

### Arguments

| Name             | Type                            | Description                                                     |
| ---------------- | ------------------------------- | --------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)  | only include transactions with at least this many confirmations |
| includeWatchonly | (bool, optional, default=false) | include balances in watchonly addresses (see 'importaddress')   |

### Response

| Name              | Type      | Description                                                                               |
| ----------------- | --------- | ----------------------------------------------------------------------------------------- |
| "account\_number" | (numeric) | the property name is the account name, and the value is the total balance for the account |

#### 📌 Examples

Command:

```bash
./komodo-cli listaccounts 6
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## listaddressgroupings

**listaddressgroupings**

The `listaddressgroupings` method lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name       | Type               | Description              |
| ---------- | ------------------ | ------------------------ |
| "address", | (string)           | the address              |
| amount,    | (numeric)          | the amount               |
| "account"  | (string, optional) | (DEPRECATED) the account |

#### 📌 Examples

Command:

```bash
./komodo-cli listaddressgroupings
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  (note how there are two separate, unique groupings of addresses)

  ```bash
  [
    [
      [
        "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
        9.99304496
      ],
      [
        "RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7",
        0.00040000,
        ""
      ],
      [
        "RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN",
        0.01000000
      ]
    ],
    [
      [
        "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
        0.00990000,
        ""
      ]
    ]
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaddressgroupings", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      [
        ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", 9.99304496],
        ["RDNC9mLrN48pVGDQ5jSoPb2nRsUPJ5t2R7", 0.0004, ""],
        ["RJSDZjp7kjBNhHsbECDE1jwYNK7af41pZN", 0.01]
      ],
      [["RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs", 0.0099, ""]]
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listlockunspent

**listlockunspent**

The `listlockunspent` method returns a list of temporarily non-spendable outputs.

<Note>
  See the <b>lockunspent</b> call to lock and unlock transactions for spending.
</Note>

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type      | Description               |
| ------ | --------- | ------------------------- |
| "txid" | (string)  | the transaction id locked |
| "vout" | (numeric) | the vout value            |

#### 📌 Examples

Command:

```bash
./komodo-cli listlockunspent
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "txid": "d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd",
      "vout": 0
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listlockunspent", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "txid": "d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd",
        "vout": 0
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listreceivedbyaccount

**listreceivedbyaccount ( minconf includeempty includeWatchonly )**

<Note type="warning">DEPRECATED</Note>

The `listreceivedbyaccount` method lists balances by account.

### Arguments

| Name             | Type                               | Description                                                      |
| ---------------- | ---------------------------------- | ---------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)     | the minimum number of confirmations before payments are included |
| includeempty     | (boolean, optional, default=false) | whether to include accounts that haven't received any payments   |
| includeWatchonly | (bool, optional, default=false)    | whether to include watchonly addresses (see 'importaddress')     |

### Response

| Name                | Type      | Description                                                                                                         |
| ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------- |
| "involvesWatchonly" | (bool)    | only returned if the imported addresses were involved in the transaction                                            |
| "account"           | (string)  | the account name of the receiving account                                                                           |
| "amount"            | (numeric) | the total amount received by addresses with this account                                                            |
| "confirmations"     | (numeric) | a confirmation number that is aware of the dPoW security service                                                    |
| "rawconfirmations"  | (numeric) | the raw confirmations of the most recent transaction included (number of blocks on top of this transaction's block) |

#### 📌 Examples

Command:

```bash
./komodo-cli listreceivedbyaccount
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 21,
      "confirmations": 21
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli listreceivedbyaccount 6 true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 23,
      "confirmations": 23
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaccount", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "account": "",
        "amount": 0.000001,
        "rawconfirmations": 24,
        "confirmations": 24
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listreceivedbyaddress

**listreceivedbyaddress ( minconf includeempty includeWatchonly)**

The `listreceivedbyaddress` method lists balances by receiving address.

### Arguments

| Name             | Type                               | Description                                                      |
| ---------------- | ---------------------------------- | ---------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)     | the minimum number of confirmations before payments are included |
| includeempty     | (numeric, optional, default=false) | whether to include addresses that haven't received any payments  |
| includeWatchonly | (bool, optional, default=false)    | whether to include watchonly addresses (see 'importaddress')     |

### Response

| Name                | Type      | Description                                                                                                         |
| ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------- |
| "involvesWatchonly" | (bool)    | only returned if imported addresses were involved in transaction                                                    |
| "address"           | (string)  | the receiving address                                                                                               |
| "account"           | (string)  | DEPRECATED the account of the receiving address; the default account is ""                                          |
| "amount"            | (numeric) | the total amount received by the address                                                                            |
| "confirmations"     | (numeric) | a confirmation number that is aware of the dPoW security service                                                    |
| "rawconfirmations"  | (numeric) | the raw confirmations of the most recent transaction included (number of blocks on top of this transaction's block) |

#### 📌 Examples

Command:

```bash
./komodo-cli listreceivedbyaddress
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 40,
      "confirmations": 40,
      "txids": [
        "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
      ]
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli listreceivedbyaddress 6 true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
      "account": "",
      "amount": 0.000001,
      "rawconfirmations": 41,
      "confirmations": 41,
      "txids": [
        "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
      ]
    },
    {
      "address": "RSMmyzk2cZ7xJdDx62wAZbvM5dzxH8CPqv",
      "account": "",
      "amount": 0.0,
      "rawconfirmations": 0,
      "confirmations": 0,
      "txids": []
    },
    {
      "address": "RVErfGzpdNSLrg19FVAuet6nXGDaWnqiVc",
      "account": "",
      "amount": 0.0,
      "rawconfirmations": 0,
      "confirmations": 0,
      "txids": []
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaddress", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "account": "",
        "amount": 0.000001,
        "rawconfirmations": 41,
        "confirmations": 41,
        "txids": [
          "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a"
        ]
      },
      {
        "address": "RSMmyzk2cZ7xJdDx62wAZbvM5dzxH8CPqv",
        "account": "",
        "amount": 0.0,
        "rawconfirmations": 0,
        "confirmations": 0,
        "txids": []
      },
      {
        "address": "RVErfGzpdNSLrg19FVAuet6nXGDaWnqiVc",
        "account": "",
        "amount": 0.0,
        "rawconfirmations": 0,
        "confirmations": 0,
        "txids": []
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listsinceblock

**listsinceblock ( "blockhash" target-confirmations includeWatchonly )**

The `listsinceblock` method queries all transactions in blocks since block `blockhash`, or all transactions if `blockhash` is omitted.

### Arguments

| Name                 | Type                            | Description                                                            |
| -------------------- | ------------------------------- | ---------------------------------------------------------------------- |
| "blockhash"          | (string, optional)              | the block hash from which to list transactions                         |
| target-confirmations | (numeric, optional)             | the confirmations required (must be 1 or more)                         |
| includeWatchonly     | (bool, optional, default=false) | include transactions to watchonly addresses (see also 'importaddress') |

### Response

| Name               | Type      | Description                                                                                                                                                                                                        |
| ------------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "transactions":    |           |                                                                                                                                                                                                                    |
| "account"          | (string)  | DEPRECATED the account name associated with the transaction; will be "" for the default account                                                                                                                    |
| "address"          | (string)  | the address of the transaction (not present for move transactions -- category = move)                                                                                                                              |
| "category"         | (string)  | the transaction category; `send` has negative amounts, `receive` has positive amounts                                                                                                                              |
| "amount"           | (numeric) | the amount of the relevant currency -- negative for the `send` category, and for the `move` category for moves outbound. It is positive for the `receive` category, and for the `move` category for inbound funds. |
| "vout"             | (numeric) | the vout value                                                                                                                                                                                                     |
| "fee"              | (numeric) | the amount of the fee; this value is negative and only available for the `send` category of transactions                                                                                                           |
| "confirmations"    | (numeric) | a confirmation number that is aware of the dPoW security service                                                                                                                                                   |
| "rawconfirmations" | (numeric) | the raw confirmations of the transaction; available for `send` and `receive` category of transactions (number of blocks on top of this transaction's block)                                                        |
| "blockhash"        | (string)  | the block hash containing the transaction; available for the `send` and `receive` categories of transactions                                                                                                       |
| "blockindex"       | (numeric) | the block index containing the transaction; available for the `send` and `receive` categories of transactions                                                                                                      |
| "blocktime"        | (numeric) | the block time in seconds since epoch (1 Jan 1970 GMT)                                                                                                                                                             |
| "txid"             | (string)  | the transaction id; available for `send` and `receive` categories of transactions                                                                                                                                  |
| "time"             | (numeric) | the transaction time in seconds since epoch (Jan 1 1970 GMT)                                                                                                                                                       |
| "timereceived"     | (numeric) | the time received in seconds since epoch (Jan 1 1970 GMT); available for `send` and `receive` category of transactions                                                                                             |
| "comment"          | (string)  | whether a comment is associated with the transaction                                                                                                                                                               |
| "to"               | (string)  | whether a 'to' comment is associated with the transaction                                                                                                                                                          |
| "lastblock"        | (string)  | the hash of the last block                                                                                                                                                                                         |

#### 📌 Examples

Command:

```bash
./komodo-cli listsinceblock
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "transactions": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "rawconfirmations": 44,
        "confirmations": 44,
        "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
        "blockindex": 1,
        "blocktime": 1552585479,
        "expiryheight": 1268793,
        "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
        "walletconflicts": [],
        "time": 1552585444,
        "timereceived": 1552585444,
        "vjoinsplit": [],
        "size": 254
      }
    ],
    "lastblock": "05686392a3011a180988246b3b0343bc4eec992c101d2e651c6ee786af1b2fb5"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli listsinceblock "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327" 6
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "transactions": [
      {
        "account": "",
        "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
        "category": "receive",
        "amount": 0.000001,
        "vout": 1,
        "rawconfirmations": 45,
        "confirmations": 45,
        "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
        "blockindex": 1,
        "blocktime": 1552585479,
        "expiryheight": 1268793,
        "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
        "walletconflicts": [],
        "time": 1552585444,
        "timereceived": 1552585444,
        "vjoinsplit": [],
        "size": 254
      }
    ],
    "lastblock": "08db1a09b32ebb55f026c41d5555281ebeae4c9eb8b36e88db62b6f1d7fd12d1"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listsinceblock", "params": ["029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "transactions": [
        {
          "account": "",
          "address": "RGmfyV6GLkNXTSM5XaxtpwPrw4R7iiHEa2",
          "category": "receive",
          "amount": 0.000001,
          "vout": 1,
          "rawconfirmations": 46,
          "confirmations": 46,
          "blockhash": "07eb80d845eae646a95351a47a1b54964610f3caf4d4ff53750d0de66fbfc525",
          "blockindex": 1,
          "blocktime": 1552585479,
          "expiryheight": 1268793,
          "txid": "34efdb82ec718dede04feccecdc44f119cb7263f11c56ec3d7bf6234c9d0e27a",
          "walletconflicts": [],
          "time": 1552585444,
          "timereceived": 1552585444,
          "vjoinsplit": [],
          "size": 254
        }
      ],
      "lastblock": "01b4ce6c4659138de1a7a67e8dac354b5acc3a998145effedbfec7ef41a2cec6"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listtransactions

**listtransactions ( "account" count from includeWatchonly )**

The `listtransactions` method returns up to `count` most recent transactions skipping the first `from` transactions for `account`.

### Arguments

| Name             | Type                            | Description                                                       |
| ---------------- | ------------------------------- | ----------------------------------------------------------------- |
| "account"        | (string, optional)              | DEPRECATED the account name; should be `"*"`                      |
| count            | (numeric, optional, default=10) | the number of transactions to return                              |
| from             | (numeric, optional, default=0)  | the number of transactions to skip                                |
| includeWatchonly | (bool, optional, default=false) | include transactions to watchonly addresses (see `importaddress`) |

### Response

| Name               | Type      | Description                                                                                                                                                                                          |           |                                                                                                                                                                                                                                           |
| ------------------ | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"          | (string)  | DEPRECATED the account name associated with the transaction; it will be "" for the default account                                                                                                   |           |                                                                                                                                                                                                                                           |
| "address"          | (string)  | the address of the transaction; not present for move transactions (category = move)                                                                                                                  |           |                                                                                                                                                                                                                                           |
| "category"         | (string)  | The transaction category. This property can be `send`                                                                                                                                                | `receive` | `move`. `move` is a local (off blockchain) transaction between accounts -- not associated with an address, transaction id, or block. `send` and `receive` transactions are associated with an address, transaction id, and block details. |
| "amount"           | (numeric) | The amount. This value is negative for the `send` category, and for the `move` category for moves outbound. It is positive for the `receive` category and for the `move` category for inbound funds. |           |                                                                                                                                                                                                                                           |
| "vout"             | (numeric) | the vout value                                                                                                                                                                                       |           |                                                                                                                                                                                                                                           |
| "fee"              | (numeric) | the amount of the fee; this is negative and only available for the `send` category of transactions                                                                                                   |           |                                                                                                                                                                                                                                           |
| "confirmations"    | (numeric) | a confirmation number that is aware of the dPoW security service                                                                                                                                     |           |                                                                                                                                                                                                                                           |
| "rawconfirmations" | (numeric) | the raw confirmations of the transaction; available for `send` and `receive` category of transactions (number of blocks on top of this transaction's block)                                          |           |                                                                                                                                                                                                                                           |
| "blockhash"        | (string)  | the block hash containing the transaction; available for the `send` and `receive` categories of transactions                                                                                         |           |                                                                                                                                                                                                                                           |
| "blockindex"       | (numeric) | the block index containing the transaction; available for the `send` and `receive` categories of transactions                                                                                        |           |                                                                                                                                                                                                                                           |
| "txid"             | (string)  | the transaction id; available for the `send` and `receive` categories of transactions                                                                                                                |           |                                                                                                                                                                                                                                           |
| "time"             | (numeric) | the transaction time in seconds since epoch (midnight Jan 1 1970 GMT)                                                                                                                                |           |                                                                                                                                                                                                                                           |
| "timereceived"     | (numeric) | the time received in seconds since epoch (midnight Jan 1 1970 GMT); available for the `send` and `receive` categories of transactions                                                                |           |                                                                                                                                                                                                                                           |
| "comment"          | (string)  | whether a comment is associated with the transaction                                                                                                                                                 |           |                                                                                                                                                                                                                                           |
| "otheraccount"     | (string)  | for the `move` category of transactions; indicates the account which sent the funds (for receiving funds, positive amounts), or went to (for sending funds, negative amounts)                        |           |                                                                                                                                                                                                                                           |
| "size"             | (numeric) | transaction size in bytes                                                                                                                                                                            |           |                                                                                                                                                                                                                                           |

#### 📌 Examples

Command:

```bash
./komodo-cli listtransactions
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "account": "",
      "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
      "category": "generate",
      "amount": 0.00010000,
      "vout": 0,
      "rawconfirmations": 99,
      "confirmations": 99,
      "generated": true,
      "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
      "blockindex": 0,
      "blocktime": 1536976212,
      "expiryheight": 0,
      "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
      "walletconflicts": [
      ],
      "time": 1536976211,
      "timereceived": 1536976211,
      "vjoinsplit": [
      ],
      "size": 99
    }
    , ... (9 responses ommitted from documentation for brevity)
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli listtransactions "*" 20 100
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "account": "",
      "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
      "category": "generate",
      "amount": 0.00010000,
      "vout": 0,
      "rawconfirmations": 99,
      "confirmations": 99,
      "generated": true,
      "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
      "blockindex": 0,
      "blocktime": 1536976212,
      "expiryheight": 0,
      "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
      "walletconflicts": [
      ],
      "time": 1536976211,
      "timereceived": 1536976211,
      "vjoinsplit": [
      ],
      "size": 99
    }
    , ... (9 responses ommitted from documentation for brevity)
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listtransactions", "params": ["*", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    [
      {
        "account": "",
        "address": "RTcwYaQPDVN7V9SdfFHARWnoB7vcpSfdvs",
        "category": "generate",
        "amount": 0.0001,
        "vout": 0,
        "rawconfirmations": 99,
        "confirmations": 99,
        "generated": true,
        "blockhash": "0eb4edeb5141a7670ef8be413873e1bef4f6f321867a2b8d67a616cdc7df1e77",
        "blockindex": 0,
        "blocktime": 1536976212,
        "expiryheight": 0,
        "txid": "3041aa7374e530d4d28e14620dd2bb9d2ff0bf71dd1106f08bc9f02fce44598e",
        "walletconflicts": [],
        "time": 1536976211,
        "timereceived": 1536976211,
        "vjoinsplit": [],
        "size": 99
      }
      , ... (9 responses ommitted from documentation for brevity)
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## listunspent

**listunspent ( minconf maxconf \["address", ... ] )**

The `listunspent` method returns an array of unspent transaction outputs, with a range between `minconf` and `maxconf` (inclusive) confirmations. The method can, optionally, filter to only include `txouts` paid to specified addresses.

### Arguments

| Name      | Type                                 | Description                         |
| --------- | ------------------------------------ | ----------------------------------- |
| minconf   | (numeric, optional, default=1)       | the minimum confirmations to filter |
| maxconf   | (numeric, optional, default=9999999) | the maximum confirmations to filter |
| "address" | (string)                             | a series of addresses               |

### Response

| Name               | Type      | Description                                                                 |
| ------------------ | --------- | --------------------------------------------------------------------------- |
| "txid"             | (string)  | the transaction id                                                          |
| "vout"             | (numeric) | the vout value                                                              |
| "generated"        | (boolean) | true if txout is a coinbase transaction output                              |
| "address"          | (string)  | the address                                                                 |
| "account"          | (string)  | DEPRECATED the associated account, or "" for the default account            |
| "scriptPubKey"     | (string)  | the script key                                                              |
| "amount"           | (numeric) | the transaction amount                                                      |
| "confirmations"    | (numeric) | a confirmation number that is aware of the dPoW security service            |
| "rawconfirmations" | (numeric) | the raw confirmations (number of blocks on top of this transaction's block) |

#### 📌 Examples

Command:

```bash
./komodo-cli listunspent
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "txid": "269b658b9a52e9142c96f3a49c0ad917e5d0c08126baa96713827267137d150f",
      "vout": 0,
      "generated": true,
      "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
      "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
      "amount": 0.00010000,
      "interest": 0.00000000,
      "rawconfirmations": 6,
      "confirmations": 1,
      "spendable": true
    },
      ...
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli listunspent 6 9999999 '["RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu","RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "txid": "0ca752c996c4074ca62071cdbf848ccd33864894151f982024006b3d69d021ac",
      "vout": 0,
      "generated": true,
      "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
      "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
      "amount": 0.0001,
      "interest": 0.0,
      "rawconfirmations": 7,
      "confirmations": 1,
      "spendable": true
    },
    {
      "txid": "7281407d85619901ee10d52c96869f7879393434b782331df6f67a0e0e9d1ffa",
      "vout": 0,
      "generated": false,
      "address": "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
      "scriptPubKey": "76a9141c973dbbed002e189caf31664d9ca7e8b1e92d8788ac",
      "amount": 9.99304496,
      "interest": 0.0,
      "rawconfirmations": 21,
      "confirmations": 21,
      "spendable": true
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listunspent", "params": [6, 9999999, ["RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu","RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ"]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "txid": "0ca752c996c4074ca62071cdbf848ccd33864894151f982024006b3d69d021ac",
        "vout": 0,
        "generated": true,
        "address": "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu",
        "scriptPubKey": "21037e631c6a03d028e48aecfd93b2d2737d5d7e2852a426b940ff301f78aa31690cac",
        "amount": 0.0001,
        "interest": 0.0,
        "rawconfirmations": 7,
        "confirmations": 7,
        "spendable": true
      },
      {
        "txid": "7281407d85619901ee10d52c96869f7879393434b782331df6f67a0e0e9d1ffa",
        "vout": 0,
        "generated": false,
        "address": "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ",
        "scriptPubKey": "76a9141c973dbbed002e189caf31664d9ca7e8b1e92d8788ac",
        "amount": 9.99304496,
        "interest": 0.0,
        "rawconfirmations": 21,
        "confirmations": 21,
        "spendable": true
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## lockunspent

**lockunspent unlock \[\{ "txid": "txid", "vout": n }, ... ]**

The `lockunspent` method locks (unlock = `false`) or unlocks (unlock = `true`) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending the relevant coin. The locks are stored in memory only; at runtime a node always starts with zero locked outputs, and the locked output list is always cleared when a node stops or fails.

<Note>
  See the <b>listunspent</b> and <b>listlockunspent</b> calls to determine local
  transaction state and info.
</Note>

### Arguments

| Name   | Type                | Description                                                         |
| ------ | ------------------- | ------------------------------------------------------------------- |
| unlock | (boolean, required) | whether to unlock (true) or lock (false) the specified transactions |
| "txid" | (string)            | the transaction id                                                  |
| "vout" | (numeric)           | the output number                                                   |

### Response

| Name       | Type      | Description                        |
| ---------- | --------- | ---------------------------------- |
| true/false | (boolean) | whether the command was successful |

#### 📌 Examples

Command:

```bash
./komodo-cli lockunspent false '[{"txid":"d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd","vout":0}]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "lockunspent", "params": [false, [{"txid":"d7ba45296c66e16eb61f27a4eef8848c7f5579fe801f277c1b0e074a4f47d6fd","vout":0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": true,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## move

**move "fromaccount" "toaccount" amount ( minconf "comment" )**

<Note>DEPRECATED</Note>

The `move` method moves a specified amount from one account in your wallet to another.

### Arguments

| Name          | Type                           | Description                                                                                                           |
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "fromaccount" | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| "toaccount"   | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |
| amount        | (numeric)                      | the quantity to move between accounts                                                                                 |
| minconf       | (numeric, optional, default=1) | only use funds with at least this many confirmations                                                                  |
| "comment"     | (string, optional)             | an optional comment, stored in the wallet only                                                                        |

### Response

| Name       | Type      | Description        |
| ---------- | --------- | ------------------ |
| true/false | (boolean) | true if successful |

#### 📌 Examples

Command:

```bash
./komodo-cli move "" "tabby" 0.01
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli move "timotei" "akiko" 0.01 6 "happy birthday!"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "move", "params": ["timotei", "akiko", 0.01, 6, "happy birthday!"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

<DevComment>
  Sidd: Commenting out until Alright has time to review.

  ## opreturn\_burn

  **opreturn\_burn burn\_amount hexstring ( txfee )**

  The `opreturn_burn` method creates an OP\_RETURN transaction.

  The method returns a raw hex transaction that must then be broadcast via the [sendrawtransaction](/smart-chains/api/rawtransactions/#sendrawtransaction) method.

  ### Arguments

  | Name           | Type                                | Description                                  |
  | -------------- | ----------------------------------- | -------------------------------------------- |
  | "burn\_amount" | (numeric, required)                 | the amount of coins to burn                  |
  | "hexstring"    | (string, required)                  | the hex string to include in OP\_RETURN data |
  | "txfee"        | (numeric, optional, defalut=0.0001) | the transaction fee                          |

  ### Response

  | Name  | Type     | Description                                                                       |
  | ----- | -------- | --------------------------------------------------------------------------------- |
  | "hex" | (string) | raw hex of transaction; broadcast this using the <b>sendrawtransaction</b> method |

  #### 📌 Examples

  ###### Command

  ```bash
  ./komodo-cli opreturn_burn 10 deadbeef 0.00005
  ```

  ###### Response

  <CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
    ```bash
    {
      "hex": "0100000001edbf323e5a3eac2699018550ca0594cf742184d4b8575a653520849f3c0ddae4000000004847304402207d83e3ac59c59a1027c7be57cfc6bf9b225385eea464922bbb8f53184c60216e02203ba941dfb9f54785f3935a23ceb55d7203d70034656a59d5eafa77bef67a919b01ffffffff0200ca9a3b00000000076a0504deadbeeff35ab511955b0000232103fff5c0697d69b9df458ef3ec4e9b08ba1df66deec876bfe56a4d35159e0caf33ac00000000"
    }
    ```
  </CollapsibleSection>

  You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

  ###### Command

  ```bash
  curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "opreturn_burn", "params": [10,"deadbeef",0.0005] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
  ```

  ###### Response

  <CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
    ```json
    {
      "result": {
        "hex": "0100000001edbf323e5a3eac2699018550ca0594cf742184d4b8575a653520849f3c0ddae4000000004847304402207d83e3ac59c59a1027c7be57cfc6bf9b225385eea464922bbb8f53184c60216e02203ba941dfb9f54785f3935a23ceb55d7203d70034656a59d5eafa77bef67a919b01ffffffff0200ca9a3b00000000076a0504deadbeeff35ab511955b0000232103fff5c0697d69b9df458ef3ec4e9b08ba1df66deec876bfe56a4d35159e0caf33ac00000000"
      },
      "error": null,
      "id": "curltest"
    }
    ```
  </CollapsibleSection>
</DevComment>

## resendwallettransactions

**resendwallettransactions**

The `resendwallettransactions` method immediately re-broadcasts unconfirmed wallet transactions to all peers. This method is intended only for testing; the wallet code periodically re-broadcasts automatically.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name              | Type     | Description                                    |
| ----------------- | -------- | ---------------------------------------------- |
| "transaction\_id" | (string) | an array of the rebroadcasted transaction id's |

#### 📌 Examples

Command:

```bash
./komodo-cli resendwallettransactions
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    "4e847051279ead30fb2d8d53cc0d4649f62c85a44b23f90152d2ef4ed6af2006"
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "resendwallettransactions", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "4e847051279ead30fb2d8d53cc0d4649f62c85a44b23f90152d2ef4ed6af2006"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## sendfrom

**sendfrom "account" "address" amount ( minconf "comment" "comment-to" )**

<Note>
  DEPRECATED: Use <b>sendtoaddress</b> instead.
</Note>

The `sendfrom` method sends an amount from `account` to `address`.

### Arguments

| Name         | Type                           | Description                                                                                                                                                                      |
| ------------ | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"    | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error                                                            |
| "address"    | (string, required)             | the address to receive funds                                                                                                                                                     |
| amount       | (numeric, required)            | the amount (transaction fee not included)                                                                                                                                        |
| minconf      | (numeric, optional, default=1) | only use funds with at least this many confirmations                                                                                                                             |
| "comment"    | (string, optional)             | a comment used to store what the transaction is for; this is not part of the transaction, just kept in your wallet                                                               |
| "comment-to" | (string, optional)             | an optional comment to store the name of the person or organization to which you're sending the transaction; this is not part of the transaction, it is only kept in your wallet |

### Response

| Name              | Type     | Description        |
| ----------------- | -------- | ------------------ |
| "transaction\_id" | (string) | the transaction id |

#### 📌 Examples

Command:

```bash
./komodo-cli sendfrom "" "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu" 0.01
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendfrom "tabby" "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu" 0.01 6 "donation" "seans outpost"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendfrom", "params": ["tabby", "RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu", 0.01, 6, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## sendmany

**sendmany "account" \{ "address": amount, ... } ( minconf "comment" \[ "address", ... ] )**

The `sendmany` method can send multiple transactions at once. Amounts are double-precision floating point numbers.

### Arguments

| Name                                 | Type                           | Description                                                                                                                                                                                                                                               |
| ------------------------------------ | ------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| "account"                            | (string, required)             | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error                                                                                                                                     |
| "amounts" \{ "address":amount, ... } | ("string":numeric)             | the address (string) and the value (double-precision floating numeric)                                                                                                                                                                                    |
| minconf                              | (numeric, optional, default=1) | only use the balance confirmed at least this many times                                                                                                                                                                                                   |
| "comment"                            | (string, optional)             | a comment                                                                                                                                                                                                                                                 |
| subtractfeefromamount                | (string, optional)             | a json array with addresses. The fee will be equally deducted from the amount of each selected address; the recipients will receive less than you enter in their corresponding amount field. If no addresses are specified here, the sender pays the fee. |
| "address"                            | (string)                       | subtract fee from this address                                                                                                                                                                                                                            |

### Response

| Name              | Type     | Description                                                                                          |
| ----------------- | -------- | ---------------------------------------------------------------------------------------------------- |
| "transaction\_id" | (string) | the transaction id for the send; only 1 transaction is created regardless of the number of addresses |

#### 📌 Examples

Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  e39b046f0e30bd2a80c64ec78d902107858c8f0d55097d7f2293df1c9a4496ae
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}' 6 "testing"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  3829164d8a68d9b7c2c89efe419eca77e37883318b7187b7e000e80e8138a370
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendmany "" '{"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}' 1 "" '["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ","RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu"]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  1813a39247913abf73af10ed51537234fe4e58eb5cfc4f49ac4fbcdecb42b4b4
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendmany", "params": ["", {"RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ":0.01,"RPS3xTZCzr6aQfoMw5Bu1rpQBF6iVCWsyu":0.02}, 6, "testing"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "fe7db27ed66b9d999c21d3cc9c8c687bd68721d711da6573a0a0ccf75c1cace5",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## sendtoaddress

**sendtoaddress "address" amount ( "comment" "comment-to" subtractfeefromamount)**

The `sendtoaddress` method sends an amount to a given address. The amount is real and is rounded to the nearest 0.00000001.

### Arguments

| Name                  | Type                               | Description                                                                                                                                      |
| --------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| "komodoaddress"       | (string, required)                 | the receiving address                                                                                                                            |
| "amount"              | (numeric, required)                | the amount to send (json requires all decimals values less than 1 begin with the characters '0.')                                                |
| "comment"             | (string, optional)                 | a comment used to store what the transaction is for; this is not part of the transaction, just kept in your wallet                               |
| "comment-to"          | (string, optional)                 | a comment to store the name of the person or organization to which you're sending the transaction; this is stored in your local wallet file only |
| subtractfeefromamount | (boolean, optional, default=false) | when `true`, the fee will be deducted from the amount being sent                                                                                 |

{/* | OP_RETURN | (string, optional) | the hexdata to be stored as part of the `OP_RETURN` of the transaction; the number of characters must be even, the user may add a padding `0` at the beginning if necessary; available in `master` branch after the Notary Network Upgrade of 2020 */}

### Response

| Name              | Type     | Description        |
| ----------------- | -------- | ------------------ |
| "transaction\_id" | (string) | the transaction id |

#### 📌 Examples

Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  cc23924c007adc98b8ea5b9b8b47638e080aa469eb9738b976def487a44f467b
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1 "donation" "seans outpost"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  86948c27dc63be415b235c5b3ed807c1e07d9a2cac252f58734add700c55fe18
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1 "" "" true
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  c5727cafd7d6dfc888d4a0596dc58bfafb24859e29f827e1bf1443037d8461fc
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli sendtoaddress "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" 0.1 "" "" false "c5727cafd7d6dfc888d4a0596dc58bfafb24859e29f827e1bf1443037d8461fc"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  48945fb179a5703b9c6f691e50f9ad1527b426803720bea3efffff092d63fec2
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendtoaddress", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", 0.1, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "6e411f3534af8847d705d87934f6061046e2034abad96b7a1fb1d3996129cb1e",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## setaccount

**setaccount "address" "account"**

<Note>Notice DEPRECATED</Note>

The `setaccount` method sets the account associated with the given address.

### Arguments

| Name      | Type               | Description                                                                                                           |
| --------- | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
| "address" | (string, required) | the address to be associated with an account                                                                          |
| "account" | (string, required) | MUST be set to the empty string "" to represent the default account; passing any other string will result in an error |

#### 📌 Examples

Command:

```bash
./komodo-cli setaccount "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "tabby"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setaccount", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", "tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (deprecated)
  ```
</CollapsibleSection>

## setpubkey

**setpubkey pubkey**

The `setpubkey` method sets the indicated `pubkey`. This method can be used in place of the [pubkey](/smart-chains/setup/common-runtime-parameters/#pubkey) launch parameter, when necessary.

Visit the section [pubkey](/smart-chains/setup/common-runtime-parameters/#pubkey) to understand when it is essential to set a pubkey and the consequences of setting it.

<Note type="warning">
  This method works only once per daemon start. It can't be used to change the
  pubkey that has already been set.
</Note>

### Arguments

| Name   | Type     | Description        |
| ------ | -------- | ------------------ |
| pubkey | (string) | the desired pubkey |

### Response

| Name      | Type      | Description                                       |
| --------- | --------- | ------------------------------------------------- |
| pubkey    | (string)  | the pubkey                                        |
| ismine    | (boolean) | indicates whether the address belongs to the user |
| R-address | (string)  | the public address associated with the pubkey     |

#### 📌 Examples

Command:

```bash
./komodo-cli setpubkey 0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  {
    "address": "RK47DQhSHJEMGFSiRtgki67xG3u1Qsq1Gw",
    "ismine": true,
    "pubkey": "0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f"
  }
  ```
</CollapsibleSection>

You can find the `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user myrpuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setpubkey", "params": ["02f7597468703c1c5c8465dd6d43acaae697df9df30bed21494d193412a1ea193e"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  {
    "result": {
      "address": "RK47DQhSHJEMGFSiRtgki67xG3u1Qsq1Gw",
      "ismine": true,
      "pubkey": "0260801166cebdc9be1e3460ba9e4959fb29feee7725f565ffc296fa4636aa706f"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## settxfee

**settxfee amount**

The `settxfee` method sets the transaction fee per kB.

### Arguments

| Name   | Type                | Description                                                      |
| ------ | ------------------- | ---------------------------------------------------------------- |
| amount | (numeric, required) | the transaction fee in COIN/kB rounded to the nearest 0.00000001 |

### Response

| Name       | Type      | Description                |
| ---------- | --------- | -------------------------- |
| true/false | (boolean) | returns true if successful |

#### 📌 Examples

Command:

```bash
./komodo-cli settxfee 0.00001
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "settxfee", "params": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": true,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## signmessage

**signmessage "address" "message"**

The `signmessage` method signs a message via the private key of an address.

### Arguments

| Name      | Type               | Description                            |
| --------- | ------------------ | -------------------------------------- |
| "address" | (string, required) | the address to use for the private key |
| "message" | (string, required) | the message                            |

### Response

| Name        | Type     | Description                                     |
| ----------- | -------- | ----------------------------------------------- |
| "signature" | (string) | the signature of the message encoded in base 64 |

#### 📌 Examples

Create the signature:

Command:

```bash
./komodo-cli signmessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "my message"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=
  ```
</CollapsibleSection>

Verify the signature:

Command:

```bash
./komodo-cli verifymessage "RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ" "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=" "my message"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  true
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signmessage", "params": ["RBtNBJjWKVKPFG4To5Yce9TWWmc2AenzfZ", "my message"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "H1y0mn/wRv56r1bcfkbQtzjG6XeWSelAsyayBuCwEL9XGXs7ieU55dryt/cFWM9gnRFI7gS01AByuSqRs+o/AZs=",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## walletlock

**walletlock**

<Note>
  The `walletlock` method is neither active nor visible in the `help` method
  until the [encryptwallet](/smart-chains/api/wallet/#encryptwallet) passphrase
  is set.
</Note>

<Note>
  This feature is available only on chains where `-ac_public` is enabled. Chains
  that feature private transactions cannot use this feature.
</Note>

The `walletlock` method re-locks a wallet that has a passphrase enabled via [encryptwallet](/smart-chains/api/wallet/#encryptwallet).

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli walletlock
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## walletpassphrase

**walletpassphrase "passphrase" (timeout)**

<Note>
  The `walletpassphrase` method is neither active nor visible in the `help`
  method until the [encryptwallet](/smart-chains/api/wallet/#encryptwallet)
  passphrase is set.
</Note>

<Note>
  This feature is available only on chains where `-ac_public` is enabled. Chains
  that feature private transactions cannot use this feature.
</Note>

The `walletpassphrase` method unlocks the wallet using the passphrase that was set by the [encryptwallet](/smart-chains/api/wallet/#encryptwallet) method.

The `timeout` argument can be included to limit the length of time (in seconds) the wallet will remain unlocked.

### Arguments

| Name         | Type                          | Description                                                            |
| ------------ | ----------------------------- | ---------------------------------------------------------------------- |
| "passphrase" | (string)                      | the passphrase that was set by the `encryptwallet` method              |
| timeout      | (number in seconds, optional) | the amount of time for which the wallet should remember the passphrase |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli walletpassphrase
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## walletpassphrasechange

**walletpassphrasechange "oldpassphrase" "newpassphrase"**

<Note>
  The `walletpassphrasechange` method is neither active nor visible in the
  `help` method until the
  [encryptwallet](/smart-chains/api/wallet/#encryptwallet) passphrase is set.
</Note>

<Note>
  This feature is available only on chains where `-ac_public` is enabled. Chains
  that feature private transactions cannot use this feature.
</Note>

The `walletpassphrasechange` method changes `"oldpassphrase"` to `"newpassphrase"`.

### Arguments

| Name            | Type     | Description        |
| --------------- | -------- | ------------------ |
| "oldpassphrase" | (string) | the old passphrase |
| "newpassphrase" | (string) | the new passphrase |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli walletpassphrasechange "oldpassphrase" "newpassphrase"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## z\_exportkey

**z\_exportkey "z\_address"**

The `z_exportkey` method reveals the private z\_key corresponding to `z_address`.

<Note>
  See also <b>z\_importkey</b>.
</Note>

### Arguments

| Name         | Type               | Description                        |
| ------------ | ------------------ | ---------------------------------- |
| "z\_address" | (string, required) | the z\_address for the private key |

### Response

| Name  | Type     | Description     |
| ----- | -------- | --------------- |
| "key" | (string) | the private key |

#### 📌 Examples

Command:

```bash
./komodo-cli z_exportkey "ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  DONOTUSExxxxxxxxxxxxxxxxV6EyPpaZFVDsqeNB6k8eoLFERdag
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportkey", "params": ["ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "DONOTUSExxxxxxxxxxxxxxxxV6EyPpaZFVDsqeNB6k8eoLFERdag",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_exportviewingkey

**z\_exportviewingkey "z\_address"**

The `z_exportviewingkey` method reveals the viewing key corresponding to `z_address`.

<Note>
  See also <b>z\_importviewingkey</b>.
</Note>

### Arguments

| Name         | Type               | Description                        |
| ------------ | ------------------ | ---------------------------------- |
| "z\_address" | (string, required) | the z\_address for the viewing key |

### Response

| Name   | Type     | Description     |
| ------ | -------- | --------------- |
| "vkey" | (string) | the viewing key |

#### 📌 Examples

Command:

```bash
./komodo-cli z_exportviewingkey "ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  ZiVtf1yjjR9DeDNNgd4kvRgS1oovQwfK6xt2csfhTwpbUVjnC9RrEeuVkAfJrxN1jDR3d7vR6XmLne4vC9SCYR5F9XMzW19VJ
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportviewingkey", "params": ["ztffWAUUY9PnLiBVXY2pnX67kfm71SevtPC5d9LLM3xZqehy4XxV1FeyxPWcHGTiCd7GtQ17gk5jDTQxhHB13K1A7HT6hZH"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "ZiVtf1yjjR9DeDNNgd4kvRgS1oovQwfK6xt2csfhTwpbUVjnC9RrEeuVkAfJrxN1jDR3d7vR6XmLne4vC9SCYR5F9XMzW19VJ",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_exportwallet

**z\_exportwallet "filename"**

The `z_exportwallet` method exports all wallet keys, including both t address and z address types, in a human-readable format. Overwriting an existing file is not permitted.

### Arguments

| Name       | Type               | Description                                                                                                                                                        |
| ---------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| "filename" | (string, required) | the filename, saved to the directory indicated by the [exportdir](/smart-chains/setup/common-runtime-parameters/#exportdir) parameter at daemon runtime (required) |

### Response

| Name   | Type     | Description                           |
| ------ | -------- | ------------------------------------- |
| "path" | (string) | the full path of the destination file |

#### 📌 Examples

Command:

```bash
./komodo-cli z_exportwallet "test"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  /home/myusername/mydirectory/test
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_exportwallet", "params": ["test"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "/home/myusername/mydirectory/test",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_getbalance

**z\_getbalance "address" ( minconf )**

The `z_getbalance` method returns the balance of a t address or z address belonging to the node’s wallet.

<Note type="warning">
  CAUTION: If <b>address</b> is a watch-only z address, the returned balance may
  be larger than the actual balance, as spends cannot be detected with incoming
  viewing keys.
</Note>

### Arguments

| Name      | Type                           | Description                                                  |
| --------- | ------------------------------ | ------------------------------------------------------------ |
| "address" | (string)                       | the selected z or t address                                  |
| minconf   | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Response

| Name   | Type      | Description                                                            |
| ------ | --------- | ---------------------------------------------------------------------- |
| amount | (numeric) | the total amount received at this address (in the relevant COIN value) |

#### 📌 Examples

The total amount received by address "myaddress" at least 5 blocks confirmed

Command:

```bash
./komodo-cli z_getbalance "ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0.01980000
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_getbalance "ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn" 5
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  0.01980000
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getbalance", "params": ["ztfF6SFBfq2qha73dAgsXnL86F8air32CXKxJg8aYtEPJFdLcw4y3zWzBasocnx1V9GLnnFeKnkPvkScjNkQBfWn2kBDmkn", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": 0.0198,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_getnewaddress

**z\_getnewaddress**

The `z_getnewaddress` method returns a new z\_address for receiving payments.

### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

### Response

| Name         | Type     | Description        |
| ------------ | -------- | ------------------ |
| "z\_address" | (string) | the new z\_address |

#### 📌 Examples

Command:

```bash
./komodo-cli z_getnewaddress
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getnewaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_getoperationresult

**z\_getoperationresult (\[ "operationid", ... ])**

The `z_getoperationresult` method retrieves the result and status of an operation which has finished, and then removes the operation from memory.

<Note>
  See also <b>z\_getoperationstatus</b>.
</Note>

### Arguments

| Name          | Type               | Description                                                                                             |
| ------------- | ------------------ | ------------------------------------------------------------------------------------------------------- |
| "operationid" | (string, optional) | a list of operation ids to query; if not provided, the method examines all operations known to the node |

### Response

| Name                | Type                    | Description                                                |          |             |
| ------------------- | ----------------------- | ---------------------------------------------------------- | -------- | ----------- |
| "id"                | (string)                | the operation id                                           |          |             |
| "status"            | (string)                | the result of the operation; can be `success`              | `failed` | `executing` |
| "creation\_time"    | (numeric)               | the creation time, in seconds since epoch (Jan 1 1970 GMT) |          |             |
| "result": \{ ... }  | (array of json objects) |                                                            |          |             |
| "txid":             | (string)                | the transaction id                                         |          |             |
| "execution\_secs"   | (numeric)               | the length of time to calculate the transaction            |          |             |
| "method"            | (string)                | the name of the method used in the operation               |          |             |
| "params": \{ ... }  | (json)                  |                                                            |          |             |
| "fromaddress"       | (string)                | the address from which funds are drawn                     |          |             |
| "amounts": \[ ... ] | (array of json objects) |                                                            |          |             |
| "address"           | (string)                | the receiving address                                      |          |             |
| "amount"            | (numeric)               | the amount to receive                                      |          |             |
| "minconf"           | (numeric)               | the minimum number of confirmations required               |          |             |
| "fee"               | (numeric)               | the transaction fee                                        |          |             |

#### 📌 Examples

Command:

```bash
./komodo-cli z_getoperationresult '["opid-6e581ee5-4e90-4e70-8961-f95d8d28748c"]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "id": "opid-6e581ee5-4e90-4e70-8961-f95d8d28748c",
      "status": "success",
      "creation_time": 1537287690,
      "result": {
        "txid": "65e01c8485f6a85fbf7093d8233864eed0f31e6e2eff22a7e468e92c37dc864c"
      },
      "execution_secs": 44.606282288,
      "method": "z_sendmany",
      "params": {
        "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
        "amounts": [
          {
            "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
            "amount": 0.01
          }
        ],
        "minconf": 1,
        "fee": 0.0001
      }
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getoperationresult", "params": [["opid-6a9da0dd-a950-4d95-848c-d3c18e44be03"]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "id": "opid-6a9da0dd-a950-4d95-848c-d3c18e44be03",
        "status": "success",
        "creation_time": 1537288235,
        "result": {
          "txid": "f0309f8dc2e33e108dec39285bc8755058375cf6e51bdb452fb45f3d14909fef"
        },
        "execution_secs": 44.978749064,
        "method": "z_sendmany",
        "params": {
          "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
          "amounts": [
            {
              "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
              "amount": 0.01
            }
          ],
          "minconf": 1,
          "fee": 0.0001
        }
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_getoperationstatus

**z\_getoperationstatus (\[ "operationid", ... ])**

The `z_getoperationstatus` message queries the operation status and any associated result or error data of any `operationid` stored in local memory. The operation will remain in memory (unlike `z_getoperationresult`, which removes the data from the local memory).

### Arguments

| Name          | Type              | Description                                                                                                                     |
| ------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------- |
| "operationid" | (array, optional) | a list of operation ids we are interested in; if an array is not provided, the method examines all operations known to the node |

### Response

| Name                | Type                    | Description                                                                   |             |          |
| ------------------- | ----------------------- | ----------------------------------------------------------------------------- | ----------- | -------- |
| "id"                | (string)                | the operation id                                                              |             |          |
| "status"            | (string)                | the status of the operation; can be `success`                                 | `executing` | `failed` |
| "creation\_time"    | (numeric)               | the creation time, in seconds since epoch (Jan 1 1970 GMT)                    |             |          |
| "error" : \{ ... }  | (array of json objects) |                                                                               |             |          |
| "code"              | (numeric)               | the associated error code                                                     |             |          |
| "message"           | (string)                | a message to indicate the nature of the error, if such a message is available |             |          |
| "method"            | (string)                | the name of the method used in the operation                                  |             |          |
| "params" : \{ ... } | (array of json objects) |                                                                               |             |          |
| "fromaddress"       | (string)                | the address from which funds are drawn                                        |             |          |
| "amounts": \[ ... ] | (array of json objects) |                                                                               |             |          |
| "address"           | (string)                | the receiving address                                                         |             |          |
| "amount"            | (numeric)               | the amount to receive                                                         |             |          |
| "minconf"           | (numeric)               | indicates the required number of mining confirmations                         |             |          |
| "fee"               | (numeric)               | the fee                                                                       |             |          |

#### 📌 Examples

Command:

```bash
./komodo-cli z_getoperationstatus
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "id": "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5",
      "status": "failed",
      "creation_time": 1537288268,
      "error": {
        "code": -6,
        "message": "Insufficient funds, no UTXOs found for taddr from address."
      },
      "method": "z_sendmany",
      "params": {
        "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
        "amounts": [
          {
            "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
            "amount": 0.01
          }
        ],
        "minconf": 1,
        "fee": 0.0001
      }
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_getoperationstatus '["opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "id": "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
      "status": "executing",
      "creation_time": 1537289777,
      "method": "z_sendmany",
      "params": {
        "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
        "amounts": [
          {
            "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
            "amount": 0.01
          }
        ],
        "minconf": 1,
        "fee": 0.0001
      }
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_getoperationstatus", "params": [["opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "id": "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
        "status": "success",
        "creation_time": 1537289777,
        "result": {
          "txid": "2b988a708db2b8d99a92bbff65a57d0d73fdb22c30fc3f3e4f81ab15cfeafc45"
        },
        "execution_secs": 45.200043917,
        "method": "z_sendmany",
        "params": {
          "fromaddress": "RWUwHqRUYgxfYNNSHWkQuY5sh93VGiiPoX",
          "amounts": [
            {
              "address": "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3",
              "amount": 0.01
            }
          ],
          "minconf": 1,
          "fee": 0.0001
        }
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_gettotalbalance

**z\_gettotalbalance ( minconf includeWatchonly )**

The `z_gettotalbalance` method returns the total value of funds, including both transparent and private, stored in the node’s wallet.

<Note type="warning">
  CAUTION: If the wallet contains watch-only z addresses the returned private
  balance may be larger than the actual balance, as spends cannot be detected
  with incoming viewing keys.
</Note>

<Note>
  While the <b>interest</b> property is returned for all KMD-based coin daemons,
  only the main KMD chain utilizes the interest feature. KMD-based Smart Chains
  will always return a <b>0.00</b> interest value.
</Note>

### Arguments

| Name             | Type                            | Description                                                                                 |
| ---------------- | ------------------------------- | ------------------------------------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)  | only include private and transparent transactions confirmed at least this many times        |
| includeWatchonly | (bool, optional, default=false) | also include balance in watchonly addresses (see 'importaddress' and 'z\_importviewingkey') |

### Response

| Name          | Type      | Description                                             |
| ------------- | --------- | ------------------------------------------------------- |
| "transparent" | (numeric) | the total balance of transparent funds                  |
| "interest"    | (numeric) | the total balance of unclaimed interest earned          |
| "private"     | (numeric) | the total balance of private funds                      |
| "total"       | (numeric) | the total balance of both transparent and private funds |

#### 📌 Examples

Command:

```bash
./komodo-cli z_gettotalbalance
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "transparent": "9.98794883",
    "interest": "0.00",
    "private": "0.08205",
    "total": "10.06999883"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_gettotalbalance 5
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "transparent": "9.98794883",
    "interest": "0.00",
    "private": "0.08205",
    "total": "10.06999883"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_gettotalbalance", "params": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "transparent": "0.00615",
      "interest": "0.00",
      "private": "0.06205",
      "total": "0.0682"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_importkey

**z\_importkey "z\_privatekey" ( rescan startHeight )**

The `z_importkey` method imports `z_privatekey` to your wallet.

<Note>
  This call can take minutes to complete if <b>rescan</b> is true.
</Note>

<Note>
  The optional parameters are currently not functional with KMD-based
  blockchains.
</Note>

<Note>
  See also <b>z\_exportkey</b>.
</Note>

### Arguments

| Name            | Type                                         | Description                                                                   |      |                |
| --------------- | -------------------------------------------- | ----------------------------------------------------------------------------- | ---- | -------------- |
| "z\_privatekey" | (string, required)                           | the z\_privatekey (see [z\_exportkey](/smart-chains/api/wallet/#z-exportkey)) |      |                |
| rescan          | (string, optional, default=`"whenkeyisnew"`) | rescan the wallet for transactions; can be `yes`                              | `no` | `whenkeyisnew` |
| startHeight     | (numeric, optional, default=0)               | the block height at which to begin the rescan                                 |      |                |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK whenkeyisnew 30000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_importkey DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK yes 20000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importkey", "params": ["DONOTUSExxxxxxxxxxxxxxxxBP6ipkmBxmEQbugcCQ16vUaWGFK", "no"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_importviewingkey

**z\_importviewingkey "viewing\_key" ( rescan startHeight )**

The `z_importviewingkey` adds a viewing key to your wallet. This method allows you to view the balance in a z address that otherwise does not belong to your wallet.

<Note>
  See also <b>z\_exportviewingkey</b>.
</Note>

<Note>
  This call can take minutes to complete if <b>rescan</b> is true.
</Note>

<Note>
  The optional parameters are currently not functional for KMD-based
  blockchains.
</Note>

### Arguments

| Name           | Type                                       | Description                                                   |        |                  |
| -------------- | ------------------------------------------ | ------------------------------------------------------------- | ------ | ---------------- |
| "viewing\_key" | (string, required)                         | the viewing key                                               |        |                  |
| rescan         | (string, optional, default="whenkeyisnew") | whether to rescan the wallet for transactions; can be `"yes"` | `"no"` | `"whenkeyisnew"` |
| startHeight    | (numeric, optional, default=0)             | block height to start rescan                                  |        |                  |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" no
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" whenkeyisnew 30000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_importviewingkey "ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja" yes 20000
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importviewingkey", "params": ["ZiVtfYkeyRY3y8Wykm5zjLcnssEkVrkej6j3kQ5B1AE2qp2F3VsKzpoXTzD82hrvMjWB9WxCHbXXrXax2ceyHLWrnQDaMrMja", "no"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

## z\_importwallet

**z\_importwallet "filename"**

The `z_importwallet` method imports t address and z address keys from a wallet export file.

<Note>
  See also <b>z\_exportwallet</b>.
</Note>

### Arguments

| Name       | Type               | Description     |
| ---------- | ------------------ | --------------- |
| "filename" | (string, required) | the wallet file |

### Response

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### 📌 Examples

Command:

```bash
./komodo-cli z_importwallet "/mydirectory/nameofbackup"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (none)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_importwallet", "params": ["/mydirectory/nameofbackup"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": null,
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_listaddresses

**z\_listaddresses ( includeWatchonly )**

The `z_listaddresses` method returns the list of z addresses belonging to the wallet.

<Note>
  See also <b>z\_importviewingkey</b>.
</Note>

### Arguments

| Name             | Type                            | Description                      |
| ---------------- | ------------------------------- | -------------------------------- |
| includeWatchonly | (bool, optional, default=false) | also include watchonly addresses |

### Response

| Name         | Type     | Description                         |
| ------------ | -------- | ----------------------------------- |
| "z\_address" | (string) | a z address belonging to the wallet |

#### 📌 Examples

Command:

```bash
./komodo-cli z_listaddresses
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP",
    "ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y"
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listaddresses", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP",
      "ztbUD83kXgHt3A1M282wFvT9Ms6SiBCd6GSbQbPa2C7UtPojVZjPENytFqu7JxgnsgL9EN42xWnyhhzniHYSRJDnEPTgo3Y"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_listoperationids

**z\_listoperationids**

The `z_listoperationids` method returns the list of operation ids currently known to the wallet.

### Arguments

| Name     | Type               | Description                                           |
| -------- | ------------------ | ----------------------------------------------------- |
| "status" | (string, optional) | filter result by the operation's state e.g. "success" |

### Response

| Name          | Type     | Description                             |
| ------------- | -------- | --------------------------------------- |
| "operationid" | (string) | an operation id belonging to the wallet |

#### 📌 Examples

Command:

```bash
./komodo-cli z_listoperationids
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
    "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5"
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_listoperationids "success"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375"
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listoperationids", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "opid-47e12224-8477-4cd4-852d-d8c3ddbc6375",
      "opid-b650b582-c2f5-43e0-9a65-9fe23f65c1a5"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_listreceivedbyaddress

**z\_listreceivedbyaddress "address" ( minconf )**

The `z_listreceivedbyaddress` method returns a list of amounts received by a z address belonging to the node’s wallet.

### Arguments

| Name    | Type                           | Description                                                  |
| ------- | ------------------------------ | ------------------------------------------------------------ |
| address | (string)                       | the private address.                                         |
| minconf | (numeric, optional, default=1) | only include transactions confirmed at least this many times |

### Result

An array of json objects, each having the properties below.

| Name               | Type                                         | Description                                                                     |
| ------------------ | -------------------------------------------- | ------------------------------------------------------------------------------- |
| txid               | (string)                                     | the transaction id                                                              |
| amount             | (numeric)                                    | the amount of value in the note                                                 |
| memo               | (string)                                     | hexadecimal string representation of memo field                                 |
| "confirmations"    | (numeric)                                    | a confirmation number that is aware of the dPoW security service                |
| "rawconfirmations" | (numeric)                                    | the raw confirmations (number of blocks on top of this transaction's block)     |
| jsindex            | (sprout)                                     | (numeric, received only by sprout addresses) the joinsplit index                |
| jsoutindex         | (numeric, received only by sprout addresses) | the output index of the joinsplit                                               |
| outindex           | (numeric, sapling)                           | the output index                                                                |
| change             | (boolean)                                    | true if the address that received the note is also one of the sending addresses |

#### 📌 Examples

Command:

```bash
./komodo-cli z_listreceivedbyaddress "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    {
      "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
      "amount": 77.00000000,
      "memo": "f
      "outindex": 0,
      "rawconfirmations": 9,
      "confirmations": 9,
      "change": false
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user rpcuser:rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listreceivedbyaddress", "params": ["zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg"] }' -H 'content-type: text/plain;' http://127.0.0.1:rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  blockHash 0a4f15fe5425ef8bc6eb84e7bc3625c1ceccb3e49132b696a1841ab17a75a705 height 55200
  {"result": [{"txid": "23d33c0c12ba2224b2c9c252e304f491bf76ca05670c8f00d48300776c10850f","amount": 100.00000000,"memo": "foutindex": 0,"rawconfirmations": 1,"confirmations": 1,"change": false}],"error": null,"id": "curltest"}
  ```
</CollapsibleSection>

## z\_listunspent

**z\_listunspent ( minconf maxconf includeWatchonly \["zaddr", ...] )**

The `z_listunspent` method returns an array of unspent shielded notes.

The method can also filter to only include results that have between `minconf` and `maxconf` (inclusive) confirmations, and also for specified z\_addresses (`["zaddr", ...])`.

When `minconf` is `0` unspent notes with zero confirmations are returned, even though they are not immediately spendable.

Results are an array of Objects, each of which has:
\{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)
\{txid, outindex, confirmations, address, amount, memo} (Sapling)

### Arguments

| Name             | Type                                 | Description                                                                                                           |
| ---------------- | ------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| minconf          | (numeric, optional, default=1)       | the minimum confirmations to filter                                                                                   |
| maxconf          | (numeric, optional, default=9999999) | the maximum confirmations to filter                                                                                   |
| includeWatchonly | (bool, optional, default=false)      | whether to also include watchonly addresses (see [z\_importviewingkey](/smart-chains/api/wallet/#z-importviewingkey)) |
| addresses        | (array)                              | a json array of z addresses (both Sprout and Sapling) to act as a filter; duplicate addresses are not allowed         |
| address          | (string)                             | a z address                                                                                                           |

### Results

An array of json objects, each having the properties below.

| Name               | Type                                          | Description                                                                                              |
| ------------------ | --------------------------------------------- | -------------------------------------------------------------------------------------------------------- |
| txid               | (string)                                      | the transaction id                                                                                       |
| jsindex            | (numeric)                                     | the joinsplit index                                                                                      |
| jsoutindex         | (numeric, only returned on sprout addresses)  | the output index of the joinsplit                                                                        |
| outindex           | (numeric, only returned on sapling addresses) | the output index                                                                                         |
| "confirmations"    | (numeric)                                     | a confirmation number that is aware of the dPoW security service                                         |
| "rawconfirmations" | (numeric)                                     | the raw confirmations (number of blocks on top of this transaction's block)                              |
| spendable          | (boolean)                                     | true if note can be spent by wallet, false if note has zero confirmations, false if address is watchonly |
| address            | (string)                                      | the shielded address                                                                                     |
| amount             | (numeric)                                     | the amount of value in the note                                                                          |
| memo               | (string)                                      | hexadecimal string representation of memo field                                                          |
| change             | (boolean)                                     | true if the address that received the note is also one of the sending addresses                          |

#### 📌 Examples

Command:

```
./komodo-cli z_listunspent
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    {
      "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
      "outindex": 0,
      "confirmations": 1,
      "rawconfirmations": 1,
      "spendable": true,
      "address": "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z",
      "amount": 77.00000000,
      "memo": "f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "change": false
    }
  ]
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli -ac_name=BEER z_listunspent 1 100 false "[\"zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z\"]"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  [
    {
      "txid": "b9a98f3cbfec7a8a93c240e19e8eea5ab3ee8de3e6372105ffb72308b72ea05f",
      "outindex": 0,
      "confirmations": 2,
      "rawconfirmations": 2,
      "spendable": true,
      "address": "zs1wqykmk74mv2ezjscpxsgzrn4fasqwh50tgk0ym64m45c5yw5fjtpkps64gle963veqzuj04872z",
      "amount": 77.00000000,
      "memo": "f
      "change": false
    }
  ]
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user rpcuser:rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_listunspent", "params": [1, 9999999, false, ["zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg"] ] }' -H 'content-type: text/plain;' http://127.0.0.1:rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  blockHash 0a4f15fe5425ef8bc6eb84e7bc3625c1ceccb3e49132b696a1841ab17a75a705 height 55200
  {"result":[{"txid":"23d33c0c12ba2224b2c9c252e304f491bf76ca05670c8f00d48300776c10850f","outindex":0,"confirmations":1,"rawconfirmations":1,"spendable":true,"address":"zs1umhaattx6lna933m9zwfqlmkm2qj49hpa9lnymtj5h5c7cwtd3evfpu29hppprax9cs45fzeyqg","amount":100.00000000,"memo":"fchange":false}],"error":null,"id":"curltest"}
  ```
</CollapsibleSection>

## z\_mergetoaddress

**z\_mergetoaddress \[ "fromaddress", ... ] "toaddress" ( fee ) ( transparent\_limit ) ( shielded\_limit ) ( memo )**

<Note type="warning">
  CAUTION: <b>z\_mergetoaddress</b> is DISABLED but can be enabled as an
  experimental feature.
</Note>

The `z_mergetoaddress` method merges multiple utxos and notes into a single utxo or note. The method works for both t addresses and z addresses, both separately and in combination. Coinbase utxos are ignored; use `z_shieldcoinbase` to combine those into a single note.

This is an asynchronous operation, and utxos selected for merging will be locked. If there is an error, they are unlocked. The RPC call `listlockunspent` can be used to return a list of locked utxos.

The number of utxos and notes selected for merging can be limited by the caller. If the transparent limit parameter is set to `0`, the `mempooltxinputlimit` option will determine the number of utxos. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes.

### The fromaddresses array

The following special strings are accepted inside the `fromaddresses` array:

*   `"*"`: Merge both utxos and notes from all addresses belonging to the wallet

*   `"ANY_TADDR"`: Merge utxos from all t addresses belonging to the wallet

*   `"ANY_ZADDR"`: Merge notes from all z addresses belonging to the wallet

If a special string is given, any given addresses of that type will be ignored

### Arguments

| Name               | Type                                | Description                                                                                                                                                                                             |
| ------------------ | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| fromaddresses      | (string, required)                  |                                                                                                                                                                                                         |
| "address"          | (string)                            | can be a t address or a z address                                                                                                                                                                       |
| "toaddress"        | (string, required)                  | the t address or z address to receive the combined utxo                                                                                                                                                 |
| fee                | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                                                                                                                            |
| transparent\_limit | (numeric, optional, default=50)     | limit on the maximum number of transparent utxos to merge; you may set this value to 0 to use the node option [mempooltxinputlimit](/smart-chains/setup/common-runtime-parameters/#mempooltxinputlimit) |
| shielded\_limit    | (numeric, optional, default=10)     | limit on the maximum number of hidden notes to merge; you may set this value to 0 to merge as many as will fit in the transaction                                                                       |
| "memo"             | (string, optional)                  | encoded as hex; when `toaddress` is a z address, this value will be stored in the memo field of the new note                                                                                            |

### Response

| Name                        | Type      | Description                                                                         |
| --------------------------- | --------- | ----------------------------------------------------------------------------------- |
| "remainingUTXOs"            | (numeric) | the number of utxos still available for merging                                     |
| "remainingTransparentValue" | (numeric) | the value of utxos still available for merging                                      |
| "remainingNotes"            | (numeric) | the number of notes still available for merging                                     |
| "remainingShieldedValue"    | (numeric) | the value of notes still available for merging                                      |
| "mergingUTXOs"              | (numeric) | the number of utxos being merged                                                    |
| "mergingTransparentValue"   | (numeric) | the value of utxos being merged                                                     |
| "mergingNotes"              | (numeric) | the number of notes being merged                                                    |
| "mergingShieldedValue"      | (numeric) | the value of notes being merged                                                     |
| "opid"                      | (string)  | an operationid to pass to `z_getoperationstatus` to get the result of the operation |

#### 📌 Examples

Command:

```bash
./komodo-cli z_mergetoaddress '["R1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd"]' ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (disabled)
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_mergetoaddress", "params": [["R1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd"], "ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  (disabled)
  ```
</CollapsibleSection>

## z\_sendmany

**z\_sendmany "fromaddress" \[ \{ "address": ..., "amount": ... }, ... ] ( minconf ) ( fee )**

The `z_sendmany` method sends one or more transactions at once, and allows for sending transactions of types `t --> t`, `t --> z`, `z --> z`, `z --> t`. It is the principle method for dealing with shielded `z` transactions in the Komodo ecosystem.

The `amount` values are double-precision floating point numbers. Change from a t address flows to a new t address address, while change from z address returns to itself. When sending coinbase utxos to a z address, change is not allowed. The entire value of the utxo(s) must be consumed. Currently, the maximum number of z address outputs is 54 due to transaction-size limits.

### Arguments

| Name          | Type                                | Description                                                                                            |
| ------------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------ |
| "fromaddress" | (string, required)                  | the sending t address or z address                                                                     |
| "amounts"     | (array of json objects)             |                                                                                                        |
| "address"     | (string, required)                  | the receiving address; can be a t address or z address                                                 |
| "amount"      | (numeric, required)                 | the numeric amount                                                                                     |
| "memo"        | (string, optional)                  | if the address is a z address, this property accepts raw data represented in hexadecimal string format |
| minconf       | (numeric, optional, default=1)      | only use funds confirmed at least this many times                                                      |
| fee           | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                           |

### Response

| Name          | Type     | Description                                                                        |
| ------------- | -------- | ---------------------------------------------------------------------------------- |
| "operationid" | (string) | an operationid to pass to z\_getoperationstatus to get the result of the operation |

#### 📌 Examples

Command:

```bash
./komodo-cli z_sendmany "RUX5vGkxJCKBPGm8b97VUumt2aHkuCjp8e" '[{"address":"RVEsww91UBdUNGyCC1GjDVuvJShEei2kj4","amount":0.01}]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  opid-ad947755-b348-4842-90ca-0f0c71d13d34
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_sendmany "RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns" '[{"address":"ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3","amount":0.01}]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  opid-cdd6af37-88a2-44d7-9630-d54d21f8b1c4
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_sendmany "ztci8RzNSo2pdiDpAeHpz9Rp91hq12Mn7zcFfBR8Jjs2ydZUCTw8rLZzkVP888M4vGezpZVfsTR8orgxYK3N8gdgbBzakx3" '[{"address":"ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP","amount":0.0099}]'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  opid-3c3d6f25-f333-4898-8a50-06f4012cf975
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_sendmany", "params": ["RCpMUZwxc3pWsgip5aj3Sy1cKkh86P3Tns", [{"address": "ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf" ,"amount": 0.01}]] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```bash
  {
    "result": "opid-73306924-3466-4944-a8f7-c45c14be0438",
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## z\_shieldcoinbase

**z\_shieldcoinbase "fromaddress" "tozaddress" ( fee ) ( limit )**

The `z_shieldcoinbase` method shields transparent coinbase funds by sending the funds to a shielded z address. This is an asynchronous operation and utxos selected for shielding will be locked. If there is an error, they are unlocked.

The RPC call `listlockunspent` can be used to return a list of locked utxos. The number of coinbase utxos selected for shielding can be limited by the caller. If the limit parameter is set to zero, the [mempooltxinputlimit](/smart-chains/setup/common-runtime-parameters/#mempooltxinputlimit) option will determine the number of uxtos. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes.

### Arguments

| Name          | Type                                | Description                                                                                         |
| ------------- | ----------------------------------- | --------------------------------------------------------------------------------------------------- |
| "fromaddress" | (string, required)                  | the address is a t address or `"*"` for all t address belonging to the wallet                       |
| "toaddress"   | (string, required)                  | the address is a z address                                                                          |
| fee           | (numeric, optional, default=0.0001) | the fee amount to attach to this transaction                                                        |
| limit         | (numeric, optional, default=50)     | limit on the maximum number of utxos to shield; set to `0` to use node option `mempooltxinputlimit` |

### Response

| Name             | Type      | Description                                                                        |
| ---------------- | --------- | ---------------------------------------------------------------------------------- |
| "remainingUTXOs" | (numeric) | the number of coinbase utxos still available for shielding                         |
| "remainingValue" | (numeric) | the value of coinbase utxos still available for shielding                          |
| "shieldingUTXOs" | (numeric) | the number of coinbase utxos being shielded                                        |
| "shieldingValue" | (numeric) | the value of coinbase utxos being shielded                                         |
| "opid"           | (string)  | an operationid to pass to z\_getoperationstatus to get the result of the operation |

#### 📌 Examples

Command:

```bash
./komodo-cli z_shieldcoinbase "RXN2rxidK4cwzRL44UTnWvQjjvLdoMmCpU" "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP"
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "remainingUTXOs": 0,
    "remainingValue": 0.0,
    "shieldingUTXOs": 2,
    "shieldingValue": 0.0003,
    "opid": "opid-c0a7875c-aaa0-4bdc-8f17-b34ab99e8bab"
  }
  ```
</CollapsibleSection>

Command:

```bash
./komodo-cli z_shieldcoinbase "REyaj53EB2nwUnsmVyn8JHCcquKf1zYkEP" "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP" 0.0001 50
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "remainingUTXOs": 0,
    "remainingValue": 0.0,
    "shieldingUTXOs": 14,
    "shieldingValue": 0.0016,
    "opid": "opid-08ce931d-876c-45d5-9aea-15cf4c695e72"
  }
  ```
</CollapsibleSection>

You can find your `rpcuser`, `rpcpassword`, and `rpcport` in the coin's `.conf` file.

Command:

```bash
curl --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "z_shieldcoinbase", "params": ["RWRSfEYcfLv3yy9mhAuKHQTMCs9fArpPiH", "ztYMDvwUqi5FZLQy4so71ZGHXk2fDtEYU9HNns9DNYjXJr9PEzSL8Dq8NcdiRijsgCm4r3nNWA6dUrqW9suGd2F7uuj2BhP"] }' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "remainingUTXOs": 0,
      "remainingValue": 0,
      "shieldingUTXOs": 1,
      "shieldingValue": 0.00025,
      "opid": "opid-53018a85-cf68-4e7d-a065-0defea6bf061"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## zcbenchmark

**zcbenchmark benchmarktype samplecount**

The `zcbenchmark` method runs a benchmark of the selected `benchmarktype`. This benchmark is calculated `samplecount` times.

When finished, the method returns the running times of each sample.

### Arguments

| Name            | Type               | Description                   |
| --------------- | ------------------ | ----------------------------- |
| "benchmarktype" | (string, required) | the type of the benchmark     |
| "samplecount"   | (numeric)          | the number of samples to take |

### Response

| Name          | Type      | Description                                          |
| ------------- | --------- | ---------------------------------------------------- |
| "runningtime" | (numeric) | the time it took to run the selected `benchmarktype` |

Output:

```json
[
  {
    "runningtime": runningtime
  },
  {
    "runningtime": runningtime
  }
  ...
]
```

## zcrawjoinsplit

**zcrawjoinsplit rawtx inputs outputs vpub\_old vpub\_new**

<Note type="warning">DEPRECATED.</Note>

*   inputs: a JSON object mapping \{note: zcsecretkey, ...}
*   outputs: a JSON object mapping \{zcaddr: value, ...}

Splices a joinsplit into a raw transaction. Inputs are unilaterally confidential.
Outputs are confidential between sender/receiver. The vpub\_old and
vpub\_new values are globally public and move transparent value into
or out of the confidential value store, respectively.

Note: The caller is responsible for delivering the output enc1 and
enc2 to the appropriate recipients, as well as signing rawtxout and
ensuring it is mined. (A future RPC call will deliver the confidential
payments in-band on the blockchain.)

Output:

```json
{
  "encryptednote1": enc1,
  "encryptednote2": enc2,
  "rawtxn": rawtxout
}
```

## zcrawkeygen

**zcrawkeygen**

<Note type="warning">DEPRECATED.</Note>

the `zcrawkeygen` method generates a zcaddr which can send and receive confidential values.

Output:

```json
{
  "zcaddress": zcaddr,
  "zcsecretkey": zcsecretkey,
  "zcviewingkey": zcviewingkey
}
```

## zcrawreceive zcsecretkey encryptednote

**zcrawreceive zcsecretkey encryptednote**

<Note type="warning">DEPRECATED.</Note>

Decrypts `encryptednote` and checks if the coin commitments
are in the blockchain as indicated by the "exists" result.

Output:

```json
{
  "amount": value,
  "note": noteplaintext,
  "exists": exists
}
```

## zcsamplejoinsplit

Perform a joinsplit and return the JSDescription.
export const title = "Change Log";
export const description = "Find the Changelogs of various versions of Komodo daemon on this page.";

# Change Log

Version 0.5.0 of the Komodo daemon includes the following changes.

## List of Changes

*   zMempool fix
*   KMDnuke fix
*   POS staking algo change
*   AC related fixes
*   CC fixes and additions
*   add season 3.5 pubkey array
*   protocol version bump
*   update libsodium 1.0.18
*   update libgmp URL
*   update libsnark URL
*   update channelsCC test
*   use kmd metrics art
export const title = "Introduction to Smart Chain Documentation";
export const description = "Discover the comprehensive Smart Chain technical documentation, covering installation, setup, tutorials, and API commands for developers.";

# Introduction to Smart Chain Documentation

Welcome to the Smart Chain technical documentation.

#### About the Smart Chain Section

This documentation is intended for developers learning about, building, and interacting with Smart Chain products.

Users who are not interested in these activities, but are searching for assistance, can find support in the Komodo Support Center.

[<b>Link to Komodo Support Center</b>](https://support.komodoplatform.com/support/home)

[<b>Link to Simple Installation Procedure</b>](/start-here/about-komodo-platform/simple-installations/#simple-installations)

#### Conceptual Overview

A conceptual overview of Smart Chain technology can be found in the <b>Start Here</b> > <b>Product Introductions</b> section.

[<b>Link to Smart Chain Product Introduction</b>](/start-here/about-komodo-platform/product-introductions/#antara-smart-chains)

Also, the reader may turn to the Core Technology Discussion section for a thorough explanation.

[<b>Link to Core Technology Discussion section</b>](/start-here/core-technology-discussions/)

#### About Smart Chain Setup

The Smart Chain Setup section contains basic information about Smart Chains and their creation. Topics include the following:

*   [<b>Installing Smart Chain Software from Source Code</b>](/smart-chains/setup/installing-from-source/#installing-smart-chain-software-from-source-code)

*   [<b>Interacting with Smart Chains</b>](/smart-chains/setup/interacting-with-smart-chains/)

*   [<b>Smart Chain Launch Parameters Common to Most Blockchain Software</b>](/smart-chains/setup/common-runtime-parameters/)

#### About Smart Chain Tutorials

The Smart Chain Tutorials section contains various tutorials that provide instruction in Smart Chain creation and usage.

For a walkthrough covering multiple tutorials in a targeted fashion, please see the [Learning Launchpad](/start-here/learning-launchpad/) section.

#### About Smart Chain API

The Smart Chain API section contains all available API commands for a default Smart Chain daemon.

These API commands can also be called Remote Procedure Calls, or RPCs.

The API section does not include commands that are unique to Antara modules, as Antara modules are not active by default on a Smart Chain daemon. Please see the Antara section for further information.
export const title = "Common Runtime Parameters";
export const description =
  "Learn about common runtime parameters for Komodo Smart Chains, used to define the run time behavior of the Komodo daemon.";

# Common Runtime Parameters

## Introduction

The following is an abbreviated list of runtime parameters and settings that can be initiated in a [Smart Chain's .conf file.](/smart-chains/setup/interacting-with-smart-chains/#location-of-conf-file)

These commands largely derive from the upstream Bitcoin software, `bitcoind`.

Komodo is a fork of Zcash, and Zcash is a privacy-centric fork of Bitcoin. Therefore, essentially all runtime parameters and API commands available in both Bitcoin and Zcash are available in Komodo.

To see additional Bitcoin-based runtime parameters not included here, please visit [the relevant Bitcoin wiki page](https://en.bitcoin.it/wiki/Running_Bitcoin).

## addnode

`addnode` tells the daemon which nodes are trusted to act as seed nodes. After connecting to a node via `addnode`, the trusted node will send your node the list of all nodes that it is connected to, and your node will then connect to these additional nodes until [the max limit](/smart-chains/setup/common-runtime-parameters/#maxconnections) is reached.

This contrasts from the [connect](/smart-chains/setup/common-runtime-parameters/#connect) runtime parameter, as the latter does not attempt to connect your node to additional nodes.

If you are behind a firewall or are having issues connecting to the network, `addnode` is a stronger option.

On the other hand, if you want to connect only to designated and trusted nodes, `connect` is a stronger option.

If you run multiple nodes that are connected via a LAN, it is not necessary for each node to open multiple connections. Instead, use `connect` to connect all to one primary node, and then use `addnode` on the primary node to connect to the network.

The p2p port must not be blocked by a firewall. If the computers do not have public IP addresses, you will need to port-forward the p2p port on both computers and append the forwarded port to the IP.

#### 📌 Examples:

`./komodod -ac_name=EXAMPLECHAIN -ac_supply=1000000 -addnode=<IP of the second node>:8096`

Using addnode as a default value in the Smart Chain's `.conf` file:

```bash
addnode=69.164.218.197
```

## addressindex

`addressindex` instructs a Smart Chain to maintain an index of all addresses and balances.

We recommend that the user [manually delete the blockchain data](/smart-chains/setup/smart-chain-maintenance/#manually-deleting-blockchain-data) before initiating this parameter.

`addressindex` is enabled by default on any Smart Chain that utilizes Antara.

<Note>
  The <b>reindex</b> parameter is not a viable alternative method for re-syncing
  the Smart Chain in this circumstance.
</Note>

#### 📌 Examples:

Using `addressindex` as a runtime parameter:

```bash
komodod -addressindex=1
```

Using `addressindex` as a default value in the Smart Chain's `.conf` file:

```bash
addressindex=1
```

## bantime

`bantime` sets the default number of seconds for a ban initiated during the daemon's session. The default is 86400.

#### 📌 Examples:

Using bantime as a runtime parameter:

```bash
komodod -bantime=100000
```

Using bantime as a default value in the Smart Chain's `.conf` file:

```bash
bantime=100000
```

## bind

`bind` instructs the Smart Chain daemon to bind to a given address and always listen on it.

Use `[host]:port` notation for IPv6.

#### 📌 Examples:

Using bind as a runtime parameter:

```bash
komodod -bind=127.0.0.1:9050
```

Using bind as a default value in the Smart Chain's `.conf` file:

```bash
bind=127.0.0.1:9050
```

## connect

`connect` connects the `komodod` server to a trusted peer node, but not to request or add any additional nodes.

Please refer to the [addnode](/smart-chains/setup/common-runtime-parameters/#addnode) parameter entry for more information.

#### 📌 Examples:

Using connect as a default value in the Smart Chain's `.conf` file:

```bash
connect=69.164.218.197
```

## conf

`conf` allows the user to indicate an alternative configuration file for the Smart Chain daemon. The `conf` runtime parameter requires an absolute path. For example, `/home/user/mydirectory/MYCOIN/MYCOIN.conf`. Once the `conf` parameter is activated, the default configuration file is otherwise ignored.

#### 📌 Examples:

Using `conf` as a runtime parameter:

```bash
komodod -conf=/home/username/coinConfs/DEX.conf
```

## datadir

`datadir` allows the user to indicate an alternative blockchain-data directory for the Smart Chain daemon. The `datadir` parameter requires an absolute path. For example, `home/user/mydirectory/MYCOIN/MYCOINDATA`. Once this parameter is activated, the daemon will ignore the default data directory.

The name of the alternative directory must match the value provided to the [ac\_name](/antara/setup/antara-customizations/#ac-name) parameter.

#### 📌 Examples:

Using `datadir` as a runtime parameter:

```bash
komodod -datadir=/home/username/coinData/DEX
```

## donation

`donation` donates all user rewards to a specific address. This value must be set to a 33 byte pubkey.

#### 📌 Examples:

Using donation as a default value in the Smart Chain's `.conf` file:

```bash
donation=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

## exchange

`exchange` forfeits all user rewards to miners. Set this to explicitly not claim user rewards.

#### 📌 Examples:

Using exchange as a default value in the Smart Chain's `.conf` file:

```bash
exchange=1
```

## exportdir

`exportdir` tells the Smart Chain daemon where to store the wallet backup files created through the [backupwallet](/smart-chains/api/wallet/#backupwallet) and [dumpwallet](/smart-chains/api/wallet/#dumpwallet) calls.

#### 📌 Examples:

Using exportdir as a default value in the Smart Chain's `.conf` file:

```bash
exportdir=/home/myusername/mydirectory
```

## gen

`gen` instructs the daemon to attempt to generate new blocks, and thereby mine new coins.

See also [setgenerate](/smart-chains/api/generate/#setgenerate).

<Note type="warning">
  This parameter should be avoided. Instead, start the daemon without the `-gen`
  parameter. Once the Smart Chain is launched, wait until the blockchain is
  synced to the current block and then execute the
  [setgenerate](/smart-chains/api/generate/#setgenerate) method. The sync status
  of the blockchain can be found by executing the
  [getinfo](/smart-chains/api/control/#getinfo) method and comparing the `blocks`
  and `longestchain` properties.
</Note>

<Note>
  *   If the `genproclimit` property is not specified after the `gen` option, the daemon mines using 1 thread.
  *   To mine using all available threads, use: `-genproclimit=-1`
</Note>

<Note>
  `gen=0` in the .conf file on an Smart Chain where [<b>ac\_staked</b>
  ](/antara/setup/antara-customizations/#ac-staked) is enabled sets the daemon to
  stake using all available coins
</Note>

#### 📌 Examples:

Using gen as a runtime parameter to mine using 4 threads:

```bash
./komodod -gen -genproclimit=4
```

## genproclimit

`genproclimit` sets the number of threads to be used for mining. To use all the available processors, use the value `-1`.

<Note>
  Setting `genproclimit=0` instructs the daemon to stake (if possible) using all
  available coins.
</Note>

#### 📌 Examples:

Using genproclimit as a default value in the Smart Chain's `.conf` file, to mine using 2 threads:

```bash
genproclimit=2
```

## keypool

`keypool` instructs the daemon to pre-generate a certain number of public/private key pairs. This can facilitate `wallet.dat` backups being valid for both prior transactions and several dozen future transactions.

#### 📌 Examples:

Using keypool as a default value in the Smart Chain's `.conf` file:

```bash
keypool=100
```

## listen

`listen` instructs the daemon to listen for RPC calls on the network. It is enabled by default, except when `connect` is used.

#### 📌 Examples:

Using listen as a runtime parameter:

```bash
komodod -listen=1
```

Using listen as a default value in the Smart Chain's `.conf` file:

```bash
listen=1
```

## maxconnections

`maxconnections` sets the maximum number of inbound and outbound connections.

#### 📌 Examples:

Using maxconnections as a runtime parameter:

```bash
komodod -maxconnections=NUMBER
```

Using maxconnections as a default value in the Smart Chain's `.conf` file:

```bash
maxconnections=NUMBER
```

## mempooltxinputlimit

<Note>DEPRECATED</Note>

`mempooltxinputlimit` is a runtime parameter inherited from Zcash. The functionality it facilitates is now enabled by default, and therefore the parameter is deprecated. Please see [the Zcash documentation for more information](https://electriccoin.co/blog/new-release-1-1-0/).

## port

`port` tells the daemon to listen for p2p connections on the indicated TCP port, overwriting the default. The default p2pport for the Komodo(KMD) blockchain is 7770. The default p2p port of a Smart Chain is solely dependant on the `-ac_` [Antara customization parameters](/antara/setup/antara-customizations/) and values used to launch it.

#### 📌 Examples:

Using port as a default value in the Smart Chain's `.conf` file:

```bash
port=8231
```

## proxy

`proxy` allows the user to connect via a `SOCKS5` proxy.

#### 📌 Examples:

Using proxy as a runtime parameter:

```bash
komodod -proxy=127.0.0.1:9050
```

Using proxy as a default value in the Smart Chain's `.conf` file:

```bash
proxy=127.0.0.1:9050
```

## pubkey

`pubkey` sets an address to use as a change address for all transactions. This value must be set to a 33 byte pubkey. All mined/staked coins will also be sent to this address. We recommend that the user ensure they own the corresponding `privkey` of their chosen `pubkey`, lest their funds be sent to a `pubkey` they do not own or control.

The `pubkey` parameter is required for all Antara-enabled chains. All Antara transactions will utilize the `pubkey` as an integral property.

#### 📌 Examples:

Using pubkey as a default value in the Smart Chain's `.conf` file:

```bash
pubkey=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

Using pubkey as a startup parameter:

```bash
-pubkey=027dc7b5cfb5efca96674b45e9fda18df069d040b9fd9ff32c35df56005e330392
```

## regtest

`regtest` instructs the Smart Chain daemon to run a regression test network. Typically, the user will create a disposable Smart Chain for these purposes. The [ac\_supply](/antara/setup/antara-customizations/#ac-supply) parameter is not required in this instance.

(A regression-test network is a useful tool for rapid trial and testing. [Please reach out to us](https://komodoplatform.com/discord) if you are curious to implement this tool in your workflow and are unfamiliar with the process.)

#### 📌 Examples:

Using regtest as a runtime parameter:

```bash
komodod -ac_name=TEST -regtest
```

Using regtest as a default value in the Smart Chain's `.conf` file:

```bash
regtest=0
```

## reindex

`reindex` instructs the daemon to re-index the currently synced blockchain data.

<Note>
  Depending on the size and state of the chain you are re-indexing, this
  parameter may prolong the daemon launch time.
</Note>

#### 📌 Examples:

Using reindex as a runtime parameter:

```bash
komodod -reindex
```

## rewind

`rewind` rewinds the chain to a specific block height. This is useful for creating snapshots at a given block height.

#### 📌 Examples:

Using rewind as a runtime parameter:

```bash
komodod -rewind=777777
```

## rpcallowip

`rpcallowip` tells the daemon which ip addresses are acceptable for receiving rpc commands.

By default, only rpc connections from localhost are allowed.

Specify as many `rpcallowip=` settings as you like to allow connections from other hosts, either as a single IPv4/IPv6 or with a subnet specification.

<Note type="warning">
  Opening up the RPC port to hosts outside your local trusted network is NOT RECOMMENDED. The rpcpassword is transmitted over the network unencrypted. Also note that anyone that can authenticate on the RPC port can steal your keys and take over the server. [For more information click here](https://github.com/zcash/zcash/issues/1497).
</Note>

#### 📌 Examples:

Using rpcallowip as a default value in the Smart Chain's `.conf` file:

```bash
  rpcallowip=10.1.1.34/255.255.255.0
  rpcallowip=1.2.3.4/24
  rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96
```

## rpcbind

`rpcbind` instructs the daemon to listen for json-rpc connections.

Use `[host]:port` notation for IPv6.

This option can be specified multiple times.

The default setting is to bind to all interfaces.

#### 📌 Examples:

Using rpcbind as a runtime parameter:

```bash
komodod -rpcbind=127.0.0.1:9704
```

Using rpcbind as a default value in the Smart Chain's `.conf` file:

```bash
rpcbind=127.0.0.1:9704
```

## rpcclienttimeout

`rpcclienttimeout` indicates the number of seconds to wait for an rpc command to complete before killing the process.

#### 📌 Examples:

Using rpcclienttimeout as a runtime parameter:

```bash
komodod -rpcclienttimeout=SECONDS
```

Using rpcclienttimeout as a default value in the Smart Chain's `.conf` file:

```bash
rpcclientttimeout=SECONDS
```

## rpcconnect

`rpcconnect` allows the user to connect to `komodod` and send RPC commands from a host. By default, it is set to localhost.

<Note type="warning">
  We DO NOT RECOMMEND that the average user set this value to anything other
  than the localhost, as it can grant access to a foreign party, who are then
  able to take control over komodod and all funds in your wallet.dat file.
</Note>

#### 📌 Examples:

Using rpcconnect as a default value in the Smart Chain's `.conf` file:

```bash
rpcconnect=127.0.0.1
```

## rpcport

`rpcport` tells the daemon to listen for RPC connections on the indicated TCP port overwriting the default. The default rpcport for the Komodo(KMD) blockchain is 7771. The default rpcport of a Smart Chain is solely dependant on the `-ac_` [Antara customization parameters](/antara/setup/antara-customizations/) and values used to launch it.

#### 📌 Examples:

Using rpcport as a default value in the Smart Chain's `.conf` file:

```bash
rpcport=8232
```

## sendfreetransactions

`sendfreetransactions` instructs the daemon to send transactions as zero-fee transactions if possible. The default value is 0.

#### 📌 Examples:

Using sendfreetransactions as a default value in the Smart Chain's `.conf` file:

```bash
sendfreetransactions=0
```

## server

`server` instructs the daemon to accept json-rpc commands. It is enabled by default.

#### 📌 Examples:

Using server as a runtime parameter:

```bash
komodod -server=1
```

Using server as a default value in the Smart Chain's `.conf` file:

```bash
server=1
```

## spentindex

`spentindex` instructs a Smart Chain to maintain a full index of all spent transactions (txids).

We recommend that the user [manually delete the blockchain data](/smart-chains/setup/smart-chain-maintenance/#manually-deleting-blockchain-data) before initiating this parameter.

`spentindex` is enabled by default on any Smart Chain that utilizes Antara.

<Note>
  The <b>reindex</b> parameter is not a viable alternative method for re-syncing
  the blockchain in this circumstance.
</Note>

#### 📌 Examples:

Using spentindex as a runtime parameter:

```bash
komodod -spentindex=1
```

Using spentindex as a default value in the Smart Chain's `.conf` file:

```bash
spentindex=1
```

## stopat

`stopat` stops the chain at a specific block height. This is useful for creating snapshots at a given block height.

#### 📌 Examples:

Using stopat as a runtime parameter:

```bash
komodod -stopat=1000000
```

{/* <!---FIXME: Needs confirmation from alright */}

splitperc

The `splitperc` parameter allows the user to decide what happens to a UTXO that is successfully able to stake a block in the POS64 staking system (i.e. a Smart Chain started using the [-ac\_staked](/antara/setup/antara-customizations/#ac-staked) Antara customization parameter). This parameter's value defines the percentage of the staking UTXO value to leave in the same address. The rest of of the staking UTXO value is added to the new UTXO created to the coinbase address.

Examples:

*   `-splitperc=0` merges the staking UTXO value and the coinbase value to the coinbase address
*   `-splitperc=50` takes half of the staking UTXO value and sends it to the coinbase address
*   `-splitperc=100` does not change the staking UTXO

#### 📌 Examples:

Using splitperc as a runtime parameter:

```bash
komodod -ac_name=HELLOWORLD -ac_supply=777777 -ac_reward=100000000 -ac_staked=20 -splitperc=50
```

## testnode

The `testnode` parameter allows the daemon to mine without being connected to any other peers. This is useful for debugging and testing.

If this parameter is not set, the daemon will not attempt to mine blocks unless it has at least one other peer.

#### 📌 Examples:

Using testnode as a runtime parameter:

```bash
./komodod -testnode=1
```

Using testnode as a default value in the Smart Chain's `.conf` file:

```bash
testnode=1
```

## timestampindex

`timestampindex` instructs a Smart Chain to maintain a timestamp index for all block hashes.

We recommend that the user [manually delete the blockchain data](/smart-chains/setup/smart-chain-maintenance/#manually-deleting-blockchain-data) before initiating this parameter.

<Note>
  The <b>reindex</b> parameter is not a viable alternative method for re-syncing
  the Smart Chain in this circumstance.
</Note>

#### 📌 Examples:

Using timestampindex as a runtime parameter:

```bash
./komodod -timestampindex=1
```

Using timestampindex as a default value in the Smart Chain's `.conf` file:

```bash
timestampindex=1
```

## txindex

`txindex` instructs a Smart Chain to track every transaction made on the relevant blockchain.

`txindex` is enabled by default on all Smart Chains, and is utilized in delayed Proof of Work (dPoW), privacy modules, and Antara.

<Note type="error">
  Disabling `txindex` will cause the default Smart Chain daemon to malfunction.
</Note>

## whitebind

`whitelist` binds the daemon to a given address and whitelists peers connecting to it.

Use `[host]:port` notation for IPv6

#### 📌 Examples:

Using whitebind as a runtime parameter:

```bash
komodod -whitebind=127.0.0.1:9050
```

Using whitebind as a default value in the Smart Chain's `.conf` file:

```bash
whitebind=127.0.0.1:9050
```
export const title =
  "Enhanced P2P data communication between Smart Chain nodes.";
export const description =
  "All the nodes of a Smart Chain started with the parameter `-dexp2p` start listening and propagating data packets broadcasted by other nodes on the network.";

# Enhanced Peer to Peer data broadcast and synchronisation between Nodes of a Smart Chain

<Note>
  This Peer to Peer Messaging Enhancement technology is in development. The
  specifics of the implementation are subject to change. This document is a Work
  In Progress.
</Note>

## Introduction

All the nodes of a Smart Chain started with the **Optional** parameter `-dexp2p` (set to `1` or `2`) start listening and propagating data packets broadcasted by other nodes on the network. These data packets don't necessarily contain the Smart Chain's transactions, are stored in a node's RAM and dropped after 1 hour.

Let's call this local data stored as "Data Mempool" as opposed to the "Mempool/Transaction Mempool" that stores just the unconfirmed transactions of the Smart Chain. The data is transmitted from from one node to another in the form of "datablobs". A "datablob" contains the timestamp, the data itself (encrypted if a destination pubkey is provided, see: [DEX\_broadcast](#dex-broadcast)), a nonce, the SHA256 hash of the payload and other metadata.

*   if `-dexp2p=1` is used, the node will participate in the p2p data network but doesn't respond to requests from nSPV superlight clients
*   if `-dexp2p=2` is used, the node will participate in the p2p data network and also responds to requests from nSPV superlight clients

This p2p data transmission and synchronisation layer can be used for any generic data. But, there are certain enhancements made to the RPC that enable the usage of this layer as a Decentralised, Peer to Peer order broadcasting mechanism for the [AtomicDEX-API](../../atomicdex/api/)

## Installation

```bash
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev python-zmq zlib1g-dev wget curl bsdmainutils automake cmake clang libsodium-dev libcurl4-gnutls-dev libssl-dev git unzip python jq htop -y
git clone https://github.com/jl777/komodo -b jl777 --single-branch
cd komodo
./zcutil/fetch-params.sh
./zcutil/build.sh -j$(nproc)
```

## Launch

Currently, this technology is being tested on a test chain named `DORN`

Launch Parameters:

```bash
./komodod -ac_name=DORN -ac_cc=2 -ac_supply=1000000 -ac_reward=100000000 -addnode=136.243.58.134 -dexp2p=2
```

You might want to add the parameter `-pubkey` with the value as your pubkey for convenient testing of encrypted "datablobs" across multiple daemon restarts

## Daemon Output

After the initial output common to all the daemons is printed, a daemon started with the `-dexp2p=2` command starts printing statistics about the datablobs it has seen and the state of the `dexp2p` network from its perspective. Most of the stats from the daemon output can also be accessed through the [DEX\_stats](#dex-stats) RPC

Example:

```bash
2040: del.0 00000000, RAM.207 84b824a6 R.0 S.621 A.621 dup.0 | L.0 A.0 coll.0 | lag  0.000 (0.0000 0.0000 0.0000) err.0 pend.0 T/F 414/414 | 0 0 0 0 0 0 1 1 6 4 10 31 46 108  3/sec
```

### Explanation

*   `2040` is the time in seconds since the last purge of the datablobs stored in the node's RAM; calculated as `unixtimestamp % purgetime` ; `%` means [modulo](https://en.wikipedia.org/wiki/Modulo_operation) and the default purge time is `1 hour`
*   `del.0` means `0` datablobs were purged by the node in the last minute
*   `00000000` is the checksum of the purged datablobs in the last second (for performance reasons)
*   `RAM.207` means there are currently `207` datablobs in the node's RAM
*   `84b824a6` is the checksum of all the datablobs in the RAM
*   `R.0 S.621 A.621` means the node Received `0` messages, Sent `621` messages, Added `621` messages; there are no right or wrong `R` and `S` values; ideally, all the nodes that don't publish/stream should have the same R and S values; but, some nodes may have larger `S` values than `R` based on connectivity, network topology and which datablobs its peers already have
*   `dup.0` means the node received `0` duplicate datablobs; high amount of duplicates is bad as it wastes bandwidth
*   `L.0 A.0 coll.0` these are some stats for internal tracking/debugging and should not be relevant to a user/developer
*   `lag  0.000 (0.0000 0.0000 0.0000)` in this string, the number right beside the word `lag` is the average lag over different windows of datablobs. The numbers in the brackets denote the actual lags in the different windows. The different windows are: `fast window`, `medium window`, `long window` which mean the most recent `1000`, `10000`, `100000` datablobs respectively; there might be huge values of lag recorded within the `first minute` of starting the node as VIP datablobs from other nodes start arriving even though they weren't published recently
*   `err.0` means `0` non-VIP datablobs were received with over `1 minute` lag
*   `pend.0` means there are `0` pending datablobs to be received from the network
*   `T/F 414/414` means `414` datablobs were purged by the node the the datablobs are first `Truncated` and then their memory `Freed`; this number together with the value of `RAM` (number of datablobs currently in `RAM`) can be treated as the total number of datablobs processed by the node since its launch
*   `0 0 0 0 0 0 1 1 6 4 10 31 46 108` these numbers are the total number of datablobs in the node's RAM classified by their priority; the rightmost number gives the total number of datablobs with priority `0`, the one left to it gives the total number of datablobs with priority `1` and so on.... ; the left most number gives the total number of datablobs with priority greater than `13`
*   `3/sec` is the number of datablobs per second for the last minute

## DEX\_anonsend

**DEX\_anonsend message priority destpub33**

This method can be used by a user to broadcast any message to the p2p network without revealing either the `DEX_pubkey`s involved or the contents of the message to the network. The datablob so created will be added to the "Data Mempools" of all the nodes with the parameter `-dexp2p` set to `1` or `2`, but can only be decrypted by the node whose `DEX_pubkey` is `destpub33`. The recipient node can also see the `DEX_pubkey` of the sender.

<Note>
  This is achieved by first encrypting the message to the `DEX_pubkey` : `destpub33` and then encrypting it again using a publicly known key pair. This makes it so that, the datablob looks the same regardless who sent it, and only the node with `DEX_pubkey` set to `destpub33` will be able to decrypt it.

  Note that, an attacker with large resources will be able to tell the ip address of the node which published the data packet and if the node publishes other datablobs that reveal its `DEX_pubkey`, thereby linking them. But, it is not possible for the uninvolved to know who the intended recipient is.
</Note>

#### Arguments

| Name      | Type     | Description                                                  |
| --------- | -------- | ------------------------------------------------------------ |
| message   | (string) | the message to be sent                                       |
| priority  | (number) | the priority with which the anonymous message has to be sent |
| destpub33 | (string) | the `DEX_pubkey` of the recipient node                       |

#### Response

| Name         | Type      | Description                                                                                                                                                             |
| ------------ | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| timestamp    | (number)  | UNIX timestamp at which the datablob was created                                                                                                                        |
| id           | (number)  | short hash of the datablob; can be treated as a unique id most of the time                                                                                              |
| hash         | (string)  | hash of the datablob                                                                                                                                                    |
| tagA         | (string)  | `tagA` of the datablob; is set to the value "anon"                                                                                                                      |
| tagB         | (string)  | `tagB` of the datablob; is empty for this datablob                                                                                                                      |
| pubkey       | (string)  | the public `DEX_pubkey` that was used to authenticate the datablob                                                                                                      |
| payload      | (string)  | all the data being sent in the datablob; contains the data,tags,volumes etc.,                                                                                           |
| hex          | (boolean) | whether the `payload` is in hexadecimal format                                                                                                                          |
| decrypted    | (number)  | the decrypted payload;                                                                                                                                                  |
| decryptedhex | (number)  | whether the decrypted payload is in hexadecimal format; `0` when `false` and `1` when `true`;                                                                           |
| senderpub    | (string)  | the actual `DEX_pubkey` of the sender                                                                                                                                   |
| amountA      | (string)  | amount associated with `tagA` (volumeA)                                                                                                                                 |
| amountB      | (string)  | amount associated with `tagB` (volumeB)                                                                                                                                 |
| priority     | (number)  | the priority with which the datablob will be routed by the network                                                                                                      |
| recvtime     | (number)  | the unix timestamp at which the datablob was first observed by the node                                                                                                 |
| cancelled    | (number)  | whether the `datablob` is set to be purged prematurely; in the context of AtomicDEX orders, it means the order has been cancelled; `0` when `false` and `1` when `true` |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_anonsend "hello" 6 012767b0e6d680cf65b1993ddb4ccbb7f1acd027a04ed93c0b06f97714284e214d
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1582121955,
    "id": 1382744064,
    "hash": "0700b02645281e947840db05439de8b1c2d38e1aac34c864558f86e845abac0f",
    "tagA": "anon",
    "tagB": "",
    "pubkey": "011259ec21d31a30898d7cd1609f80d9668b4778e3d97e941044b39f0c44d2e51b",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063b5a6f12f8925545dab0f65a2589f272653b9db3e99fdcc76000000000000000000000000000000009e1d68cc7d8fa2d25eddbadebca787be37ccf36cf8dd964dd95c3775dfd7d04164f9e9f358c095a92bf1ea7541677ab3355c931b54471fcfeeae34bdfc8496615d1e754829a59357ff2efbee396fc6fb8d4c2770088531a23e2bcb87fdfa9b24d212c6731664a8d8a1f84c56f8efbbad08659d7387f0a02c7b516482b8872ec8ab85704ff293bd809acd84666b66b03d05a7de0523236812e988ba047a87da7176fa6113ad5047cb2c90dc1a0940dbcf67e52d64f70b2ae4a6bc10288a8b60daf243f0b9a7d1e51809ed48ef9c7f46b370974ca6694291a800f9d28868c79427254b1b12ad8a325da12fee9e707afb9398f00468ae54c26383243b9f2a013b50bc9ce0f81a446350f9767213f6738027f9e1cfa37244a40dbd73c308b9108ae5d9196f79c6f9e474ace0afbad6253ec69c78243e6a9d3ff3c2c7bf08db91c1878ce6a1a68a59dd635278d8266ccb5335b8c3b7ea9882ab40335615cb01e1f72922e9a71047fe9e49b49e17610ffcffb07d66d6ea1f3e568ff6f6039878afaa5d9ffe8d45e600c27f3dad5b83171589c76d0b3c3dfc7e5a4156283f038f245ba915fd869ef87e15c8d06ae178f983b9961f991e7c57b0db169fdd5a8783be87d22cc07f2ca79bd677506e70f6f03f9efb0a2b35b3b4352cd8f532bd325e23c9f23d7e707f5d8d8da9340d0963cec714009d6b2e73de757b37e9f938334545fa2dbcd3b07cc67f4722cf74c9dad52989f5706ba283a30c50de1a38c43d33393095ea91c09528004c424f2102a8e1050c7b45887e71169ea0b83740ff5231eead0d35539928d2bb080519fa36c49d9e8fa567ea4b599da83b609fc4e8c44074a20eea1a220cfc059048a1ac25df1b7b53d22c8593f9bf913a93aa5917ec1a0a5a87ce95dc9b8f090f67d5a16e2f19aab2ecc901f21f08eecc3c8a1998f1b05370804f5ef3b3b1ccb42c01b18f56b00dc69f3a5b59ca3bfb1d083e6f14d3d5d7943a991bd9c6fbb97041c39a3a5e9dd0990a0c6a78bc4f7c0cf58b66c24be050d338d7d28a0f33c13a08623dea3ccc05f1cb1f05f82357e59ec6e394d6fac32b59ec9424a9c75de522f24071b20553f2933caa33150de3d23b112523bdd0d4e3abb3a87e372c98a4ea25fee0c6cf40388548f9b42181ddf629c44b3fb9ffc4d30fdced6bc80e12c230b39b388187b9d3ee30a5b601bbeb115648c727ead14ee9a71f4bafd1bfbd154c03e8c1e85beb198a212e433e591aa80f5b98688f29de4077c1e8bae7edc74076952ea74b9ee00543c72a743184668ceaa80532b513200ad6ad0b67b7f913cd30e3c1ba9f8eaacdc518d62f515835247b488caa37d6aaed7ffcd523c7b6cf15f54b4d60240e7ba5cf713d884fd48c1caa797b72b4c161a89f1c71f35ffaf7db8c8b1670421f8c21395bfe455ce82bacb25ac93c6a887ccb21c41c74ff74139d2201b69af0852cc6fb2cef6af711e52986ca09cc558a040fcf31c91c518d1abc520a6d592aabf3aba8d839466597650f66fa153b2a5cb1f8f74faf680defc3b5546a673505c11ee5905f7960b3afbb3de3ca96ff04762afa8355609d937754557bc5ed0de5dc2d2a72fac4a256b296758d8d18c3a62045b3dec8a72ff9c45a9d77f007b713fead9ebb9eadeaf35e0684075ef34463c2c48221a9811df7f04190c74e6a7a279ccd6b3ea6b39e61269863ebc5c6fc1b0b29f34e44",
    "hex": 1,
    "decrypted": "1259ec21d31a30898d7cd1609f80d9668b4778e3d97e941044b39f0c44d2e51b595677ddb50546ed90b3b580d377cf83c3ffa7009996a55900000000000000000000000000000000a3a93c0cbd0b1edd933f251bcd15a67d7ca223b59d22e588a55ac9254ff8b3d8c257dc57d355c1e58c839d74938be45c7b214a5fcbe44821599997b38d904bcc20b66663470a27c940d3cf0cfec4533fef53ecc68608a38f9994521fd4b5452a11023446bf76b896734bf9163e84bc9b312fc53874b6dde1e0ad1699f63858d1290c1b78fddf18730bb537416871f8ff3276bdec6f62c8ce6fa17819097cbd1ce16c78b6965444ee7a8bd5b60850fad7b8e54b08f44ebba7406f32ba138c53e5708b8186863ec07da4027d24bea06f8be356cf6b727924ac51efa7a1415b7e2c634511cb84cdf4eea3e7ce4a5948e91c857ec2e71a10e7ab48c7d879035cf0774a1c5dc4c9afb02a7346da1b825a221baff2cb6ab9caa7f9529a9c95fc28364939aee684adaf4fbaac8e0643b0f44e6f1d97e4315444f92295d3d24df7c4b6fdab62b2ad5e06722b61839c4953986a0202631610116c12e1ccdf7bb78cccdba27ba18caeefc8d8dab90993e3993de1c05d7432d1012182d44a1fbac1b9707d62afa72fdf541ad79a4d57e4a509e4e9b862e38a0560c9e79693c546c955426ad1ff8e65059a98f741c96b0a7832a728e5e911197a2e6e74f0fd2e677fd245fc67bd9645b27906c217d17397f4b2c4d4e5b2b1f823cc09f0431432b3708b91dad0d929efd685eb3f61f550b8067458e6c58ff00212a28a87dff830c8014b3b23b35017f14ce74e2b723644423897f81635ba22cec5e4611b4d94f7f40cab7b1cee03d428f3210e69cc6b9491cf0ca81a7d5c0f819818ef4e30614c5e8e633fa569711168fb993521ec37e1527abfaf813933aa2fb72e5cf9d2e6c7466fec7df8a33c6ee2d96959d82672dada84bd343ad99e42642bc45a052f021f93471274228b4766f8c7d44767487bc4b6afd861be3898ee2e1866c3f9cd043e7d6ad331f5028817d755fe9f866342342902ebf309d47b99db5f0e1559c585031a83dcde839b0eeac73991a56775aaf375e7949b632d6e4f168901fa41672935d2f8b503b1c9a16bb6bced2eeab714d2529472c35694ade0b671ab60414b69d5349212812f589d119f5197e16df264dc054f9cf0715991934c82f728475c395d58ee328391625a49bd537777c67fb771b5b3588a61a2d472b119fb47ad320bf7c52090d56305ebd7d6a66ee5d583fd41e9564e565b373f0925aadb29006eaa5d2c6072634fbc0484295fe324dc6a546059f4955ea19dd32b58d5064793ef101b86834ef63d4db8a45c5b3bb850978bf61be83bc74b9437dde1f63302e8a40e7c6b07463ecc1d06a3ede7c5ec56f819c4b20c25c459232af13b1cc266c9a145972296a398a7827e44bf3f5785cb75495345e93739732e8e60bf6d7c874c9af43c3a785c037b493b35293d7aabade9afd8565d89b75899e9fc7a6f90a4deaad4a8d2dd39d36ebb06eebd3e0b034c8a1cb3ff25aaaa6ad1b143349d3f536a81f75a09fa9cdf97bb409aa39abe6e2f6c19c2ff903067fb2d59779219da6272a2ffbc64babedf232220a7c6891a2a2c4d2a0e252f7100e4bb2005a437b59fc23858367e0054197ac55d4a1b7526cab549",
    "decryptedhex": 1,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "amountA": "0.00000000",
    "amountB": "0.00000000",
    "priority": 16,
    "recvtime": 1582121955,
    "cancelled": 0
  }
  ```
</collapse-text>

The receiving node can find all the messages sent to it through the [DEX\_anonsend](#DEX_anonsend) method by using the method [DEX\_list](#dex-list) for listing all the the datablobs with `tagA` set to `"anon"`and looking for the matches that have the keys `"anonmsg"` and `"anonsender"` in them.

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_list "" 0 "anon" "" "" "" ""
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "matches": [
      {
        "timestamp": 1582121848,
        "id": 127520768,
        "hash": "07009d7950140c7fb40d9af5db18cb17d145e977587c9c436c304357b0c910c1",
        "tagA": "anon",
        "tagB": "",
        "pubkey": "011259ec21d31a30898d7cd1609f80d9668b4778e3d97e941044b39f0c44d2e51b",
        "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d0639dbf65e5ff38e9f39ed3d57513149e4b3af53e558459b49c0000000000000000000000000000000033cff9ea15df9af7f567eb723009c19ce044fe0c14ad78448c2271b728817004006a337d1a93e143dbe8b7478cfc826b4507e2c042937e2384ded8b5c2ab7def8708a268f4050eb86f89d315dcdd43a28bed8acc6ef444fa0dff5bb3369fecb6543064d7ddda83d6293ed223dfb1f73c91b7f4a52704d4d129d989cd3cd28e1ccd4fc6016365a9a8894e9c68ca5c21c104d3908aeafef4de766fcaae799db518cfec5f62784de983f8740eb1933a973e3f9b823f59fd5d3f35fe6ae38b0d20074d4f31e996d3b2e8f24e1edecd5697b520dd7dd811dcf353bc6e9a40ca9aca1b7886da443d89e3c69a9d795292d3a4059564fb6f6c807f6058e7711a640165aaeeb5a517c482f06d5819b425013ded1e58f7a1cea4a4e2d0a08e676b04dda763b078af6b3071beaecf4e632b7f702a91139788d80232cf83b3bc4618523c4723c712c701de86fc938d82c10d91312c6da97b6dd8a9601abab70f86dad45d03e3929b9aebc79a77a344157d1cf00217e0732c05d779deb228be037221373d0b71e6aaed268d84188999a2feaef4a110dbdbfa82282317ef6da05a8c7a81d8d5ef1e40a76b2502b81c528d9f728088340a028db75dd0e12b9f8ee8f88a30ad4364fb67d2cad84a8c05513d099c5ed2b13badd20a47c83ebbff930da1633f032a4092110f7574173143c90c9c2ef422ca610dfecf94367af88634656ef68908486cd906296286e8dbdeb83e168c575b38f2bc274e27ed717075c430e3269ae9991e1abfbb8d5a3a3f3725cb0e47a551e01e460ad3fb7ec0a0c0f7b09cb12b2f1962d3d98b8df2ffe6b4afca95b73679b30cde4ddc92c0eef5496f4f986a1691b23ae835405eafcf36c34e9d4d9807f7e864bf60d32eb0f1cd43ab9e375c9077495fd9e012f7e45e29fc72fbd3cf9945b7d5b0afcfd0db53ca5a5f6b6a952ed91d4106007949f8f83bb07fa2418a8199f27ad9eabd46e7235d6b98392a7f0f1db80ad648dc165c8cd8c67f97a3fe0c89efd39b3754476048334b1b0788b82c5910c1492595d69012d5480c35480626eebd979072b189f63ba284585c16351fec44bd8d8eba6e5fdb15ef36807ba9f2eebf932e339acaed5f9827cbfe27e69586c0c28e6c219ea2cf1f759bbef00aad17973d47e0f96b3e0abde459749c5655935f31a6e605ab9e61180d87475477dd26a3e5ae67ae209fe22f024ab50a3ab277c61235dbfb442a2a2c345e57d480471a99fe712254d8abba37fc173cfa1b22dddabc5eeff4396189be394bdb428e5d65531eb94012628aa49d644600093272de4175263610d713a069808643f4f2b8a69798fb1aefade26c5dee412da43c5f17aebde3f8951e5e2e9b05c0ea07b913422bcb0f16fe643911a3ecc8189fb9b96cc28925bd59aa7769904bdd55802732d70d02f96cfc2a324d51fa2870d0e6da84a52be3bb5b1016871a76767b36c9d66786b9b7e2a00dff589c3f55fd5fce851029d3f542e1af975c3d786149f42719049352a0573beb567f8e7cb4c5703f3668cf01ca6f84f83efd810c523db91332c540434efc3ade0229a07406b02e5ff35d9b7e9b0212f062bf5f75ba67e4eff1a5cc71602bbef27edbad99c45ec62b8b1a595ece67a573f59b0552d7ea57edace16cd2c40d2745f192397328c216949e370d1eca7280fb770c4a0c0deae1c9906146232410180c4d781b116a5373a8508e26bf",
        "hex": 1,
        "decrypted": "1259ec21d31a30898d7cd1609f80d9668b4778e3d97e941044b39f0c44d2e51bebb5f4271913895cc1b7556971d474e3c70ba3be8e532e340000000000000000000000000000000075a95ec3eb34710598e7fb1c04036b8b54605973a4f8b7647c8292a5f5c39b491f6aadc5f18e6f6a377197ff9d2284028c5d3ecafebc8701b7094d16f7884821753f60e56f89ab5cf5fce5d61fab5a0af55fa7c1f21b1e3d9eb219c1b10db7437d43e419ffa11554a68a3b527058c882367a62343c602e53cb81d13e0d9013a8d5ee5de9fbd25fa36323ba40728c49d15b38a78ac25269481224b1fb7d6c40d404a5b5018395c44acc3202214cdd89be1f78dcf40316a3c58c794761111b54fe7f397c79129e523d8cbede01c01fca7190f654e0265924e3a3df4aac8bd7159b8474b5a7e816908292c0e69add982b8cec35d4a8e7e5e7f41b68d4168b717e376a70b00b14ad4f0fa8c00e8250fbb0bac9b219a37fc935bd81af43c07adac0e67ac722b5091e8b866b50ae19488021abf8ae2c41157fdac12596b861628fcad69a10430ff2647058dc68815c8445a0b57928c85c0ae2ff4f16362860751d8cca58ecbc0da5b50eb921a8fc5524c07497a7021610900eeea204ec6ba91bf215de3b65f27bce94136f5f90051c88f3ac9612e8ae5278c05ab2e42aaee00aedc54f2da06fcd1fbd38d332e811110569b141a58c74e082bee036cc03f22a9323414856b3b4d43a0ab329f33af538b37c3aae90ae4d42655b1376da9306de5d88e9deccedf7a6b72675517285734a1ae43801d627bd2a74ef5711d1dd1270a00c8bf617a1a90b33079f64ebba506710cfbfa11a0db52f3c2843e1d7ced2a1a1a1ee91eb41005cc5b2cfef009b80baf0dece078a098c9691cf83534d82af8e5473730b60c6b7fe530a1dfb848383dd23bd869c02419887dda3184ad12596b7f7169b9bf62b09e17b4f3793098db44f16e1e4f225b427c82cb1f1ac40f0db3e71c8e6d236872e94c89e504cbd188f735e270697d0fc56ef2f0deadbfe29f7051288c63a26d74103671f904957c091b38527b1385a9bfc347d7421a1644f532301a59e37345abdbaa252c593a9b821dbd404264476d206257e399956e6f1078c3a4741cfd368233f825dec791b9a87e9fed95a9dccd8360e0eb488061f97c8e8325053d769073cf34a0bb0344db3f0ce493aa888de9ba70baed7470c92f9a06928b4c081772385bbadccd0fbc6754edeea94158a75919a05b8cac9bbb7ff48e5b4907d3e9d24490992c95d5bed399811cea1f45e2df2277b358565e28b70b59ba81952ef72e005b7524c252c99567b2ba8a1d56a508892e1d4436aa497c1f3564b8e9a661488b21dc59c3be70e4a9c651acab9276bfbdc96fd36c6075c0b8a10c79009c2c0d3a917f06873b00f32105532d94a64915c620de0b61a074516817b7b6d365339a66a0b10f945300251bbeeba6579df157bc0d609ad83e729dbd46c78ed12b7db3152ebeb430f498b51b6dca104dc44dbe0c573ae4a547ae7f57e9ca83083e9f73009dd9c5bf8423c71f308c763f2b25641d06db162e16df9d4f752ba85d2e82ce83fe7c6d0cf6032c5b54406e8afb49c58738ae242a8f5394f0720416c928e2e0a97f823f05031e7327e73c531ff872acca1003c11c19cb105a49f3b1b6fc87a861fbdf41a1fb1",
        "decryptedhex": 1,
        "anonmsg": "hello",
        "anonsender": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
        "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
        "amountA": "0.00000000",
        "amountB": "0.00000000",
        "priority": 12,
        "recvtime": 1582121849,
        "cancelled": 0
      }
    ],
    "tagA": "anon",
    "tagB": "",
    "pubkey": "",
    "n": 1
  }
  ```
</collapse-text>

## DEX\_broadcast

**DEX\_broadcast hex \[priority \[tagA \[tagB \[pubkey33 \[volA \[volB]]]]]]**

This method can be used to broadcast any data to the p2p network, which will be added to the "Data Mempools" of all the nodes with the parameter `-dexp2p` set to `1` or `2`.

#### Arguments

| Name     | Type                           | Description|
| -------- | ------------------------------ ||
| hex      | (string)                       | the data to be broadcasted; can be in hex format or ASCII; to specify that the string has to be parsed as ASCII, surround it with quotes the size limit of a "datablob" is 1MB; the size of the actual data to be broadcasted is recommended to be smaller than 1MB to combat spam, after the size of "datablob" crosses 1KB, each time the size doubles, its priority is reduced by 1; this will make generating valid packets for larger data more and more expensive as not only is the difficulty increased by the packetsize, the amount of data to be hashed is increasing too|
| priority | (string, optional)             | the priority with which other nodes will route the data; can be an integer between `0` to `16` increasing the priority of a data broadcast increases the time taken by a CPU to create it; this is achieved by changing a "nonce" in the "datablob" until the lowest bits of the SHA256 hash match `011101110111` (`0x777`) and each of the next "priority" number of bits to `0` **Example:** if priority is set to `5`, the lowest bits of the hash will be `01110111011100000`|
| tagA     | (string, optional)             | the first tag to be associated with the data; an index associated to a tag is created in the RAM of a node and is used for quick data lookups; limited to 15 characters ;in the context of a atomicDEX order, `tagA` is the "base" (maker) coin being traded; if all the three values: `tagA`, `tagB` and `pubkey33` are set to `""` ie., unspecified, `tagA` defaults to the value "general"; if `tagA` is set to `"inbox"`, then the data is encrypted to the destination pubkey set using the `pubkey33` parameter ; all the other nodes on the network can propagate the data; but, only the node that owns the destination pubkey is able to decrypt it; if `tagA` is not set to "inbox", the data is encrypted to a publicly known keypair so that the sender pubkey can be authenticated                                                                                                                                                                                                                                                                                                                                                    |
| tagB     | (string, optional)             | the second tag to be associated with the data; an index associated to a tag is created in the RAM of a node and is used for quick data lookups; limited to 15 characters; in the context of a atomicDEX order, `tagB` is the "rel" (taker) coin being traded                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| pubkey33 | (string, optional)             | the pubkey which is associated with the datablob, called the `DEX_pubkey`; this is not a regular pubkey that starts with `02` or `03`, it starts with `01`; it can be found from the output of the [DEX\_stats](#dex-stats) RPC; it is also printed in the STDOUT of the `komodod` in a line that starts with `DEX_pubkey.(`if the node is started with the `-pubkey` parameter using a regular pubkey owned by the node, its privatekey is used to create the corresponding `DEX_pubkey` and printed; else, a keypair is generated for the particular session and its privatekey is used to create the corresponding `DEX_pubkey` and printed if the `tagA` is set to "inbox", the datablob is encrypted to the `DEX_pubkey` specified by the `pubkey33` parameter; if `tagA` is not set to "inbox", the datablob is authenticated by the `DEX_pubkey` provided through the `pubkey33` parameter by encrypting it to a publicly known keypair; if `tagA` is not set to "inbox" and the parameter `pubkey33` is set to `""`, i.e., unspecified, the datablob is not authenticated by any `DEX_pubkey` and broadcasted to the network un-encrypted; |
| volA     | (float - 8 decimals, optional) | in the context of a atomicDEX order, volume of the coin denoted by `tagA`|
| volB     | (float - 8 decimals, optional) | in the context of a atomicDEX order, volume of the coin denoted by `tagB`|

#### Response

| Name         | Type     | Description                                                                                                                                                                                                         |
| ------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| timestamp    | (number) | UNIX timestamp at which the datablob was created                                                                                                                                                                    |
| id           | (number) | short hash of the datablob; can be treated as a unique id most of the time                                                                                                                                          |
| hash         | (string) | hash of the datablob; the payload is hashed like so: `sha256(curve25519(sha256(payload)))`, the `curve25519` hash is included to make the process FPGA resistant to deter spammers; there are no known ASICS for it |
| tagA         | (string) | `tagA` of the datablob                                                                                                                                                                                              |
| tagB         | (string) | `tagB` of the datablob                                                                                                                                                                                              |
| pubkey       | (string) | the `pubkey` the payload is tagged with; if `tagA` is "inbox", the payload is encrypted and only the owner of the `pubkey` can decrypt the datablob                                                                 |
| payload      | (string) | all the data being sent in the datablob; contains the data,tags,volumes etc.,                                                                                                                                       |
| hex          | (number) | whether the `payload` is in hexadecimal format; `0` when `false` and `1` when `true`                                                                                                                                |
| decrypted    | (number) | the decrypted payload;                                                                                                                                                                                              |
| decryptedhex | (number) | whether the decrypted payload is in hexadecimal format; `0` when `false` and `1` when `true`;                                                                                                                       |
| error        | (string) | errors if any                                                                                                                                                                                                       |
| senderpub    | (string) | the `DEX_pubkey` of the sender                                                                                                                                                                                      |
| amountA      | (string) | amount associated with `tagA` (volumeA)                                                                                                                                                                             |
| amountB      | (string) | amount associated with `tagB` (volumeB)                                                                                                                                                                             |
| priority     | (number) | the priority with which the datablob will be routed by the network                                                                                                                                                  |
| recvtime     | (number) | the unix timestamp at which the datablob was first observed by the node                                                                                                                                             |
| cancelled    | (number) | whether the `datablob` is set to be purged prematurely; in the context of AtomicDEX orders, it means the order has been cancelled; `0` when `false` and `1` when `true`                                             |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_broadcast "hello" 5 "BTC" "KMD" "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063" "0.1" "100"
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1581510301,
    "id": 2122297120,
    "hash": "07f2fae7a7c024015c42c5c42e50c49dfd909926d27a0e7aefac1b1c5027ccc4",
    "tagA": "BTC",
    "tagB": "KMD",
    "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063db161df4a00f1f24ce4e50310e45e86d67209f461f294c430000000000000000000000000000000082058a046b30feb5869c7fd22b45504b5b942989d0ca",
    "hex": 1,
    "decrypted": "hello",
    "decryptedhex": 0,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "amountA": "0.10000000",
    "amountB": "100.00000000",
    "priority": 5,
    "recvtime": 1581510301,
    "cancelled": 0
  }
  ```
</collapse-text>

## DEX\_cancel

**DEX\_cancel id \[pubkey33 \[tagA tagB]]**

This method can be used to cancel an order issued by the user's node. A node can cancel only the orders that were broadcasted using its current `DEX_pubkey`. Orders that are broadcasted without being authenticated by a pubkey can not be canceled.

#### Arguments

| Name     | Type               | Description                                                                |
| -------- | ------------------ | -------------------------------------------------------------------------- |
| id       | (number, optional) | short hash of the datablob; can be treated as a unique id most of the time |
| pubkey33 | (string, optional) | the `pubkey` the payload is tagged with                                    |
| tagA     | (string, optional) | `tagA` of the datablob                                                     |
| tagB     | (string, optional) | `tagB` of the datablob                                                     |

#### Response

| Name         | Type     | Description                                                                                                                                                             |
| ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| timestamp    | (number) | UNIX timestamp at which the datablob was created                                                                                                                        |
| id           | (number) | short hash of the datablob; can be treated as a unique id most of the time                                                                                              |
| hash         | (string) | hash of the datablob                                                                                                                                                    |
| tagA         | (string) | `tagA` of the datablob; it's value is `"cancel"` and it lets other nodes on the network                                                                                 |
| tagB         | (string) | `tagB` of the datablob                                                                                                                                                  |
| pubkey       | (string) | the `pubkey` the payload is tagged with; if `tagA` is "inbox", the payload is encrypted and only the owner of the `pubkey` can decrypt the datablob                     |
| payload      | (string) | all the data being sent in the datablob; contains the data,tags,volumes etc.,                                                                                           |
| hex          | (number) | whether the `payload` is in hexadecimal format; `0` when `false` and `1` when `true`                                                                                    |
| decrypted    | (number) | the decrypted payload; when the byte order is reversed and converted to decimal, gives the id to be cancelled                                                           |
| decryptedhex | (number) | whether the decrypted payload is in hexadecimal format; `0` when `false` and `1` when `true`;                                                                           |
| error        | (string) | errors if any                                                                                                                                                           |
| senderpub    | (string) | the `DEX_pubkey` of the sender                                                                                                                                          |
| amountA      | (string) | amount associated with `tagA` (volumeA)                                                                                                                                 |
| amountB      | (string) | amount associated with `tagB` (volumeB)                                                                                                                                 |
| priority     | (number) | the priority with which the datablob will be routed by the network                                                                                                      |
| recvtime     | (number) | the unix timestamp at which the datablob was first observed by the node                                                                                                 |
| cancelled    | (number) | whether the `datablob` is set to be purged prematurely; in the context of AtomicDEX orders, it means the order has been cancelled; `0` when `false` and `1` when `true` |

#### :pushpin: Examples

##### Command (Using the id)

Cancel an order by its "id"

```bash
./komodo-cli -ac_name=DORN DEX_cancel 2432811744
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1580475219,
    "id": 673100032,
    "hash": "0710eb81d2061ad610f66dfe43d4c814b4644a57633e7f9fe9557462fa349605",
    "tagA": "cancel",
    "tagB": "",
    "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063ae2a67c540fdfe162f287bda6fd7fa8348373292d6fa61450000000000000000000000000000000034776c72512cdaef45dbd54dcc161adb5acd9f02",
    "hex": 1,
    "decrypted": "e0c20191",
    "decryptedhex": 1,
    "amountA": "0.00000000",
    "amountB": "0.00000000",
    "priority": 8,
    "recvtime": 1580475219,
    "cancelled": 0
  }
  ```
</collapse-text>

##### Command (Using the pubkey)

Cancel all orders tagged with a "pubkey"

```bash
./komodo-cli -ac_name=DORN DEX_cancel "" 01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1580477389,
    "id": 820606976,
    "hash": "0780970ea30e2aa7f7b5d5cfd2ac61493301b883db7fad17ad6479472d442ef3",
    "tagA": "cancel",
    "tagB": "",
    "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d06315a69a48086cb634506c2fdbabccaa40b06e5e4355503f6c00000000000000000000000000000000f26b764ccddca46aaac93ac02c5f4e2c1f1388af7876c9297d835e40e8a368536dea018fa374f914b2d62888ac4fdf627d",
    "hex": 1,
    "decrypted": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "decryptedhex": 1,
    "amountA": "0.00000000",
    "amountB": "0.00000000",
    "priority": 11,
    "recvtime": 1580477389,
    "cancelled": 0
  }
  ```
</collapse-text>

##### Command (Using the tags tagA and tagB)

Cancel all orders published for a specific `base/rel` pair

```bash
./komodo-cli -ac_name=DORN DEX_cancel "" "" "KMD" "BTC"
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1580477489,
    "id": 1361541632,
    "hash": "07a07712851c911f6dbc1d63cadbd2eeb666329307e01211f16e0594d4706fe3",
    "tagA": "cancel",
    "tagB": "",
    "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d06366bfe76902e72060a193dc5c3d8c35a57a6227a35133788600000000000000000000000000000000efe08540f37f0263a9ba2c438ef210df93ce78bd6bf2d414",
    "hex": 1,
    "decrypted": "034b4d4403425443",
    "decryptedhex": 1,
    "amountA": "0.00000000",
    "amountB": "0.00000000",
    "priority": 9,
    "recvtime": 1580477489,
    "cancelled": 0
  }
  ```
</collapse-text>

## DEX\_get

**DEX\_get id**

This method returns an order's data by its id.

#### Arguments

| Name | Type     | Description             |
| ---- | -------- | ----------------------- |
| id   | (number) | short hash of the order |

#### Response

| Name         | Type     | Description                                                                                                                                                             |
| ------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| timestamp    | (number) | UNIX timestamp at which the datablob was created                                                                                                                        |
| id           | (number) | short hash of the datablob; can be treated as a unique id most of the time                                                                                              |
| hash         | (string) | hash of the datablob                                                                                                                                                    |
| tagA         | (string) | `tagA` of the datablob                                                                                                                                                  |
| tagB         | (string) | `tagB` of the datablob                                                                                                                                                  |
| pubkey       | (string) | the `pubkey` the payload is tagged with; if `tagA` is "inbox", the payload is encrypted and only the owner of the `pubkey` can decrypt the datablob                     |
| payload      | (string) | all the data being sent in the datablob; contains the data,tags,volumes etc.,                                                                                           |
| hex          | (number) | whether the `payload` is in hexadecimal format; `0` when `false` and `1` when `true`                                                                                    |
| decrypted    | (number) | the decrypted payload;                                                                                                                                                  |
| decryptedhex | (number) | whether the decrypted payload is in hexadecimal format; `0` when `false` and `1` when `true`;                                                                           |
| error        | (string) | errors if any                                                                                                                                                           |
| senderpub    | (string) | the `DEX_pubkey` of the sender                                                                                                                                          |
| amountA      | (string) | amount associated with `tagA` (volumeA)                                                                                                                                 |
| amountB      | (string) | amount associated with `tagB` (volumeB)                                                                                                                                 |
| priority     | (number) | the priority with which the datablob will be routed by the network                                                                                                      |
| recvtime     | (number) | the unix timestamp at which the datablob was first observed by the node                                                                                                 |
| cancelled    | (number) | whether the `datablob` is set to be purged prematurely; in the context of AtomicDEX orders, it means the order has been cancelled; `0` when `false` and `1` when `true` |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_get 2122297120
```

<collapse-text hidden title="Response">
  ```json
  {
    "timestamp": 1581510301,
    "id": 2122297120,
    "hash": "07f2fae7a7c024015c42c5c42e50c49dfd909926d27a0e7aefac1b1c5027ccc4",
    "tagA": "BTC",
    "tagB": "KMD",
    "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063db161df4a00f1f24ce4e50310e45e86d67209f461f294c430000000000000000000000000000000082058a046b30feb5869c7fd22b45504b5b942989d0ca",
    "hex": 1,
    "decrypted": "hello",
    "decryptedhex": 0,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "amountA": "0.10000000",
    "amountB": "100.00000000",
    "priority": 5,
    "recvtime": 1581510301,
    "cancelled": 0
  }
  ```
</collapse-text>

## DEX\_list

**DEX\_list stopat minpriority tagA tagB pubkey33 \[minA maxA minB maxB \[stophash]]**

This method can be used to filter and list data from the "Data Mempool" of the node. Each specified filter narrows the list down to the datablobs that match it exactly. If a filter is specified as `""` or `0`, it matches all the values a datablob might have for the filter.

#### Arguments

| Name        | Type                           | Description                                                                                                                                                                                      |
| ----------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| stopat      | (string)                       | the `id` of the datablob until which the filtered list is to be displayed, excluding the datablob with the given `id`                                                                            |
| minpriority | (string)                       | the minimum priority of the datablobs to be filtered                                                                                                                                             |
| tagA        | (string)                       | the value of `tagA` by which the available datablobs are filtered; if all the three values: `tagA`, `tagB` and `pubkey33` are set to `""` ie., unspecified, `tagA` defaults to the tag "general" |
| tagB        | (string)                       | the value of `tagB` by which the available datablobs are filtered                                                                                                                                |
| pubkey33    | (string)                       | the value of `destination publickey` to filter the available datablobs                                                                                                                           |
| minA        | (float - 8 decimals, optional) | the minimum value of the amount associated to `tagA` to filter the available datablobs                                                                                                           |
| maxA        | (float - 8 decimals, optional) | the maximum value of the amount associated to `tagA` to filter the available datablobs                                                                                                           |
| minB        | (float - 8 decimals, optional) | the minimum value of the amount associated to `tagB` to filter the available datablobs                                                                                                           |
| maxB        | (float - 8 decimals, optional) | the maximum value of the amount associated to `tagB` to filter the available datablobs                                                                                                           |
| stophash    | (string, optional)             | the `hash` of the datablob until which the filtered list is to be displayed excluding the datablob with the given `hash`; taken into account only when `stopat` is set to `""` or `0`            |

<Note>
  How to use the DEX\_list RPC periodically to filter the datablobs received by the node and get each datablob exactly once?

  *   call [DEX\_list](#dex-list) with both `stopat` and `stophash` set to `""` and the rest of the filters as necessary
  *   the response will contain all the available datablobs sorted in the order: "latest" to "oldest"
  *   let the `id` of the latest datablob(first one in the list) be `id_1` and its `hash` be `hash_1`
  *   if we call [DEX\_list](#dex-list) again with `stopat` set to `id_1` and `stophash` set to `""` (rest of the filters are the same), the response will contain all the newer datablobs till the datablob that has the `id` equal to `id_1` (excluding it)
  *   alternatively, if we call [DEX\_list](#dex-list) with stopat set to `""` and `stophash` set to `hash_1` (rest of the filters are the same), the response will contain all the newer datablobs till the datablob that has the `hash` set to `hash_1` (excluding it)
</Note>

#### Response

| Name         | Type            | Description                                                                                                                                                             |
| ------------ | --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| matches      | (array of json) | an array containing json representations of the matched datablobs                                                                                                       |
| timestamp    | (number)        | UNIX timestamp at which the datablob was created                                                                                                                        |
| id           | (number)        | short hash of the datablob; can be treated as a unique id most of the time                                                                                              |
| hash         | (string)        | hash of the datablob                                                                                                                                                    |
| tagA         | (string)        | `tagA` of the datablob                                                                                                                                                  |
| tagB         | (string)        | `tagB` of the datablob                                                                                                                                                  |
| destpub      | (string)        | the `destpubkey` to which the payload is encrypted to                                                                                                                   |
| payload      | (string)        | all the data being sent in the datablob; contains the data,tags,volumes etc.,                                                                                           |
| hex          | (boolean)       | whether the `payload` is in hexadecimal format                                                                                                                          |
| decrypted    | (number)        | the decrypted payload;                                                                                                                                                  |
| decryptedhex | (number)        | whether the decrypted payload is in hexadecimal format; `0` when `false` and `1` when `true`;                                                                           |
| anonmsg      | (string)        | the decrypted anonymous message received by the node from a `anonsender` who most likely used the [DEX\_anonsend](#dex-anonsend) method                                 |
| anonsender   | (string)        | the `DEX_pubkey` of the anon message sender                                                                                                                             |
| error        | (string)        | errors if any; the error says `"wrong sender"` if the actual `DEX_pubkey` of the sender is different from the claimed one                                               |
| senderpub    | (string)        | the actual `DEX_pubkey` of the sender                                                                                                                                   |
| amountA      | (string)        | amount associated with `tagA` (volumeA)                                                                                                                                 |
| amountB      | (string)        | amount associated with `tagB` (volumeB)                                                                                                                                 |
| priority     | (number)        | the priority with which the datablob will be routed by the network                                                                                                      |
| recvtime     | (number)        | the unix timestamp at which the datablob was first observed by the node                                                                                                 |
| cancelled    | (number)        | whether the `datablob` is set to be purged prematurely; in the context of AtomicDEX orders, it means the order has been cancelled; `0` when `false` and `1` when `true` |
| tagA         | (string)        | the `tagA` used to filter                                                                                                                                               |
| tagB         | (string)        | the `tagB` used to filter                                                                                                                                               |
| pubkey       | (string)        | the `pubkey` used to filter                                                                                                                                             |
| n            | (integer)       | number of matches                                                                                                                                                       |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_list "" 0 "BTC" "" "" "" "" "" "" ""
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "matches": [
      {
        "timestamp": 1581510301,
        "id": 2122297120,
        "hash": "07f2fae7a7c024015c42c5c42e50c49dfd909926d27a0e7aefac1b1c5027ccc4",
        "tagA": "BTC",
        "tagB": "KMD",
        "pubkey": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
        "payload": "e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063db161df4a00f1f24ce4e50310e45e86d67209f461f294c430000000000000000000000000000000082058a046b30feb5869c7fd22b45504b5b942989d0ca",
        "hex": 1,
        "decrypted": "hello",
        "decryptedhex": 0,
        "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
        "amountA": "0.10000000",
        "amountB": "100.00000000",
        "priority": 5,
        "recvtime": 1581510301,
        "cancelled": 0
      }
    ],
    "tagA": "BTC",
    "tagB": "",
    "pubkey": "",
    "n": 1
  }
  ```
</collapse-text>

## DEX\_orderbook

**DEX\_orderbook maxentries minpriority tagA tagB pubkey33 \[minA maxA minB maxB]**

This method interprets the datablobs as orders for AtomicDEX and displays relevant data for each order that matches the filters applied through the parameters.

#### Arguments

| Name        | Type                           | Description                                                                                                   |
| ----------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------- |
| maxentries  | (string)                       | the maximum number of orders to list                                                                          |
| minpriority | (string)                       | the minimum priority of the orders to be listed                                                               |
| tagA        | (string)                       | the value of `tagA` by which the available orders are filtered; this tag is treated as the "base" coin's name |
| tagB        | (string)                       | the value of `tagB` by which the available orders are filtered ; this tag is treated as the "rel" coin's name |
| pubkey33    | (string)                       | the value of `public key` to filter the available orders                                                      |
| minA        | (float - 8 decimals, optional) | the minimum volume of the coin named by `tagA` to filter the available orders                                 |
| maxA        | (float - 8 decimals, optional) | the maximum volume of the coin named by `tagA` to filter the available orders                                 |
| minB        | (float - 8 decimals, optional) | the minimum volume of the coin named by `tagB` to filter the available orders                                 |
| maxB        | (float - 8 decimals, optional) | the maximum volume of the coin named by `tagB` to filter the available orders                                 |

#### Response

| Name       | Type            | Description                                                                           |
| ---------- | --------------- | ------------------------------------------------------------------------------------- |
| asks       | (array of json) | all the asks for the base coin named by `tagA` w\.r.t to the rel coin named by `tagB` |
| price      | (string)        | the price offered; calculated as `amountB/amountA` of the datablob                    |
| baseamount | (string)        | the volume of the base coin offered; `amountA` of the datablob                        |
| relamount  | (string)        | the volume of the base coin offered; `amountB` of the datablob                        |
| priority   | (number)        | the priority of the order                                                             |
| pubkey     | (string)        | the pubkey associated with the order                                                  |
| timestamp  | (number)        | the timestamp of the order                                                            |
| hash       | (number)        | the hash of the order                                                                 |
| id         | (number)        | the short hash of the order ; can be treated as an unique id                          |
| bids       | (array of json) | all the bids for the base coin named by `tagB` w\.r.t to the rel coin named by `tagA` |
| price      | (number)        | the price offered; calculated as `amountB/amountA` of the datablob                    |
| baseamount | (number)        | the volume of the base coin offered; `amountB` of the datablob                        |
| relamount  | (number)        | the volume of the base coin offered; `amountA` of the datablob                        |
| priority   | (number)        | the priority of the order                                                             |
| pubkey     | (number)        | the pubkey associated with the order                                                  |
| timestamp  | (number)        | the timestamp of the order                                                            |
| hash       | (number)        | the hash of the order                                                                 |
| id         | (number)        | the short hash of the order; can be treated as an unique id                           |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_orderbook 10 0 KMD BTC
```

<collapse-text hidden title="Response">
  ```json
  {
    "asks": [
      {
        "price": 0.001,
        "baseamount": 1000,
        "relamount": 1,
        "priority": 6,
        "pubkey": "01faed489d5ae6d66e6fb7f69a15aeb81051bd02169d29eb8883260f3798e40778",
        "timestamp": 1579200793,
        "hash": "813080b3936a263ebe294f518257383c6923a36d6818c5a9e4da8bdc0d3d96c2",
        "id": 1505761344
      }
    ],
    "bids": [
      {
        "price": 999,
        "baseamount": 999,
        "relamount": 1,
        "priority": 5,
        "pubkey": "01faed489d5ae6d66e6fb7f69a15aeb81051bd02169d29eb8883260f3798e40778",
        "timestamp": 1579201068,
        "hash": "c1a4416a4bdee3a650f84cb3d5d3704c50b42bcb77cb8715af3c11f7d1c11648",
        "id": 891343456
      }
    ]
  }
  ```
</collapse-text>

## DEX\_publish

**DEX\_publish filename priority sliceid**

This method allows a user to publish a file to the p2p Data Network. The file is broken into fragments and broadcast to the network using the datablobs. Take a look at the response of [DEX\_broadcast](#dex-broadcast) for a list of all the keys available in a datablob.

<Note>
  *   we recommend to publishing only one file at a time

  {/* *   there is a detailed explanation on how publishing and subscribing works [here](../smart-chains/tutorials/publish-download-files-dexp2p/) */}

  *   it is also recommended to not issue the `stop` command to the daemon while a file is being published; doing so will make the daemon stop receiving further RPC, but it continues to publish the datablobs containing the data of the file; once that is done, the daemon shuts down; note that, the daemon publishes neither the datablob with `tagA` set to `files` and `tagB` set to the file name nor the `locators` datblob, which results in no other node able to use the [DEX\_subscribe](#dex-subscribe) RPC to construct the file
</Note>

#### Arguments

| Name     | Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| filename | (string) | the name of the file to be published; the name must be less than 15 characters long; the file must be present in the working directory from which the command to start the Komodo daemon(`komodod`) was issued; not to be confused with the directory in which `komodod` is present; if the file is not found in the working directory, it is then searched in the user's `~/dexp2p` directory and `/usr/local/dexp2p` directory in Linux/MacOS and in `%APPDATA%\dexp2p` in Windows |
| priority | (number) | the minimum priority to be used for the broadcasted datablobs that contain the file's data; set this value above the `VIP_PRIORITY` level for prioritised transmission of the datablobs; for the `VIP_PRIORITY` being used by your node, see the value of `vip` in the response to the [DEX\_stats](#dex-stats) RPC                                                                                                                                                                  |
| sliceid  | (number) | if set to `0`, it publishes the file; if set to `0` and the file is already published, it scans the datablobs present in the "Data mempool" and republishes the missing ones; if the value is an integer greater than `0`, it is the id of the slice to publish; this method treats the file as a number of 1 MB sized slices and publishs only the mentioned slice of the file; this functionality is used by the [DEX\_stream](#dex-stream) method                                 |

#### Response

| Name        | Type     | Description                                                                                                  |
| ----------- | -------- | ------------------------------------------------------------------------------------------------------------ |
| fname       | (string) | the name of the file                                                                                         |
| id          | (number) | the id of the published file's locators datablob                                                             |
| senderpub   | (string) | the `DEX_pubkey` of the file's sender                                                                        |
| filesize    | (number) | the size of the file in bytes                                                                                |
| fragments   | (number) | the number of fragments the file has been broken down into; each fragment has a maximum size of `10000 byte` |
| numlocators | (number) | the number of locators of the published file                                                                 |
| filehash    | (string) | the SHA256 hash of the file as indicated by the publishing node                                              |
| checkhash   | (string) | the SHA256 hash of the file based on all the fragments the node has currently available                      |
| result      | (string) | whether the command was successfully executed                                                                |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_publish roadmap2020.pdf 0
```

<collapse-text hidden title="Response">
  ```json
  {
    "fname": "roadmap2020.pdf",
    "id": 3277545472,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "filesize": 2049320,
    "fragments": 205,
    "numlocators": 205,
    "filehash": "8ed81c26721dcce7bfd1a811f301ec84a2f79389ab86cb45e481ab3f5f40f85d",
    "checkhash": "8ed81c26721dcce7bfd1a811f301ec84a2f79389ab86cb45e481ab3f5f40f85d",
    "result": "success"
  }
  ```
</collapse-text>

## DEX\_setpubkey

**DEX\_setpubkey pubkey33**

This method allows a user set the `DEX_pubkey` used by the node. Can only be used once per daemon start. It can't be used to change the pubkey that has already been set using the `-pubkey` launch parameter.

If this method is used with a pubkey not owned by the node, the datablobs created/broadcast by this node can't be authenticated by the other nodes and can cause unpredictable behavior.

#### Arguments

| Name     | Type     | Description                                                                                                         |
| -------- | -------- | ------------------------------------------------------------------------------------------------------------------- |
| pubkey33 | (string) | a regular pubkey to be used to create the `DEX_pubkey`; recommended to use a pubkey of an address owned by the node |

#### Response

| Name                | Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| ------------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result              | (string) | whether the command was successfully executed                                                                                                                                                                                                                                                                                                                                                                                                             |
| publishable\_pubkey | (string) | the pubkey to be shared with another user for receiving encrypted data packets                                                                                                                                                                                                                                                                                                                                                                            |
| secpkey             | (string) | the regular pubkey to be shared with another user for receiving encrypted data packets                                                                                                                                                                                                                                                                                                                                                                    |
| recvaddr            | (string) | the regular public address associated with the `secpkey`; this will be the R-address used for a `subatomic swap`                                                                                                                                                                                                                                                                                                                                          |
| recvZaddr           | (string) | the value of the launch parameter `-recvZaddr` used when launching the node; it is the z-address of Pirate in the context of `subatomic swaps`                                                                                                                                                                                                                                                                                                            |
| handle              | (string) | the value of the launch parameter `-handle` used when launching the node; it is the "username" associated with the node in the context of `subatomic swaps`                                                                                                                                                                                                                                                                                               |
| txpowbits           | (number) | the default number bits being used for txpow; the higher this value, the more resource intensive it is to send spam transactions                                                                                                                                                                                                                                                                                                                          |
| vip                 | (number) | the minimum number of txpow bits to be present in a datablob for it to be considered a VIP; VIP datablobs are prioritised for routing by all nodes on the `dexp2p` network; if a node notices its peer not having a VIP datablob it knows about, it will ping the peer about it even if the VIP datablob was received by it a long time before then; this property is useful for helping newer nodes bootstrap important datablobls in saturated networks |
| cmdpriority         | (number) | the number of txpow bits being used for datablobs generated by commands; Example: [DEX\_cancel](#dex-cancel)                                                                                                                                                                                                                                                                                                                                              |
| perfstats           | (string) | a string containing stats about the datablobs and the "Data mempool" the local node is seeing                                                                                                                                                                                                                                                                                                                                                             |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_setpubkey 03ac42ded82688c381563d2e123a2eaf54b29d9fd15a8bd4f9f2727dbfe9be1688
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "publishable_pubkey": "01d8fa7059137996cbb933ba45f618f57e361fa56087ae4fd275cc058a1aaf3b63",
    "secpkey": "03ac42ded82688c381563d2e123a2eaf54b29d9fd15a8bd4f9f2727dbfe9be1688",
    "recvaddr": "RTteDcwszpLbd2S6uw5ib2wqC9vjSE8N4Q",
    "recvZaddr": "",
    "handle": "",
    "txpowbits": 4,
    "vip": 5,
    "cmdpriority": 7,
    "perfstats": "RAM.5 10c0e280 R.0 S.5 A.5 dup.0 | L.0 A.0 coll.0 | lag (0.0000 0.0000 0.0000) err.0 pend.0 T/F 0/0 | 0 0 0 0 0 2 1 0 2 0 0 0 0 0  0/sec"
  }
  ```
</collapse-text>

## DEX\_stats

**DEX\_stats**

This method gives info and stats related to the p2p data layer.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name                | Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| ------------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| result              | (string) | whether the command was successfully executed                                                                                                                                                                                                                                                                                                                                                                                                             |
| publishable\_pubkey | (string) | the pubkey to be shared with another user for receiving encrypted data packets                                                                                                                                                                                                                                                                                                                                                                            |
| secpkey             | (string) | the regular pubkey to be shared with another user for receiving encrypted data packets                                                                                                                                                                                                                                                                                                                                                                    |
| recvaddr            | (string) | the regular public address associated with the `secpkey`; this will be the R-address used for a `subatomic swap`                                                                                                                                                                                                                                                                                                                                          |
| recvZaddr           | (string) | the value of the launch parameter `-recvZaddr` used when launching the node; it is the z-address of Pirate in the context of `subatomic swaps`                                                                                                                                                                                                                                                                                                            |
| handle              | (string) | the value of the launch parameter `-handle` used when launching the node; it is the "username" associated with the node in the context of `subatomic swaps`                                                                                                                                                                                                                                                                                               |
| txpowbits           | (number) | the default number bits being used for txpow; the higher this value, the more resource intensive it is to send spam transactions                                                                                                                                                                                                                                                                                                                          |
| progress            | (number) | the percentage of datablobs already broadcast when a single file is being published using the [DEX\_publish](#dex-publish) RPC                                                                                                                                                                                                                                                                                                                            |
| vip                 | (number) | the minimum number of txpow bits to be present in a datablob for it to be considered a VIP; VIP datablobs are prioritised for routing by all nodes on the `dexp2p` network; if a node notices its peer not having a VIP datablob it knows about, it will ping the peer about it even if the VIP datablob was received by it a long time before then; this property is useful for helping newer nodes bootstrap important datablobls in saturated networks |
| cmdpriority         | (number) | the number of txpow bits being used for datablobs generated by commands; Example: [DEX\_cancel](#dex-cancel)                                                                                                                                                                                                                                                                                                                                              |
| perfstats           | (string) | a string containing stats about the datablobs and the "Data mempool" the local node is seeing; Example: `RAM.207 50c5ce3d R.0 S.414 A.414 dup.0 \| L.0 A.0 coll.0 \| lag (0.0000 0.0000 0.0000) err.0 pend.0 T/F 207/207 \| 0 0 0 0 0 1 0 1 3 4 5 32 62 99 0/sec`; for explanation on what each part of the string means, see the [Daemon Output](#daemon-output) section                                                                                 |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_stats
```

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "publishable_pubkey": "01e727e5e4711e7b4aacabf000fec7309ca317d621a26ba83923cfac0ed395a93e",
    "secpkey": "03c144dbb2002f0731417f2ba09fe2a61c853f0b7ceffb9d7718efd32470ad9e28",
    "recvaddr": "RKnGqmg4My1mtNuLEz8uAaxSEQ4fAVviZA",
    "recvZaddr": "zs1dqweh8w8h62vcalet5ztlq2u8359v0s29tqsz6xu7lf4f2vrmwhs4vrcwtmgrd9mteg4ux3aprk",
    "handle": "gcharang_bob",
    "txpowbits": 4,
    "progress": 2.81,
    "vip": 5,
    "cmdpriority": 7,
    "perfstats": "RAM.139 0cb9bb60 R.139 S.0 A.139 dup.0 | L.278 A.139 coll.0 | lag (0.0000 0.0000 0.0000) err.0 pend.0 T/F 0/0 | 1 1 0 2 6 9 17 32 71 0 0 0 0 0  0/sec"
  }
  ```
</collapse-text>

## DEX\_stream

**DEX\_stream filename priority**

This method allows a user to stream a file to the `DEXP2P` Network of the Smart Chain. It is different from [DEX\_publish](#dex-publish) in that, `DEX_stream` can help stream a file while it is increasing in size. When the command is issued, it checks the file's size and if it is more than 1 MB and the first slice hasn't been published yet, the command publishes a slice of size 1 MB using [DEX\_publish](#dex-publish) internally. The command must be issued each time a new slice has to be published. If the command was issued when the size was less than 1 MB or if there is no new slice to publish, then it does nothing and informs the user about the reason.

Example:

*   When the command was issued, if the size was `0.86 MB`, it will returns warning.
*   When the command was issued, if the size was `4.42 MB` and `4` slices were already published by previous issuances of the command, it returns a warning.

To continuously stream, it is recommended to repeatedly issue the command with a small `sleep/wait` between each issuance.

{/* A detailed explanation on how the command works and its usage can be found [in this linked tutorial](../smart-chains/tutorials/streaming-dexp2p/) */}

#### Arguments

| Name     | Type     | Description                                                                                                                                                                                                                                                                                                         |
| -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| filename | (string) | the name of the file to be streamed; the name must be less than 15 characters long; the file must be present in the working directory from which the command to start the Komodo daemon(`komodod`) was issued; not to be confused with the directory in which `komodod` is present                                  |
| priority | (number) | the minimum priority to be used for the broadcasted datablobs that contain the file's data; set this value above the `VIP_PRIORITY` level for prioritised transmission of the datablobs; for the `VIP_PRIORITY` being used by your node, see the value of `vip` in the response to the [DEX\_stats](#dex-stats) RPC |

#### Response (when publish suceeds)

| Name        | Type     | Description                                                                                                                                                                                                                                            |
| ----------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| fname       | (string) | the name of the file being published; here, the file referred to is the slice being published, not the actual file; the number appended after the actual file's name is a count of the number of bytes of the actual file that exist before this slice |
| id          | (number) | the id of the published file's locators datablob                                                                                                                                                                                                       |
| senderpub   | (string) | the `DEX_pubkey` of the file's sender                                                                                                                                                                                                                  |
| filesize    | (number) | the size of the file in bytes                                                                                                                                                                                                                          |
| fragments   | (number) | the number of fragments the file has been broken down into; each fragment has a maximum size of `10000 bytes`                                                                                                                                          |
| numlocators | (number) | the number of locators of the published file                                                                                                                                                                                                           |
| filehash    | (string) | the SHA256 hash of the file as indicated by the publishing node                                                                                                                                                                                        |
| checkhash   | (string) | the SHA256 hash of the file based on all the fragments the node has currently available                                                                                                                                                                |
| result      | (string) | whether the command was successfully executed                                                                                                                                                                                                          |

#### Response (when there is some type of error)

| Name      | Type     | Description                                                                                         |
| --------- | -------- | --------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command was successfully executed                                                       |
| warning   | (string) | information about the error faced                                                                   |
| filename  | (string) | the name of the file being streamed; here, the file referred to is the actual file being streamed   |
| filesize  | (number) | the current size of the file in bytes                                                               |
| offset0   | (number) | the total number bytes of the actual file that have already been published using slices             |
| available | (number) | the total number bytes of the actual file that are available to be published after the last publish |
| needed    | (number) | the total number bytes of the actual file that are needed for publishing the next slice             |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_stream 13-48-39.mkv 0
```

Response when the file size was less than 1 MB

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "warning": "not enough data to extend stream",
    "filename": "13-48-39.mkv",
    "filesize": 961101,
    "offset0": 0,
    "available": 961101,
    "needed": 1000000
  }
  ```
</collapse-text>

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_stream 13-48-39.mkv 0
```

Response when the above command was issued the first time after the file size increased to more than 1 MB

<collapse-text hidden title="Response">
  ```json
  {
    "fname": "13-48-39.mkv.0",
    "id": 3681903744,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "filesize": 1000000,
    "fragments": 100,
    "numlocators": 100,
    "filehash": "caac6d0f50335df53510db620da63f04a2b77d16b5f4566c3ad120ef560cc466",
    "checkhash": "caac6d0f50335df53510db620da63f04a2b77d16b5f4566c3ad120ef560cc466",
    "result": "success"
  }
  ```
</collapse-text>

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_stream 13-48-39.mkv 0
```

Response when the above command was issued the second time after the file size increased to more than 1 MB

<collapse-text hidden title="Response">
  ```json
  {
    "result": "success",
    "warning": "not enough data to extend stream",
    "filename": "13-48-39.mkv",
    "filesize": 1458334,
    "offset0": 1000000,
    "available": 458334,
    "needed": 1000000
  }
  ```
</collapse-text>

## DEX\_streamsub

**DEX\_streamsub filename priority pubkey**

This method allows a user to assemble a file being streamed to the DEXP2P network using the [DEX\_stream](#dex-stream) command. When this command is issued for the first time, it downloads the first slice if available. On further issuance, it downloads the next slice each time and appends the downloaded slice to the file assembled till then.

To continuously build the file as more slices are available in the "data Mempool", it is recommended to repeatedly issue the command with a small `sleep/wait` between each issuance.

{/* A detailed explanation on how the command works and its usage can be found [in this linked tutorial](../smart-chains/tutorials/streaming-dexp2p/) */}

#### Arguments

| Name     | Type     | Description                                                                                                                                                                                                                                                                                                         |
| -------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| filename | (string) | the name of the file to be assembled; the name must be less than 15 characters long; the file must be created in the working directory from which the command to start the Komodo daemon(`komodod`) was issued; not to be confused with the directory in which `komodod` is present                                 |
| priority | (number) | the minimum priority to be used for the broadcasted datablobs that contain the file's data; set this value above the `VIP_PRIORITY` level for prioritised transmission of the datablobs; for the `VIP_PRIORITY` being used by your node, see the value of `vip` in the response to the [DEX\_stats](#dex-stats) RPC |
| pubkey   | (string) | the `DEX_pubkey` of the node that is streaming the file                                                                                                                                                                                                                                                             |

#### Response

| Name        | Type     | Description                                                                                                                                                                                                                                             |
| ----------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| fname       | (string) | the name of the file being downloaded; here, the file referred to is the slice being published, not the actual file; the number appended after the actual file's name is a count of the number of bytes of the actual file that exist before this slice |
| id          | (number) | the id of the file's locators datablob                                                                                                                                                                                                                  |
| senderpub   | (string) | the `DEX_pubkey` of the file's sender                                                                                                                                                                                                                   |
| filesize    | (number) | the size of the file in bytes                                                                                                                                                                                                                           |
| fragments   | (number) | the number of fragments the file has been broken down into; each fragment has a maximum size of `10000 bytes`                                                                                                                                           |
| numlocators | (number) | the number of locators of the published file                                                                                                                                                                                                            |
| filehash    | (string) | the SHA256 hash of the file as indicated by the publishing node                                                                                                                                                                                         |
| checkhash   | (string) | the SHA256 hash of the file based on all the fragments the node has currently available                                                                                                                                                                 |
| result      | (string) | whether the command was successfully executed                                                                                                                                                                                                           |
| warning     | (string) | warnings/errors if any                                                                                                                                                                                                                                  |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_streamsub 18-27-14.mkv 5
```

Response when the command downloaded the 6th slice

<collapse-text hidden title="Response">
  ```json
  {
    "fname": "18-27-14.mkv.5000000",
    "id": 615349056,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "filesize": 1000000,
    "fragments": 100,
    "numlocators": 100,
    "filehash": "062a550e7072f4602ea5707478e3a1d56babf284c32d67d65fc1662e4b53284b",
    "checkhash": "062a550e7072f4602ea5707478e3a1d56babf284c32d67d65fc1662e4b53284b",
    "result": "success"
  }
  ```
</collapse-text>

## DEX\_subscribe

**DEX\_subscribe filename priority id \[publisher33]**

This method allows a user to construct a file from the datablobs available in its RAM. The file must have been published to the `dexp2p` network using the [DEX\_publish](#dex-publish) method by another node.

{/* <Note>
  There is a detailed explanation on how publishing and subscribing works [here](../smart-chains/tutorials/publish-download-files-dexp2p/)
</Note> */}

#### Arguments

| Name        | Type                 | Description                                                                                                                                                                                                                                                                                             |
| ----------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| filename    | (string)             | the name of the file to download                                                                                                                                                                                                                                                                        |
| priority    | (number)             | the priority above the default value of the command priority with which the node should create a datablob if it needs to request missing blocks; can be `0` most of the time                                                                                                                            |
| id          | (string, deprecated) | DEPRECATED; use the value `0` in its place; PREVIOUSLY: id of the datablob that contains the `locators` information for the file the user wants to download; find the `locators` datablob by filtering the avaialble datablobs with `tagA` set to the file's name and `tagB` set to the word `locators` |
| publisher33 | (string)             | the `DEX_pubkey` of the file's publisher                                                                                                                                                                                                                                                                |

#### Response

| Name        | Type     | Description                                                                                                  |
| ----------- | -------- | ------------------------------------------------------------------------------------------------------------ |
| fname       | (string) | the name of the file                                                                                         |
| id          | (number) | the id of the published file's locators datablob                                                             |
| senderpub   | (string) | the `DEX_pubkey` of the file's sender                                                                        |
| filesize    | (number) | the size of the file in bytes                                                                                |
| fragments   | (number) | the number of fragments the file has been broken down into; each fragment has a maximum size of `10000 byte` |
| numlocators | (number) | the number of locators of the published file                                                                 |
| filehash    | (string) | the SHA256 hash of the file as indicated by the publishing node                                              |
| checkhash   | (string) | the SHA256 hash of the file based on all the fragments the node has currently available                      |
| result      | (string) | whether the command was successfully executed                                                                |

#### :pushpin: Examples

##### Command

```bash
./komodo-cli -ac_name=DORN DEX_subscribe "roadmap2020.pdf" 0 0 01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063
```

<collapse-text hidden title="Response">
  ```json
  {
    "fname": "roadmap2020.pdf",
    "id": 4181200704,
    "senderpub": "01e28518858aa3515163a67deee2b19f0d30e4fa237f0aec255e4c94db0fe8d063",
    "filesize": 2049320,
    "fragments": 205,
    "numlocators": 205,
    "filehash": "8ed81c26721dcce7bfd1a811f301ec84a2f79389ab86cb45e481ab3f5f40f85d",
    "checkhash": "8ed81c26721dcce7bfd1a811f301ec84a2f79389ab86cb45e481ab3f5f40f85d",
    "result": "success"
  }
  ```
</collapse-text>
export const title = "Ecosystem Launch Parameters";
export const description = "A list of launch parameters for all the Smart Chains in the Komodo ecosystem that receive the dPoW security service can be found in this document";

# Ecosystem Launch Parameters

A list of launch parameters for all the Smart Chains in the Komodo ecosystem that receive the dPoW security service can be found at this link: [https://github.com/KomodoPlatform/dPoW/blob/master/iguana/assetchains.old](https://github.com/KomodoPlatform/dPoW/blob/master/iguana/assetchains.old)
export const title = "Smart Chain Setup"
export const description = "This section contains information required to Setup and Manage Komodo Smart Chains"

# Smart Chain Setup

This section of the documentation contains information required to Setup and Manage Komodo Smart Chains
export const title = "Installing Smart Chain Software From Source Code";
export const description = "Learn how to install Smart Chain software (Komodo daemon and komodo-cli) from source code on Linux.";

# Installing Smart Chain Software From Source Code

The basic Komodo software package includes two applications.

## komodod

The `komodod` software application is the Smart Chain daemon that powers all Komodo blockchains.

### komodo-cli

The `komodo-cli` software application allows a developer to execute API calls to `komodod` via the command line.

### Both are Installed Automatically

Both of these software applications are installed in the `~/komodo/src/` directory as a part of any of the following installation procedures.

### The Two Methods to Install Smart Chain Software

There are two methods available to install Smart Chain software.

### Pre-compiled Binaries

You can download and unzip our pre-compiled binaries. This is the simplest method and requires no installation procedure.

For more information on this method, please see the link below.

[<b>Link to simple installations section for pre-compiled executables</b>](/start-here/about-komodo-platform/simple-installations/)

### Building Smart Chain Software From Source

You may also build Smart Chain software from source.

This is not required, but building from source is considered the best practice in a production environment, as this allows you to instantly update to the latest patches and upgrades.

*   [<b>Linux</b>](/smart-chains/setup/installing-from-source/#linux)
*   [<b>MacOS</b>](/smart-chains/setup/installing-from-source/#mac-os)
*   [<b>Windows</b>](/smart-chains/setup/installing-from-source/#windows)

## Linux

### Requirements

*   Linux (easiest with a Debian-based distribution, such as Ubuntu)

    *   For Ubuntu, we recommend using only the 16.04 or 18.04 releases

*   64-bit Processor

*   Minimum 32GB HDD or SDD storage space

*   Minimum 4GB of free RAM (8GB+ recommended)

### Get Started

Verify that your system is up to date.

```bash
sudo apt-get update
sudo apt-get upgrade -y
```

### Install the dependency packages

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git zlib1g-dev wget curl bsdmainutils automake cmake clang ntp ntpdate nano -y
```

This action takes some time, depending on your Internet connection. Let the process run in the background.

Once completed, follow the steps below to install Komodo.

<Note>
  At some point during the installation process, you may see a warning, "libgmp
  headers missing". This can safely be ignored.
</Note>

### Clone the Komodo Repository

```bash
cd ~
git clone https://github.com/KomodoPlatform/komodo
cd komodo
```

### Fetch the Zcash Parameters

```bash
./zcutil/fetch-params.sh
```

### Build the Komodo Daemon

In the command below, the `-j$(nproc)` parameter instructs the script to utilize all available processors in your hardware.

Alternatively, you may instruct the script to use only a set number of processors. For example, `-j8` instructs the script to use `8` processors, `-j4` instructs the script to use `4` processors, etc.

```bash
./zcutil/build.sh -j$(nproc)
```

This script can take some time.

### Create the komodo.conf File

```bash
cd ~
mkdir .komodo
cd .komodo
nano komodo.conf
```

With the `komodo.conf` file open in the Nano text editor, add the following lines.

(Create your own `rpcuser` username and `rpcpassword` password.)

```bash
rpcuser=usernameChangeItToSomethingSecure
rpcpassword=passwordChangeItToSomethingSecure
txindex=1
bind=127.0.0.1
rpcbind=127.0.0.1
addnode=78.47.196.146
addnode=5.9.102.210
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.38
addnode=148.251.44.16
```

Press `CTRL+O` to save the changes.

Press `CTRL+X` to exit the Nano editor.

Start the `komodod` daemon. It will automatically begin syncing with the network.

```bash
cd ~
cd komodo/src
./komodod &
```

The `&` parameter in the last instruction above instructs the terminal to continue allowing you to enter commands within this terminal shell.

### (Optional) Tail the komodod Daemon

Enter the following command to "tail" the `komodod` daemon. The `tail` command allows you to view the `debug.log` file updates in real time.

```bash
tail -f ~/.komodo/debug.log
```

### Test Your Daemon with komodo-cli

Ensure that your current working directory is in the default `src` directory.

```bash
cd ~/komodo/src/
```

You may now use the `komodo-cli` software to send API (RPC) calls to the `komodod` daemon.

For example:

```bash
./komodo-cli getinfo
```

This command returns the latest state information about the KMD blockchain and your `wallet.dat` file.

```json
{
  "version": 1000550,
  "protocolversion": 170002,
  "KMDversion": "0.1.0",
  "notarized": 186670,
  "notarizedhash": "000000308845da840ab9af6c1e09dc02f3118683df065b5ec00b05c9bd58cdae",
  "notarizedtxid": "6723a10ef4fceab230d4245305d1ed2a916e435abb83269c20daad9bbefd3f0e",
  "notarizedtxid_height": "mempool",
  "notarized_confirms": 0,
  "walletversion": 60000,
  "balance": 0,
  "interest": 0,
  "blocks": 186773,
  "longestchain": 308867,
  "timeoffset": 0,
  "tiptime": 1486411069,
  "connections": 8,
  "proxy": "",
  "difficulty": 1624278.6287953,
  "testnet": false,
  "keypoololdest": 1482746526,
  "keypoolsize": 101,
  "paytxfee": 0.0,
  "relayfee": 0.00001,
  "errors": ""
}
```

When the `blocks` and `longestchain` values are equal to each other, your machine is in sync with the network.

### Backup your wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On Linux, the file is located here: `~/.komodo/wallet.dat`

One method to backup this file is to archive a copy of the file.

```bash
# Copy the file
cp -av ~/.komodo/wallet.dat ~/wallet.dat

# Rename file
mv ~/wallet.dat ~/2019-05-17-wallet_backup.dat

# To make archive
tar -czvf ~/2019-05-17-wallet_backup.dat.tgz ~/2019-05-17-wallet_backup.dat

# Move the final file to a secure location
```

## MacOS

### Requirements

*   OSX (version > 10.11)
*   Minimum 4GB of free RAM (8GB+ recommended)

##### Ensure Command Line Tools are Installed.

Issue the following command in a terminal.

```bash
xcode-select --install
```

##### Ensure brew is Installed

We use the software `brew` to install dependencies. If you have the latest version of `brew` installed already, you may skip this step.

```bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
```

##### Use brew to Install Dependencies

Execute each command separately

```bash
brew update
brew upgrade
brew tap discoteq/discoteq; brew install flock
brew install autoconf autogen automake
brew install gcc@8
brew install binutils
brew install protobuf
brew install coreutils
brew install wget
```

#### Clone the Komodo repository

```bash
git clone https://github.com/KomodoPlatform/komodo
```

#### Fetch the Zcash Parameters:

```bash
cd komodo
./zcutil/fetch-params.sh
```

#### Compile Komodo

```bash
git checkout dev
./zcutil/build-mac.sh -j8
```

This can take some time.

While this process proceeds, open a new terminal for the next step.

#### Create Configuration File

Create the configuration file in the following directory:

```bash
~/Library/Application\ Support/Komodo
```

If the directory does not yet exist, create the directory.

```bash
mkdir ~/Library/Application\ Support/Komodo
```

Create the configuration file by entering the following commands in the terminal. Execute each line separately.

```bash
echo "rpcuser=komodouser" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "rpcpassword=`head -c 32 /dev/urandom | base64`" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "txindex=1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "bind=127.0.0.1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "rpcbind=127.0.0.1" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=5.9.102.210" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=78.47.196.146" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=178.63.69.164" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=88.198.65.74" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=5.9.122.241" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=144.76.94.38" >> ~/Library/Application\ Support/Komodo/komodo.conf
echo "addnode=148.251.44.16" >> ~/Library/Application\ Support/Komodo/komodo.conf
```

#### Run Komodo

Once all processes are complete, run the `komodod` daemon.

```bash
cd ~/komodo/src
./komodod &
```

#### Track the Syncing Progress

##### Using the tail Command

```bash
tail -f ~/Library/Application\ Support/Komodo/debug.log
```

##### Using komodo-cli and getinfo

```bash
cd ~/komodo/src
./komodo-cli getinfo
```

When the returned properties of `blocks` and `longestchain` are equal to each other, the daemon is finished syncing with the network.

#### Backup Your Wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On MacOS, the file is located here: `~/Library/Application\ Support/Komodo/wallet.dat`

One method to backup this file is to archive a copy of the file.

```bash
# Copy the file
cp -av ~/Library/Application\ Support/Komodo/wallet.dat ~/wallet.dat

# Rename file
mv ~/wallet.dat ~/2019-05-17-wallet_backup.dat

# To make archive
tar -czvf ~/2019-05-17-wallet_backup.dat.tgz ~/2019-05-17-wallet_backup.dat

# Move the final file to a secure location
```

## Windows

The Windows software for `komodod` and `komodo-cli` files are slightly different than their MacOS and Linux counterparts in two ways.

*   The Windows software cannot be directly compiled on a Windows machine. Rather, the software must be compiled on a Linux machine (Ubuntu recommended), and then transferred to the Windows machine
    *   You can use a Virtual Machine-based installation of Ubuntu Linux, running on a Windows machine, as a solution
*   The names of the software are `komodod.exe` and `komodo-cli.exe`

Once you have access to an Ubuntu machine and have access to a terminal [with <b>sudo</b> privileges](https://help.ubuntu.com/community/RootSudo), you are prepared to continue the installation process.

#### Install dependencies

```bash
sudo apt-get install build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python python-zmq zlib1g-dev wget libcurl4-gnutls-dev bsdmainutils automake curl libsodium-dev cmake mingw-w64
```

#### Install Rust

```bash
curl https://sh.rustup.rs -sSf | sh
source $HOME/.cargo/env
rustup target add x86_64-pc-windows-gnu
```

#### Configure the compiler to use POSIX thread model

Execute:

```bash
sudo update-alternatives --config x86_64-w64-mingw32-gcc
```

After executing the above command, select the POSIX option.

```
  Selection    Path                                   Priority   Status
------------------------------------------------------------
  0            /usr/bin/x86_64-w64-mingw32-gcc-win32   60        auto mode
  1            /usr/bin/x86_64-w64-mingw32-gcc-posix   30        manual mode
* 2            /usr/bin/x86_64-w64-mingw32-gcc-win32   60        manual mode

Press <enter> to keep the current choice[*], or type selection number: 1
```

Execute:

```bash
sudo update-alternatives --config x86_64-w64-mingw32-g++
```

After executing the above command, select the POSIX option.

```
There are 2 choices for the alternative x86_64-w64-mingw32-g++ (providing /usr/bin/x86_64-w64-mingw32-g++).

  Selection    Path                                   Priority   Status
------------------------------------------------------------
  0            /usr/bin/x86_64-w64-mingw32-g++-win32   60        auto mode
  1            /usr/bin/x86_64-w64-mingw32-g++-posix   30        manual mode
* 2            /usr/bin/x86_64-w64-mingw32-g++-win32   60        manual mode

Press <enter> to keep the current choice[*], or type selection number: 1
```

#### Clone the Komodo Repository

```bash
git clone https://github.com/KomodoPlatform/komodo
cd komodo
```

#### Fetch the Zcash Parameters

```bash
./zcutil/fetch-params.sh
```

#### Build the Komodo Daemon

In the command below, you may instruct the script to use only a set number of processors. For example, `-j8` instructs the script to use `8` processors, `-j4` instructs the script to use `4` processors, etc.

```bash
./zcutil/build-win.sh -j8
```

This script can take some time. Once completed, you will find `komodod.exe` & `komodo-cli.exe` files inside the `src` directory.

Transfer these 2 executable files to your Windows computer and place the files in a new folder on the Desktop called kmd or any other location you prefer (remember the location and use that). For this guide we are using `kmd` directory on Desktop.

Open a command prompt for the following steps.

#### Create the Komodo Directory

```bash
mkdir "%HOMEPATH%\AppData\Roaming\komodo"
```

#### Create the Configuration File

```bash
notepad "%HOMEPATH%\AppData\Roaming\Komodo\komodo.conf"
```

When the software dialogue box opens, click `Yes` to create the `komodo.conf` file.

Copy the information below and paste it into Notepad.

```bash
rpcuser=usernameChangeItToSomethingSecure
rpcpassword=passwordChangeItToSomethingSecure
daemon=1
rpcallowip=127.0.0.1
rpcbind=127.0.0.1
server=1
txindex=1
addnode=5.9.102.210
addnode=78.47.196.146
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.38
addnode=148.251.44.16
```

After pasting, save and exit Notepad.

#### Create the Directory for the Zcash Parameters

```bash
mkdir “%HOMEPATH%\AppData\Roaming\ZcashParams”
```

Download following files and move them into the new directory.

<DevComment>
  *   `[sprout-proving.key](https://download.z.cash/downloads/sprout-proving.key)`

  *   `[sprout-verifying.key](https://download.z.cash/downloads/sprout-verifying.key)`
</DevComment>

*   [sapling-spend.params](https://download.z.cash/downloads/sapling-spend.params)

*   [sapling-output.params](https://download.z.cash/downloads/sapling-output.params)

*   [sprout-groth16.params](https://download.z.cash/downloads/sprout-groth16.params)

#### Run Smart Chain Software

```bash
"%HOMEPATH%\Desktop\kmd\komodod.exe"
```

#### Verify Syncing Progress

```bash
"%HOMEPATH%\Desktop\kmd\komodo-cli.exe" getinfo
```

#### Backup Your Wallet

We can not stress enough the importance of backing up your `wallet.dat` file.

On Windows, the file is located here: `%HOMEPATH%\AppData\Roaming\Komodo\wallet.dat`

One method to backup this file is to create a copy and archive it.
export const title = "Interacting with Komodo Chains";
export const description = "Learn how to interact with Komodo chains using the komodo-cli software or curl commands.";

# Interacting with Komodo Chains

## Using komodo-cli

Initiate the `komodod` daemon by calling it from the command line and including any desired runtime parameters.

When initiating any Smart Chain other than the main KMD chain, the user should always include all parameters that were used to create the Smart Chain.

<Note>
  Note to Windows Users: Replace ./komodod and ./komodo-cli with komodod.exe and
  komodo-cli.exe for each step.
</Note>

To launch the main KMD chain, execute the following command in the directory where `komodod` is installed.

```bash
./komodod &
```

After the daemon launches, you may interact with it using the `komodo-cli` software.

```bash
./komodo-cli API_COMMAND
```

To launch another Smart Chain, include the necessary parameters.

<Note>
  IMPORTANT Always execute the launch command EXACTLY as indicated, and as the
  Smart Chain's developers instruct. If you make a mistake, you must [
  <b>delete the Smart Chain data</b>
  ](/smart-chains/setup/smart-chain-maintenance/#manually-deleting-blockchain-data)
  and re-launch to regain access to the Smart Chain's network.
</Note>

For example, to launch the DEX Smart Chain, execute:

```bash
./komodod -ac_name=DEX -ac_supply=999999 -addnode=78.47.196.146 &
```

To interact with the DEX daemon, use `komodo-cli` like so:

```bash
./komodo-cli -ac_name=DEX API_COMMAND
```

In the terminal you can call the Komodo documentation by executing:

```bash
./komodo-cli help
```

To learn more via the terminal about a specific API command, execute:

```bash
./komodo-cli help API_COMMAND
```

## Using curl

To access a coin daemon remotely -- for example, via a `curl` command in the shell -- the user will need to obtain the `rpcuser`, `rpcpassword`, and `rpcport` from the `.conf` file of the relevant coin daemon.

#### Location of .conf File

Assuming the default installation location, the `.conf` file can be found by exploring the following directories:

| Operating System | Directory                                     |
| ---------------- | --------------------------------------------- |
| MacOS            | `~/Library/Application Support/Komodo`        |
| Windows          | `C:\Users\myusername\AppData\Roaming\Komodo\` |
| GNU/Linux        | `~/.komodo`                                   |

Within this directory there are also subdirectories containing all KMD-compatible `.conf` files used on this node.

Contents of a KMD `.conf` file:

```bash
rpcuser=myusername
rpcpassword=myrpcpassword
server=1
rpcport=7771
addnode=78.47.196.146
addnode=5.9.102.210
addnode=178.63.69.164
addnode=88.198.65.74
addnode=5.9.122.241
addnode=144.76.94.3
addnode=148.251.44.16
```
export const title = "nSPV";
export const description = "nSPV enhances the normal Simple Payment Verification (SPV) technology available for a Smart Chain.";

# nSPV

## Introduction

nSPV enhances the normal "Simple Payment Verification" (SPV) technology available for a Smart Chain. To learn more about regular SPV technology, [read this entry on the Bitcoin wiki.](https://en.bitcoinwiki.org/wiki/Simplified_Payment_Verification)

nSPV leverages the dPoW security mechanism of the Komodo Platform to enable secure and scalable super-lite "SPV" clients. An nSPV client network utilizes a smaller amount of computation and storage resources compared to a normal SPV network. For all Smart Chains, <b>all the full nodes on the Smart Chain's network</b> can serve the necessary data to nSPV clients for the latter to have full wallet functionality.

All Komodo-compatible Smart Chains, including the KMD main chain, can utilize this technology.

More details are available in the blog posts [here](https://medium.com/@jameslee777/nspv-a-simple-approach-to-superlight-clients-leveraging-notarizations-75d7ef5a37a9) and [here.](https://medium.com/@jameslee777/nspv-reference-cli-client-cf1ffdc03631)

## Installation

Follow the instructions below to set up an nSPV client.

```bash
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install build-essential pkg-config libc6-dev m4 libsodium-dev curl libevent-dev git cmake nano wget ntp ntpdate automake unzip autoconf libtool -y
git clone https://github.com/jl777/libnspv
cd libnspv
./autogen.sh
./configure
./onetime # compiles cc support
make
```

<DevComment>
  Usage: nspv \[COIN defaults to NSPV] (-c|continuous) (-i|-ips \<ip,ip,...]>) (-m\[--maxpeers] \<int>) (-t\[--testnet]) (-f \<headersfile|0 for in mem only>) (-p \<rpcport>) (-r\[--regtest]) (-d\[--debug]) (-s\[--timeout] \<secs>) \<command>
  Supported commands:
  scan (scan blocks up to the tip, creates header.db file)

  Examples:
  Sync up to the chain tip and stores all headers in headers.db (quit once synced):

  > nspv scan

  Sync up to the chain tip and give some debug output during that process:

  > nspv -d scan

  Sync up, show debug info, don't store headers in file (only in memory), wait for new blocks:

  > nspv -d -f 0 -c scan
</DevComment>

## Enabling the nSPV Client

Copy the following code to the file named `coins` (located at the root level of the source directory).

(Change each value as appropriate for the desired Smart Chain.)

```json
{
  "coin": "COIN",
  "asset": "COIN",
  "fname": "Coin",
  "rpcport": 12345,
  "mm2": 1,
  "p2p": 12346,
  "magic": "feb4cb23",
  "nSPV": "5.9.102.210, 5.9.253.195, 5.9.253.196, 5.9.253.197, 5.9.253.198, 5.9.253.199, 5.9.253.200, 5.9.253.201, 5.9.253.202, 5.9.253.203"
}
```

#### Property Descriptions

| Name    | Type     | Description                                                                                                                                                                                                                         |
| ------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| coin    | (string) | the ticker of the coin                                                                                                                                                                                                              |
| asset   | (string) | the `-ac_name` parameter used to start the Smart Chain                                                                                                                                                                              |
| fname   | (string) | the full name of the Smart Chain                                                                                                                                                                                                    |
| rpcport | (number) | the RPC port the Smart Chain's daemon uses to receive RPC commands                                                                                                                                                                  |
| mm2     | (number) | set this value to `1` if this coin has been tested and proves capable of functioning on MarketMaker 2.0 software                                                                                                                    |
| p2p     | (number) | the p2p port the Smart Chain's daemon uses to communicate with other nodes                                                                                                                                                          |
| magic   | (string) | the netmagic number for this Smart Chain. The decimal value of `magic` can be obtained by executing the `getinfo` RPC on a full node on the Smart Chain network. Convert the decimal value to hex and serialize it into 4 hexbytes; |
| nSPV    | (string) | the ip addresses of the full nodes on the Smart Chain network                                                                                                                                                                       |

<Note>
  To start the nSPV client for a specific Smart Chain after its data has been added to the coins file, execute the following.

  ```bash
  ./nspv COIN
  ```
</Note>

#### Tips and Suggestions for Working with the Magic Number

The magic number is a unique number that the daemon uses for identification purposes.

If the direction of the `magic` number appears to be incorrect, try reversing the order of the numbers.

The `magic` number can also be found from the terminal as a `stdout` printout when launching the daemon. Look for the line that starts with `>>>>>>>>>>` , extract the hex portion of the string (`magic.xxxxxxxx`), and reverse its byte order.

###### Example

```bash
>>>>>>>>>> COIN: p2p.40264 rpc.40265 magic.fe1c3450 4263261264 350689 coins
```

The hex extracted is `fe1c3450`.

Therefore the magic value for the coins file is `50341cfe`

## Interacting with the nSPV Client

The port in each of these examples is the port on which the nSPV client listens for RPC commands.

For KMD, the port is `7771`. For any other Smart Chain, the port is the `rpcport` specified in the `coins` file.

This behaviour can be bypassed by setting the [-p](/smart-chains/setup/nspv/#p) parameter.

#### curl Commands Using Named Parameters

Use the example below as a template for creating new `curl` commands for any RPCs available in the nSPV API.

```bash
curl --url "http://127.0.0.1:$port" --data "{\"userpass\":\"testpsw\",\"method\":\"spentinfo\",\"vout\":1,\"txid\":\"e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855\"}"
```

#### curl Command Using the json2.0 Interface

When using this format for any RPC that requires parameters (also called "arguments"), provide the parameters in the order they are given in this documentation.

For example, the [spentinfo](/smart-chains/setup/nspv/#spentinfo) RPC lists `txid` as the first parameter and `vout` as the second. Observe in the following example how the values in the `"params"` key match this order.

Use quotation marks `""` for all strings.

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "spentinfo", "params": ["e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",1 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

#### Accessing localhost in the Browser

To access an nSPV client using a browser, create a url that uses `http://127.0.0.1:<insert_port>/api/` as the base url, and add the `rpc_name/` and any relevant additional `parameters/` as additional url directions. See the example below.

##### Example

```
http://127.0.0.1:<port>/api/method/spentinfo/txid/e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855/vout/1
```

## -p

Use this parameter at nSPV runtime to set the port on which the nSPV client should listen for RPC commands.

##### Example

The following command starts the nSPV client for the KMD main chain and listens on port `3000` for RPC commands.

```bash
./nspv KMD -p 3000
```

## broadcast

**broadcast hex**

Use this method to broadcast the hex value returned by the [spend](/smart-chains/setup/nspv/#spend) method.

#### Arguments

| Name | Type     | Description                   |
| ---- | -------- | ----------------------------- |
| hex  | (string) | the transaction in hex format |

#### Response

| Name      | Type     | Description                                                                                                                              |
| --------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| result    | (string) | whether the command was successful                                                                                                       |
| expected  | (string) | the expected transaction id                                                                                                              |
| broadcast | (string) | the broadcasted transaction id                                                                                                           |
| retcode   | (number) | the return code<br /><br />0: no error<br /><br />-1,-2,-3: failure<br /><br />-200x: mostly OK, some of the inputs may not be notarized |
| type      | (string) | the type of the broadcast                                                                                                                |
| lastpeer  | (string) | the last known peer                                                                                                                      |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "broadcast", "params": ["0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ace77e395d000000000000000000000000000000"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "expected": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "broadcast": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "retcode": 1,
    "type": "broadcast and mempool",
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## getinfo

**getinfo \[hdrheight]**

Use this method to get the general information on the state of the blockchain at the moment.

#### Arguments

| Name      | Type               | Description                                                            |
| --------- | ------------------ | ---------------------------------------------------------------------- |
| hdrheight | (number, optional) | supplies the height of the block for which the header data is required |

#### Response

| Name                     | Type     | Description                                                                                                                                        |
| ------------------------ | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| result                   | (string) | whether the command was successful                                                                                                                 |
| nSPV                     | (string) | the mode of nSPV                                                                                                                                   |
| address                  | (string) | the address corresponding to the wifkey                                                                                                            |
| pubkey                   | (string) | the pubkey corresponding to the wifkey                                                                                                             |
| wifexpires               | (string) | the time in seconds till the login expires                                                                                                         |
| height                   | (number) | the current height of the blockchain                                                                                                               |
| chaintip                 | (string) | the blockhash of the last block                                                                                                                    |
| notarization             | (json)   | a json object containing the notarization details                                                                                                  |
| notarized\_height        | (number) | the height of the latest block that has been notarized                                                                                             |
| notarized\_blockhash     | (string) | the blockhash of the latest block that has been notarized                                                                                          |
| notarization\_txid       | (string) | the id of the transaction in which the notarization data is included in the chain being dPoW'ed                                                    |
| notarization\_txidheight | (number) | the height of the block in which the notarization transaction is included                                                                          |
| notarization\_desttxid   | (string) | the id of the transaction in which the notarization data is included in the chain acting as the data store                                         |
| header                   | (string) | a json object containing the details of the header (of the current block by default / block of height specified by `hdrheight` if it is specified) |
| height                   | (number) | the height of the block that has been queried                                                                                                      |
| blockhash                | (string) | the blockhash of the block that has been queried                                                                                                   |
| hashPrevBlock            | (string) | the blockhash of the block before the block that has been queried                                                                                  |
| hashMerkleRoot           | (string) | the merkleroot of the block that has been queried                                                                                                  |
| nTime                    | (number) | a timestamp recording when this block was created                                                                                                  |
| nBits                    | (number) | the calculated difficulty target being used for this block                                                                                         |
| protocolversion          | (string) | the version of the client; helps the nspv client disconnect from nodes that are out of date                                                        |
| lastpeer                 | (string) | the last known peer                                                                                                                                |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "getinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "nSPV": "superlite",
    "height": 1458356,
    "chaintip": "09b322ed45c2346316fb7f5bc9fbd7a4e27ea1b4803f68ad4c9649c13f19b479",
    "notarization": {
      "notarized_height": 1458340,
      "notarized_blockhash": "02ec52149e0ebc3d8c0e33612f6a6da76ceb01d3604cd3a63269c9c14f8b50ce",
      "notarization_txid": "3f6e11d0f210fd2fa2d39359fae3e70ce63cfc78e2cf555b1a84d88eb7eab7da",
      "notarization_txidheight": 1458354,
      "notarization_desttxid": "500a12dd8aab6b82db602f3f8f7f80573f6d4af6be4d9eb96dee0accf4ecf1b6"
    },
    "header": {
      "height": 1458356,
      "blockhash": "09b322ed45c2346316fb7f5bc9fbd7a4e27ea1b4803f68ad4c9649c13f19b479",
      "hashPrevBlock": "08d31454a0f5a05c1cb194d608c803b94ec0012d0257d08102da8e26439d48af",
      "hashMerkleRoot": "26123db79cfa63d79e92a375271349e4ba4e0a6d9eddf3fc2044572d29045a16",
      "nTime": 1564069327,
      "nBits": 486605795
    },
    "protocolversion": 0,
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## getnewaddress

**getnewaddress \[lang]**

Use this method to create a new address.

#### Arguments

| Name | Type              | Description                                                                                                                                                                                        |
| ---- | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| lang | (string,optional) | the language in which the seed words are to be generated; can be one of: "english", "french", "italian", "japanese", "korean", "russian", "spanish", "chinese\_simplified", "chinese\_traditional" |

#### Response

| Name       | Type     | Description                                                                                                                                       |
| ---------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| seed       | (string) | seed phrase of the generated address; currently generates a phrase with `23` seed words compatible with the other wallets in the Komodo Ecosystem |
| wif        | (string) | wifkey of the generated address                                                                                                                   |
| address    | (string) | the generated address                                                                                                                             |
| pubkey     | (string) | pubkey of the generated address                                                                                                                   |
| wifprefix  | (number) | prefix of the generated wifkey; depends on the network                                                                                            |
| compressed | (number) | whether the wifkey generated is compressed                                                                                                        |

#### 📌 Examples

##### Command (Without arguments)

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "getnewaddress", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "seed": "shiver heart abuse xxx xxx xxx xxx xxx xxx xxx xxx xxx",
    "wif": "Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "address": "RL5kuVuiJQQcDdaooYerKUxvcXwq8jb71d",
    "pubkey": "03b983f01e528356dfc32b49fc2a830013a28fc95b569b7559b09729912d29f5c5",
    "wifprefix": 188,
    "compressed": 1
  }
  ```
</CollapsibleSection>

##### Command (To get the seed words in italian)

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "getnewaddress", "params": ["italian"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "seed": "agitare busta rinnovo xxx xxxx xxx xxx xxxx xxx xxx xxx xxxx",
    "wif": "Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "address": "RFKVh3xE3ygK9smStgurByLZ2b3Nksm9bQ",
    "pubkey": "033b8705127f19a6e5de646f3c46590b9196acfc01d68740f0872547677da3d8bf",
    "wifprefix": 188,
    "compressed": 1
  }
  ```
</CollapsibleSection>

## getpeerinfo

**getpeerinfo**

Use this method to get the information of all peers on the network.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name                | Type     | Description                                                                                                                                                                                                                                                                             |
| ------------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| nodeid              | (number) | the number given to a node by our instance of the nSPV client                                                                                                                                                                                                                           |
| ipaddress           | (string) | the ipaddress of the node                                                                                                                                                                                                                                                               |
| port                | (number) | the p2p port used to connect to this node                                                                                                                                                                                                                                               |
| lastping            | (number) | the unix time at which this node was last pinged                                                                                                                                                                                                                                        |
| time\_started\_con  | (number) | the unix time at which a connection to this node was established                                                                                                                                                                                                                        |
| time\_last\_request | (number) | the unix time at which a connection was last requested                                                                                                                                                                                                                                  |
| services            | (number) | this value encodes the available services from this node in decimal format; converted to HEX, `70000005` : nSPV support with both addressindex and spent index , `40000005` : nSPV support but neither addressindex nor spent index, `00000005` is the services value for a normal node |
| missbehavescore     | (number) | the score given to this node if the node was misbehaving                                                                                                                                                                                                                                |
| bestknownheight     | (number) | the height of the blockchain as best known by this node                                                                                                                                                                                                                                 |
| in\_sync            | (string) | the sync status of the node; `synced` indicates that the client has verified that the chain tip's block header from the node links back to the last notarization; after the client been running a while, all honest nodes should be synced to the same block                            |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "getpeerinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  [
    {
      "nodeid": 1,
      "protocolversion": 2,
      "ipaddress": "5.9.253.195",
      "port": 7770,
      "lastping": 1565175111,
      "time_started_con": 1565174366,
      "time_last_request": 1565175123,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663,
      "in_sync": "not_synced"
    },
    {
      "nodeid": 10,
      "protocolversion": 2,
      "ipaddress": "116.203.17.138",
      "port": 7770,
      "lastping": 1565175121,
      "time_started_con": 1565174376,
      "time_last_request": 1565175126,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 12,
      "protocolversion": 2,
      "ipaddress": "51.68.207.116",
      "port": 7770,
      "lastping": 1565175121,
      "time_started_con": 1565174376,
      "time_last_request": 1565175123,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 15,
      "protocolversion": 2,
      "ipaddress": "178.148.188.34",
      "port": 7770,
      "lastping": 1565175121,
      "time_started_con": 1565174376,
      "time_last_request": 1565175126,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 25,
      "protocolversion": 2,
      "ipaddress": "159.65.93.178",
      "port": 7770,
      "lastping": 1565175121,
      "time_started_con": 1565174376,
      "time_last_request": 1565175125,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 34,
      "protocolversion": 2,
      "ipaddress": "159.69.11.56",
      "port": 7770,
      "lastping": 1565174946,
      "time_started_con": 1565174386,
      "time_last_request": 1565175124,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 35,
      "protocolversion": 2,
      "ipaddress": "5.189.232.34",
      "port": 7770,
      "lastping": 1565174946,
      "time_started_con": 1565174386,
      "time_last_request": 1565175127,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 43,
      "protocolversion": 2,
      "ipaddress": "178.159.11.114",
      "port": 7770,
      "lastping": 1565174946,
      "time_started_con": 1565174386,
      "time_last_request": 1565175126,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663
    },
    {
      "nodeid": 50,
      "protocolversion": 0,
      "ipaddress": "159.69.45.70",
      "port": 7770,
      "lastping": 1565174946,
      "time_started_con": 1565174386,
      "time_last_request": 1565175122,
      "services": 0,
      "missbehavescore": 0,
      "bestknownheight": 1476663,
      "in_sync": "not_synced"
    }
  ]
  ```
</CollapsibleSection>

## hdrsproof

**hdrsproof prevheight nextheight**

This method scans backwards from the `prevheight` until the process encounters a notarization transaction, then forward from `nextheight` until the process encounters another notarization transaction.

Then the process finds the notarized blocks corresponding to these two notarization transactions.

Then the process returns all the block headers between these two notarized blocks.

Now that both ends of this segment of blocks are notarized blocks, all block headers in this segment can be validated to see if they link back to each other.

#### Arguments

| Name       | Type     | Description                                      |
| ---------- | -------- | ------------------------------------------------ |
| prevheight | (number) | the block number from which headers are required |
| nextheight | (number) | the block number to which headers are required   |

#### Response

| Name           | Type     | Description                                                                                                                                        |
| -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| result         | (string) | whether the command was successful                                                                                                                 |
| prevht         | (string) | the height of the first notarized block below the height `prevheight`                                                                              |
| nextht         | (string) | the height of the first notarized block above the height `nextheight`                                                                              |
| prevtxid       | (string) | the id of the transaction that contains the notarization data of the block of height `prevht`                                                      |
| prevtxidht     | (string) | the height of the block in which the transaction with id `prevtxid` is present                                                                     |
| prevtxlen      | (string) | the length of the transaction with id `prevtxid`                                                                                                   |
| nexttxid       | (string) | the id of the transaction that contains the notarization data of the block of height `nextht`                                                      |
| nexttxidht     | (string) | the height of the block in which the transaction with id `nexttxid` is present                                                                     |
| nexttxlen      | (string) | the length of the transaction with id `nexttxid`                                                                                                   |
| numhdrs        | (string) | the number of headers being returned                                                                                                               |
| headers        | (string) | a json object containing the details of the header (of the current block by default / block of height specified by `hdrheight` if it is specified) |
| height         | (number) | the height of the block that has been queried                                                                                                      |
| blockhash      | (string) | the blockhash of the block that has been queried                                                                                                   |
| hashPrevBlock  | (string) | the blockhash of the block before the block that has been queried                                                                                  |
| hashMerkleRoot | (string) | the merkleroot of the block that has been queried                                                                                                  |
| nTime          | (number) | a timestamp recording when this block was created                                                                                                  |
| nBits          | (number) | the calculated difficulty target being used for this block                                                                                         |
| lastpeer       | (string) | the last known peer                                                                                                                                |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "hdrsproof", "params": [1456692, 1456694 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "prevht": 1456680,
    "nextht": 1456700,
    "prevtxid": "e82367899ee7a5cb65dabe058cd7369392564f83834c8f1f81a21958da5d241c",
    "prevtxidht": 1456693,
    "prevtxlen": 1637,
    "nexttxid": "f11f30e4e62ac3567fa553ace89b1fbde7ffaefaa4f94926f3561928a537b753",
    "nexttxidht": 1456713,
    "nexttxlen": 1630,
    "numhdrs": 21,
    "headers": [
      {
        "height": 1456680,
        "blockhash": "00000000a651e00fa2a71c47511be85ef87e83d5715be3a17ed943b141cdd4d9",
        "hashPrevBlock": "06a51aacc1cb0575cc0a0d33dd001409367fe55b5e97a6d1055d70f60a60ba15",
        "hashMerkleRoot": "4f999aa4c45c2ffc6e43f1c96d5bf8a85a70e056462ff81167ebc1a16698ebf4",
        "nTime": 1563968164,
        "nBits": 486609566
      },
      {
        "height": 1456681,
        "blockhash": "08075e165473d74b87d55ce7ffecd85fb29989876dd596de56ed5cb22eb02b93",
        "hashPrevBlock": "00000000a651e00fa2a71c47511be85ef87e83d5715be3a17ed943b141cdd4d9",
        "hashMerkleRoot": "731295c1dc6067df17b5ff8385213981eb4f65f09f8475e15bc53a55f77b6a5f",
        "nTime": 1563968224,
        "nBits": 486608614
      },
      {
        "height": 1456682,
        "blockhash": "08359b03c7493467c9dbc83ed40c1e606cf3f35a086dd044ac37247d3c298610",
        "hashPrevBlock": "08075e165473d74b87d55ce7ffecd85fb29989876dd596de56ed5cb22eb02b93",
        "hashMerkleRoot": "385ad9e93468c50169def8f30853b094ce8fc89a552deac1c7332956639e9281",
        "nTime": 1563968284,
        "nBits": 486609613
      },
      {
        "height": 1456683,
        "blockhash": "000000010981eef2db9a4a68c274e9e4fe3c8e9ac39e9c666926531ed808d37b",
        "hashPrevBlock": "08359b03c7493467c9dbc83ed40c1e606cf3f35a086dd044ac37247d3c298610",
        "hashMerkleRoot": "6484bec614bf2d4e5ad80e1360f4feb1445d3c24732e1c69bc755dea43be5887",
        "nTime": 1563968229,
        "nBits": 486609556
      },
      {
        "height": 1456684,
        "blockhash": "021ec75467e5b61c226b0f001ffa58e0b7bb6c20b3529fc5ea1f00584601fd64",
        "hashPrevBlock": "000000010981eef2db9a4a68c274e9e4fe3c8e9ac39e9c666926531ed808d37b",
        "hashMerkleRoot": "bd6fbe8e522cb8ae2c06a3af7dd24aa9c8f81e161b1ffd5af2f98434f31cb75f",
        "nTime": 1563968321,
        "nBits": 486609344
      },
      {
        "height": 1456685,
        "blockhash": "024fb917266ec5dc1442116696bb92fe1a19388e6c299362c8f21a895b484a4d",
        "hashPrevBlock": "021ec75467e5b61c226b0f001ffa58e0b7bb6c20b3529fc5ea1f00584601fd64",
        "hashMerkleRoot": "cfc5f2c113970aae7b268f6215dff2d88114f7ee625906f4af1000e55941672b",
        "nTime": 1563968400,
        "nBits": 486609586
      },
      {
        "height": 1456686,
        "blockhash": "07ff3fbe03ed0f8d4d672d278554131631405ee9c8550f93f5b92ae97255c841",
        "hashPrevBlock": "024fb917266ec5dc1442116696bb92fe1a19388e6c299362c8f21a895b484a4d",
        "hashMerkleRoot": "cd02fb3979c59c274e547ef040ac21e72516ec29512ef94d34e38886ce1c50ca",
        "nTime": 1563968498,
        "nBits": 486609053
      },
      {
        "height": 1456687,
        "blockhash": "0aa762a49575bed937e3b67ef7f35b50c73ba1e15885bcd561b0024ec63cdc8f",
        "hashPrevBlock": "07ff3fbe03ed0f8d4d672d278554131631405ee9c8550f93f5b92ae97255c841",
        "hashMerkleRoot": "933a601ec6640b1b327a742edfd4e14c0f1a293ad3fda15db9cb87910185bde7",
        "nTime": 1563968672,
        "nBits": 486608999
      },
      {
        "height": 1456688,
        "blockhash": "0330f6d6d7f2fd87b077165f5c0271129d2f000b65d876db2941c34f87da4491",
        "hashPrevBlock": "0aa762a49575bed937e3b67ef7f35b50c73ba1e15885bcd561b0024ec63cdc8f",
        "hashMerkleRoot": "f83e3585b96988d8dc531c7533ff0bff287ea29e5914b488cbbe3e2d480bb383",
        "nTime": 1563968732,
        "nBits": 486608215
      },
      {
        "height": 1456689,
        "blockhash": "00000000760596dbc4a35428f245346c740bda0c30f0d56136692ed023b0087e",
        "hashPrevBlock": "0330f6d6d7f2fd87b077165f5c0271129d2f000b65d876db2941c34f87da4491",
        "hashMerkleRoot": "3f7a1d70a9d5f7a7ab73862d9f89e2c1ad05d18d5fb04bf360a9b7e2029fe420",
        "nTime": 1563968711,
        "nBits": 486608250
      },
      {
        "height": 1456690,
        "blockhash": "0a735f0f144f0f3d079b9674ef0e3dc39b29ae7c254dccfc7e2b1dc8bf902eb7",
        "hashPrevBlock": "00000000760596dbc4a35428f245346c740bda0c30f0d56136692ed023b0087e",
        "hashMerkleRoot": "63734e94b3ce30f7f0de7a7e3546ee4617bfffca22391fcfac807cdc042aa8ed",
        "nTime": 1563968812,
        "nBits": 486608101
      },
      {
        "height": 1456691,
        "blockhash": "0ecceb771f4706188ac1db125ba3228ddd97d30043e437576605a764f43c57eb",
        "hashPrevBlock": "0a735f0f144f0f3d079b9674ef0e3dc39b29ae7c254dccfc7e2b1dc8bf902eb7",
        "hashMerkleRoot": "d7f6ea68b87b15dcadb8c7f56aebcc11c8cc395186822d67e56c99bcbe95ba30",
        "nTime": 1563968929,
        "nBits": 486609120
      },
      {
        "height": 1456692,
        "blockhash": "0000000034cb2953e5bb5d4137209e8d8ef98608b0dc50f77dfb5174b06f5a26",
        "hashPrevBlock": "0ecceb771f4706188ac1db125ba3228ddd97d30043e437576605a764f43c57eb",
        "hashMerkleRoot": "1f521201d68355b2f0ab5ac7b6e34c998409f60d1789415b3d7673b746ae5545",
        "nTime": 1563968934,
        "nBits": 486609800
      },
      {
        "height": 1456693,
        "blockhash": "01a724e7686a4dce74884ebd8bd869c855d1a71afc80c906830acfa1d14811cd",
        "hashPrevBlock": "0000000034cb2953e5bb5d4137209e8d8ef98608b0dc50f77dfb5174b06f5a26",
        "hashMerkleRoot": "0796959f32409791221a66859b6abbbf5ec31c2afcc22e7b606911da97612e4e",
        "nTime": 1563969054,
        "nBits": 486611292
      },
      {
        "height": 1456694,
        "blockhash": "000000008b4a3386489d1438ddc1220652942c95053f2c95c72c6868af215c8a",
        "hashPrevBlock": "01a724e7686a4dce74884ebd8bd869c855d1a71afc80c906830acfa1d14811cd",
        "hashMerkleRoot": "8ea989e47aa590fbabf19b5a7dbace61f32be3c51c558b991f7718b27eaa6b98",
        "nTime": 1563969053,
        "nBits": 486610300
      },
      {
        "height": 1456695,
        "blockhash": "00325ddee8e46aa1dcea791e370f87bcd94654a19d7bbf69d9fc6fd2afa5bc1f",
        "hashPrevBlock": "000000008b4a3386489d1438ddc1220652942c95053f2c95c72c6868af215c8a",
        "hashMerkleRoot": "dffc52dcc7c758616ec081e376f3385b1f75f41463e5fe2580e720b7c41637a1",
        "nTime": 1563969170,
        "nBits": 486609719
      },
      {
        "height": 1456696,
        "blockhash": "0121ba6e77b2d89461f23390193e5d355ba09abcebd8fa774d13dc925f67d927",
        "hashPrevBlock": "00325ddee8e46aa1dcea791e370f87bcd94654a19d7bbf69d9fc6fd2afa5bc1f",
        "hashMerkleRoot": "31fbd5fc898ec987575eb676abedcee5480375365e7554ac9aa90489c5e29e57",
        "nTime": 1563969248,
        "nBits": 486609177
      },
      {
        "height": 1456697,
        "blockhash": "008f9c7128023e04d1896d101a74b7a5020b4a9c4d372116f8a25117d6fc89b0",
        "hashPrevBlock": "0121ba6e77b2d89461f23390193e5d355ba09abcebd8fa774d13dc925f67d927",
        "hashMerkleRoot": "6122994bfb8f97dc6275119004c042afdd2cf6eab9a8e294f0ef5549793c39e2",
        "nTime": 1563969346,
        "nBits": 486610067
      },
      {
        "height": 1456698,
        "blockhash": "0dffa8155af91fb742dfc6252bd4f7bfd85e7c770db5b06edf45b54bed6afeb8",
        "hashPrevBlock": "008f9c7128023e04d1896d101a74b7a5020b4a9c4d372116f8a25117d6fc89b0",
        "hashMerkleRoot": "d2429d0ee8c131bdba55058e86d7e55c68041dcfe0c72ff8596542fc35571a2e",
        "nTime": 1563969406,
        "nBits": 486609959
      },
      {
        "height": 1456699,
        "blockhash": "0e4f73be5d71475d1203e2bd5350f631b4afc90db65ff1a46a0d0ce9ff6082b0",
        "hashPrevBlock": "0dffa8155af91fb742dfc6252bd4f7bfd85e7c770db5b06edf45b54bed6afeb8",
        "hashMerkleRoot": "0edb7a7f18d2bcf5fd5e1364cd913e8e9769bf7e51292d5d57e5b886fdf39834",
        "nTime": 1563969466,
        "nBits": 486610314
      },
      {
        "height": 1456700,
        "blockhash": "09b87ed9bc81684322cb3fd36775232d4609210ff75fe7a075a5f859f573d7f1",
        "hashPrevBlock": "0e4f73be5d71475d1203e2bd5350f631b4afc90db65ff1a46a0d0ce9ff6082b0",
        "hashMerkleRoot": "98547e5781d6a0d04fd952bd5ff92223bbb4ca03a991818c445f58d2ad88e8bc",
        "nTime": 1563969526,
        "nBits": 486609186
      }
    ],
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## help

**help**

This method returns the help output of all available methods.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name    | Type             | Description                                                 |
| ------- | ---------------- | ----------------------------------------------------------- |
| result  | (string)         | whether the command was successful                          |
| methods | (array of jsons) | an array containing a json object for each method           |
| method  | (string)         | name of a method                                            |
| fields  | (array)          | an array conataining the description of parameters expected |
| num     | (number)         | the number of methods available                             |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "help", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "methods": [
      { "method": "stop", "fields": [] },
      { "method": "help", "fields": [] },
      { "method": "logout", "fields": [] },
      { "method": "getnewaddress", "fields": [] },
      { "method": "getpeerinfo", "fields": [] },
      { "method": "login", "fields": [{ "wif": "string" }] },
      { "method": "broadcast", "fields": [{ "hex": "string" }] },
      {
        "method": "listunspent",
        "fields": [
          { "address": "string" },
          { "isCC": "uint32_t" },
          { "skipcount": "uint32_t" },
          { "filter": "uint32_t" }
        ]
      },
      {
        "method": "listtransactions",
        "fields": [
          { "address": "string" },
          { "isCC": "uint32_t" },
          { "skipcount": "uint32_t" },
          { "filter": "uint32_t" }
        ]
      },
      { "method": "notarizations", "fields": [{ "height": "uint32_t" }] },
      {
        "method": "hdrsproof",
        "fields": [{ "prevheight": "uint32_t" }, { "nextheight": "uint32_t" }]
      },
      { "method": "getinfo", "fields": [{ "hdrheight": "uint32_t" }] },
      {
        "method": "txproof",
        "fields": [
          { "txid": "hash" },
          { "vout": "uint32_t" },
          { "height": "uint32_t" }
        ]
      },
      {
        "method": "spentinfo",
        "fields": [{ "txid": "hash" }, { "vout": "uint32_t" }]
      },
      {
        "method": "spend",
        "fields": [{ "address": "string" }, { "amount": "float" }]
      },
      {
        "method": "mempool",
        "fields": [
          { "address": "string" },
          { "isCC": "uint32_t" },
          { "memfunc": "uint32_t" },
          { "txid": "hash" },
          { "vout": "uint32_t" },
          { "evalcode": "uint32_t" },
          { "CCfunc": "uint32_t" }
        ]
      }
    ],
    "num": 16
  }
  ```
</CollapsibleSection>

## listtransactions

**listtransactions \[address \[isCC \[skipcount \[filter]]]]**

This method returns a list of transactions for an address.

#### Arguments

| Name      | Type               | Description                                                                                                |
| --------- | ------------------ | ---------------------------------------------------------------------------------------------------------- |
| address   | (string, optional) | the address for which transactions are to be listed; if not specified, the current active address is used  |
| isCC      | (number, optional) | only return transactions that are related to Antara modules                                                |
| skipcount | (number, optional) | skips the specified number of transactions starting from the oldest; always returns the latest transaction |
| filter    | (number, optional) | (in development)                                                                                           |

#### Response

| Name      | Type             | Description                                                                             |
| --------- | ---------------- | --------------------------------------------------------------------------------------- |
| result    | (string)         | whether the command was successful                                                      |
| txids     | (array of jsons) | an array containing jsons that describe the transactions                                |
| height    | (number)         | the height of the block in which the transaction was included                           |
| txid      | (string)         | the id of the transaction                                                               |
| value     | (number)         | the amount of coins in the vin/vout (inputs and outputs)                                |
| vin/vout  | (number)         | the index of vin/vout in the transaction                                                |
| address   | (string)         | the address for which the transactions are being returned                               |
| isCC      | (number)         | whether the address belongs to an Antara module                                         |
| height    | (number)         | the height of the blockchain when this response was returned                            |
| numtxids  | (number)         | number of vouts/vins being returned                                                     |
| skipcount | (number)         | the number of transactions that have been skipped, starting from the oldest transaction |
| filter    | (number)         | (in development)                                                                        |
| lastpeer  | (string)         | the last known peer                                                                     |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "listtransactions", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "txids": [
      {
        "height": 1453830,
        "txid": "04df7641f114c14fa4fbe2ec6e8ef5b55417f78fd12ef90b1217fcf512cb5ec2",
        "value": 2.98,
        "vout": 1
      },
      {
        "height": 1453881,
        "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
        "value": -2.98,
        "vin": 0
      },
      {
        "height": 1453881,
        "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
        "value": 2.00999,
        "vout": 1
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": 1,
        "vout": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": -2.00999,
        "vin": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "value": 1.00989,
        "vout": 1
      }
    ],
    "address": "RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",
    "isCC": 0,
    "height": 1458248,
    "numtxids": 6,
    "skipcount": 0,
    "filter": 0,
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## listunspent

**listunspent \[address \[isCC \[skipcount \[filter]]]]**

Use this method to retrieve all unspent outputs belonging to an address.

#### Arguments

| Name      | Type               | Description                                                                                                |
| --------- | ------------------ | ---------------------------------------------------------------------------------------------------------- |
| address   | (string, optional) | the address for which transactions are to be listed; if not specified, the current active address is used  |
| isCC      | (number, optional) | only return transactions that are related to Antara modules                                                |
| skipcount | (number, optional) | skips the specified number of transactions starting from the oldest; always returns the latest transaction |
| filter    | (number, optional) | (in development)                                                                                           |

#### Response

| Name      | Type             | Description                                                  |
| --------- | ---------------- | ------------------------------------------------------------ |
| result    | (string)         | whether the command was successful                           |
| utxos     | (array of jsons) | an array containing jsons that describe the outputs          |
| height    | (number)         | the height of the block in which the output was created      |
| txid      | (string)         | the id of the transaction in which the output is present     |
| vout      | (number)         | the index of the vout (output) in the transaction            |
| value     | (number)         | the amount of coins in the vout (output)                     |
| rewards   | (number)         | the amount of active user rewards claimable by the output    |
| address   | (string)         | the address for which the transactions are being returned    |
| isCC      | (number)         | whether the address belongs to an Antara module              |
| height    | (number)         | the height of the blockchain when this response was returned |
| numutxos  | (number)         | number of vouts(outputs) being returned                      |
| balance   | (number)         | the total balance available for the address                  |
| rewards   | (number)         | the total rewards claimable by the address                   |
| skipcount | (number)         | the number of utoxs that have been skipped; from the oldest  |
| filter    | (number)         | (in development)                                             |
| lastpeer  | (string)         | the last known peer                                          |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "listunspent", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "utxos": [
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "vout": 0,
        "value": 1,
        "rewards": 0
      },
      {
        "height": 1458037,
        "txid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
        "vout": 1,
        "value": 1.00989,
        "rewards": 0
      }
    ],
    "address": "RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",
    "isCC": 0,
    "height": 1458307,
    "numutxos": 2,
    "balance": 2.00989,
    "rewards": 0,
    "skipcount": 0,
    "filter": 0,
    "lastpeer": "nodeid.17"
  }
  ```
</CollapsibleSection>

## login

**login wif**

Use this method to log in to an address using its wifkey.

#### Arguments

| Name | Type     | Description                                         |
| ---- | -------- | --------------------------------------------------- |
| wif  | (string) | the wifkey (wallet import format of the privatekey) |

#### Response

| Name       | Type      | Description                                                              |
| ---------- | --------- | ------------------------------------------------------------------------ |
| result     | (string)  | whether the command was successful                                       |
| status     | (string)  | the time till the expiry of the login                                    |
| address    | (string)  | the address corresponding to the wifkey                                  |
| pubkey     | (string)  | the pubkey corresponding to the wifkey                                   |
| wifprefix  | (number)  | the prefix of the wifkey (indicates the intended network for the wifkey) |
| compressed | (boolean) | indicates whether the wifkey is compressed                               |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "login", "params": ["Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "status": "wif will expire in 777 seconds",
    "address": "Rxxxxxxxxxxxxxxxxxxx",
    "pubkey": "03xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "wifprefix": 188,
    "compressed": 1
  }
  ```
</CollapsibleSection>

## logout

**logout**

Use this method to log out of the current active address.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name   | Type     | Description                   |
| ------ | -------- | ----------------------------- |
| result | (string) | whether the command succeeded |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "logout", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  { "result": "success" }
  ```
</CollapsibleSection>

## mempool

**mempool address isCC memfunc \[txid vout evalcode ccfunc]**

This method returns the current transactions in the mempool. The various parameters can be used to filter the transactions.

<DevComment>
  which args are optional and eachone's use

  and values and meanings of memfunc

  memfunc (0 all, 1 address recv, 2 txid/vout spent, 3 txid inmempool 4)

  gcharang: all the arguments are optional; and they are in development
</DevComment>

#### Arguments

| Name     | Type               | Description                                            |
| -------- | ------------------ | ------------------------------------------------------ |
| address  | (string, optional) | if the transactions should belong to the address       |
| isCC     | (number, optional) | if the transactions should belong to any Antara module |
| memfunc  | (number, optional) | (in development)                                       |
| txid     | (string, optional) | (in development)                                       |
| vout     | (number, optional) | (in development)                                       |
| evalcode | (number, optional) | (in development)                                       |
| ccfunc   | (number, optional) | (in development)                                       |

#### Response

| Name     | Type               | Description                                                  |
| -------- | ------------------ | ------------------------------------------------------------ |
| result   | (string)           | whether the command was successful                           |
| txids    | (array of strings) | the ids of the transactions in the mempool                   |
| address  | (string)           | the address that was used to filter the mempool              |
| isCC     | (number)           | if the transactions returned belong to an Antara Module      |
| height   | (number)           | the height of the blockchain when this response was returned |
| numtxids | (number)           | the number of transaction ids that are being returned        |
| txid     | (string)           | (in development)                                             |
| vout     | (number)           | (in development)                                             |
| memfunc  | (number)           | (in development)                                             |
| type     | (string)           | the type of the filter apploed to the mempool                |
| lastpeer | (string)           | the last known peer                                          |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "mempool", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "txids": [
      "9f4a28bf746fc4a8f627302ff09159345a2ca4e3be404b7f4b02e90865c1b301",
      "f676945f97e791c54e9c2e507e715cd160ec39452aa9019610861039c199d532",
      "d6712c027c2396265b87a1645cda8fcb8ff40d6c0dd86ff932f25b51387b613b",
      "eb36d507991accc337c45bd9f0113050223fa0b7b43c76b400cf63fb21cfd26e",
      "76bafb69f1c58a0726df1719aa5eb16cdc026f06969dfeef20e5752889381b6f",
      "2d02915d392ca9323fbd2344e9f951dddf59a4a77794d121e88055d90df1bed1",
      "94f61cf68e30764ef31ea0376d74a1c9d774f6ccb4f2e612f9b650ab38405adf",
      "050020b9867306c2ab2b131391a9edf0ab72e4d4a018bb1837734850f78ba8f1"
    ],
    "address": "",
    "isCC": 0,
    "height": 1458372,
    "numtxids": 8,
    "txid": "0000000000000000000000000000000000000000000000000000000000000000",
    "vout": 0,
    "memfunc": 0,
    "type": "all mempool",
    "lastpeer": "nodeid.20"
  }
  ```
</CollapsibleSection>

## notarizations

**notarizations height**

This method returns the notarization data for a given height.

#### Arguments

| Name   | Type     | Description                                       |
| ------ | -------- | ------------------------------------------------- |
| height | (number) | the height at which notarization data is required |

#### Response

| Name                     | Type     | Description                                                                                                |
| ------------------------ | -------- | ---------------------------------------------------------------------------------------------------------- |
| result                   | (string) | whether the command was successful                                                                         |
| prev                     | (json)   | the details of the previous notarization                                                                   |
| notarized\_height        | (number) | the height of the latest block that has been notarized                                                     |
| notarized\_blockhash     | (string) | the blockhash of the latest block that has been notarized                                                  |
| notarization\_txid       | (string) | the id of the transaction in which the notarization data is included in the chain being dPoW'ed            |
| notarization\_txidheight | (number) | the height of the block in which the notarization transaction is included                                  |
| notarization\_desttxid   | (string) | the id of the transaction in which the notarization data is included in the chain acting as the data store |
| next                     | (json)   | the details of the next notarization                                                                       |
| lastpeer                 | (string) | the last known peer                                                                                        |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "notarizations", "params": [145677] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "prev": {
      "notarized_height": 1457780,
      "notarized_blockhash": "0cd381289fcc84f28ed9759e6803d2da4f60757da55b91eb8c78b12d99f0f855",
      "notarization_txid": "fff01156657dccb6ba80cd6aa84676a2b66f7f5eb6b882f2cbe6fe87523bd3aa",
      "notarization_txidheight": 1457796,
      "notarization_desttxid": "a2a448d2094eb0687072c38332a5629595a1b30c51aa40b7c8ee8113054a63fc"
    },
    "next": {
      "notarized_height": 1457820,
      "notarized_blockhash": "000000010110afdc044b7652e9be1d177cfb369d16f431c421b3030ab9ca3e4a",
      "notarization_txid": "ba3e0792de1324cb557b9b8a8449d9142d1699e54e677f774d8491c4036f5e1c",
      "notarization_txidheight": 1457833,
      "notarization_desttxid": "e699a1cd513a35cfb8075cbbb5d3db62a6cbcdcced5744e2dcd6744d5e399126"
    },
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## spend

**spend address amount**

{/* FIXME doc retcodes? */}

This method can be used to spend coins from the current active address to any other address.

#### Arguments

| Name    | Type     | Description                  |
| ------- | -------- | ---------------------------- |
| address | (string) | the address of the recipient |
| amount  | (number) | the amount to be sent        |

#### Response

| Name          | Type             | Description                                                                                                                              |
| ------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| rewards       | (string)         | the rewards being claimed by this spend transaction                                                                                      |
| validated     | (string)         | (in development)                                                                                                                         |
| tx            | (json)           | a json object containing details of the transaction                                                                                      |
| nVersion      | (number)         | version of the komodo daemon                                                                                                             |
| vin           | (array of jsons) | the inputs being consumed by the transaction                                                                                             |
| txid          | (string)         | the id of the transaction whose input is being spent                                                                                     |
| vout          | (number)         | the output number in the above transaction                                                                                               |
| scriptSig     | (string)         | the redeem script that satisfies the scriptPubkey of the above output                                                                    |
| sequenceid    | (number)         | the sequence number that has been set                                                                                                    |
| vout          | (array of jsons) | the outputs being created by the transaction                                                                                             |
| value         | (string)         | the value in the output                                                                                                                  |
| scriptPubKey  | (string)         | the locking script placed on the above value                                                                                             |
| nLockTime     | (number)         | the locktime that has been set                                                                                                           |
| nExpiryHeight | (number)         | the block height after which the transaction will be removed from the mempool if it has not been mined                                   |
| valueBalance  | (number)         | (in development)                                                                                                                         |
| result        | (string)         | whether the command succeeded                                                                                                            |
| hex           | (string)         | the transaction in hex format; this should be broadcast to the network using the [broadcast](/smart-chains/setup/nspv/#broadcast) method |
| retcodes      | (number)         | the return codes; an indication of the success or failure of the creation of the transaction                                             |
| lastpeer      | (string)         | the last known peer                                                                                                                      |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "spend", "params": ["RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb",1 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "rewards": "0.00000000",
    "validated": "0.00000000",
    "tx": {
      "nVersion": 4,
      "vin": [
        {
          "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
          "vout": 1,
          "scriptSig": "47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06",
          "sequenceid": 4294967295
        }
      ],
      "vout": [
        {
          "value": 1,
          "scriptPubKey": "76a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac"
        },
        {
          "value": 1.00989,
          "scriptPubKey": "210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac"
        }
      ],
      "nLockTime": 1564049127,
      "nExpiryHeight": 0,
      "valueBalance": 0
    },
    "result": "success",
    "hex": "0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a47304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a64001210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ace77e395d000000000000000000000000000000",
    "retcodes": [0],
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## spentinfo

**spentinfo txid vout**

This method returns the spent info of the output specified by the arguments.

#### Arguments

| Name | Type     | Description                                                           |
| ---- | -------- | --------------------------------------------------------------------- |
| txid | (string) | the id of the transaction whose spent info is required                |
| vout | (number) | the vout number in the above transaction whose spent info is required |

#### Response

| Name            | Type     | Description                                                           |
| --------------- | -------- | --------------------------------------------------------------------- |
| result          | (string) | whether the command succeeded                                         |
| txid            | (string) | the id of the transaction whose spent info is returned                |
| vout            | (string) | the vout number in the above transaction whose spent info is required |
| spentheight     | (string) | the block height at which the output has been spent                   |
| spenttxid       | (string) | the id of the transaction that spent this output                      |
| spentvini       | (string) | the input number of this output in the transaction that spent it      |
| spenttxlen      | (string) | the length of the transaction that spent this output                  |
| spenttxprooflen | (string) | the length of proof of the transaction that spent this output         |
| lastpeer        | (string) | the last known peer                                                   |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "spentinfo", "params": ["e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",1 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": "success",
    "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
    "vout": 1,
    "spentheight": 1458037,
    "spenttxid": "c76fede03fd821cf718b8ca7de898b95d04d7b9f7fcaeda89ccc00519476ec4a",
    "spentvini": 0,
    "spenttxlen": 254,
    "spenttxprooflen": 1655,
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>

## stop

**stop**

Stops the nSPV instance associated with the port specified in the curl command.

#### Arguments

| Name   | Type | Description |
| ------ | ---- | ----------- |
| (none) |      |             |

#### Response

| Name   | Type     | Description                        |
| ------ | -------- | ---------------------------------- |
| result | (string) | whether the command was successful |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "stop", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  { "result": "success" }
  ```
</CollapsibleSection>

## txproof

**txproof txid vout \[height]**

This method is an internal function used by the [gettransaction](/smart-chains/api/wallet/#gettransaction) method.

#### Arguments

| Name   | Type               | Description                                        |
| ------ | ------------------ | -------------------------------------------------- |
| txid   | (string)           | the id of the transaction whose proof is requested |
| vout   | (number)           | the number of the output in the above transaction  |
| height | (number, optional) |                                                    |

#### Response

| Name       | Type     | Description                                                  |
| ---------- | -------- | ------------------------------------------------------------ |
| txid       | (string) | the id of the transaction whose proof is returned            |
| height     | (string) | the height at which the proof of the transaction is returned |
| txlen      | (string) | the length of the transaction                                |
| txprooflen | (string) | the length of the proof for the transaction                  |
| lastpeer   | (string) | the last known peer                                          |

#### 📌 Examples

##### Command

```bash
curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "txproof", "params": ["e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",0,1453881 ] }' -H 'content-type: text/plain;' http://127.0.0.1:$port/
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "txid": "e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855",
    "height": 1453881,
    "txlen": 244,
    "txprooflen": 1655,
    "lastpeer": "nodeid.1"
  }
  ```
</CollapsibleSection>
export const title = "Smart Chain Maintenance";
export const description = "Manually delete Smart Chain blockchain data to trigger a full re-sync. Remove specific files from the data directory while preserving the wallet.dat file.";

# Smart Chain Maintenance

## Manually Deleting Blockchain Data

Sometimes it is necessary to manually delete all blockchain data. This should automatically trigger a full re-sync of the Smart Chain.

Users should exercise caution not to delete the `wallet.dat` file during this procedure. We recommend that the user make frequent backups of the `wallet.dat` file, especially before deleting files from the data directory.

To erase all synced blockchain data, the following files should be deleted from the `.komodo` folder:

#### Files to Delete

*   `blocks`
*   `chainstate`
*   `notarisations`
*   `komodostate`
*   `komodostate.ind`
*   `peers.dat`

#### Default Location for Files

| Operating System | Directory                                     |
| ---------------- | --------------------------------------------- |
| MacOS            | `~/Library/Application Support/Komodo`        |
| Windows          | `C:\Users\myusername\AppData\Roaming\Komodo\` |
| GNU/Linux        | `~/.komodo`                                   |
export const title = "Updating Smart Chain Software From Source";
export const description = "To update your compiled komodod daemon, follow the steps in this document carefully.";

# Updating Smart Chain Software From Source

## Linux

To update your compiled `komodod` daemon, follow the steps below carefully. For each step, do not proceed to the next step until the current step is fully complete.

You may leave the `komodod` daemon running, if necessary, and if your machine has sufficient resources.

Alternatively, you may stop the daemon by executing `~/komodo/src/komodo-cli stop`.

#### Navigate to your komodo directory

```bash
cd ~/komodo
```

#### Reset Your Local Repository

```bash
git reset --hard
```

#### Clean the Source Directory

```bash
make clean
```

#### Update Your Local Source Code

```bash
git pull
```

#### Compile the Latest Komodo Binary

```bash
./zcutil/build.sh -j$(nproc)
```

#### Restart the komodod Daemon

Start your services as usual.

(If you did not stop the daemon before compiling, stop the daemon using `~/komodo/src/komodo-cli stop` and start the daemon again.)

```bash
~/komodo/src/komodod &
```

#### Rapid Update Method

The steps below can often be used to update the daemon.

These steps take a lesser amount of time, but they may occasionally produce an error during compilation. If the steps below do not succeed, the compiler will cease and return an error. When this happens, simply switch to the update steps listed above.

```bash
cd ~/komodo
git checkout dev
git pull
make -j$(nproc)
```

## MacOS

To update your compiled `komodod` daemon, follow the steps below carefully. For each step, do not proceed to the next step until the current step is fully complete.

You may leave the `komodod` daemon running, if necessary, and if your machine has sufficient resources.

Alternatively, you may stop the daemon by executing `~/komodo/src/komodo-cli stop`.

#### Navigate to your komodo directory

```bash
cd ~/komodo
```

#### Reset Your Local Repository

```bash
git reset --hard
```

#### Clean the Source Directory

```bash
make clean
```

#### Update Your Local Source Code

```bash
git pull
```

#### Compile the Latest Komodo Binary

```bash
./zcutil/build.sh -j8
```

#### Restart the komodod Daemon

Start your services as usual.

(If you did not stop the daemon before compiling, stop the daemon using `~/komodo/src/komodo-cli stop` and start the daemon again.)

```bash
~/komodo/src/komodod &
```

#### Rapid Update Method

The steps below can often be used to update the daemon.

These steps take a lesser amount of time, but they may occasionally produce an error during compilation. If the steps below do not succeed, the compiler will cease and return an error. When this happens, simply switch to the update steps listed above.

```bash
cd ~/komodo
git checkout dev
git pull
make -j8
```

## Windows

To update the Windows software, you will again need access to your available installation of Linux where you originally compiled the software.

#### Build the New Executables

Execute the following commands on your Linux machine to build the new executable files.

```bash
cd ~/komodo
git pull
./zcutil/build-win.sh -j8
```

This can take some time.

#### Move Executables to Windows OS

Once the process completes, find the `komodod.exe` and `komodo-cli.exe` files and move them to your Windows OS machine.

You may drop these executable files into the same `kmd` folder to overwrite the old executables files.

Once complete, run the `komodod.exe` and `komodo-cli.exe` files to verify that they work properly.
export const title = "Basic Environment Setup for Linux VPS";
export const description = "Set up a basic development environment for Komodo ecosystem on a Linux VPS, including choosing a VPS provider, connecting to the VPS, and implementing security measures.";

# Basic Environment Setup for Linux VPS

## Introduction

This tutorial provides guidance in creating a simple environment for development in the Komodo ecosystem.

The content herein is not comprehensive. Rather, this content provides a starting point, from which an enthusiastic learner should be capable of customizing and developing their own approach.

## Rent a VPS

A common environment choice among developers is to use a Virtual Private Server (VPS). A VPS allows a developer to use the Internet to access high quality hardware with corporate-level high speed Internet access.

Popular VPS choices include [Amazon Web Services (AWS)](https://aws.amazon.com) and [DigitalOcean](https://www.digitalocean.com/).

One reason a VPS is popular is that a developer can quickly create new instances of a virtual machine. This facilitates the developer in having a clean environment that is targeted for a specific purpose.

VPS's are also relatively cheap. Both AWS and DigitalOcean provide the basic necessities for \~$20/month, depending on your desired specifications.

<Note type="warning">
  When using an AWS instance, do not use the free tier's micro t2 instance. This tier does not include enough RAM for blockchain software to function properly. Instead, select a size of at least medium or greater. This will ensure at least 4GB RAM.
</Note>

<Note>
  Alternatively, you can use your own personal computer, or a bare-metal server. However, troubleshooting on a personal setup can prove to be more time consuming than on a VPS.
</Note>

### Recommended Minimum Server Specifications:

*   CPU with 4 cores
*   8 GB RAM
*   \~100GB SSD
    *   Note that using an HDD instead of a SSD will dramatically increase synchronization time, and thus slow down your workflow
*   Ubuntu version 18.04 (for beginners)
    *   Ubuntu is the most popular Linux distribution
    *   The majority of Komodo's documentation is tested and written on Ubuntu
    *   To learn more about Linux, [read this linked article](https://www.linux.com/what-is-linux/)

## Connect to Your VPS

Once you have chosen your VPS provider, you will need to connect to your VPS.

New developers often find this process confusing.

Your VPS provider should have several tutorials available to help you through this process.

Look for tutorials on the following topics.

*   How to launch a terminal shell on your laptop or desktop machine
*   How to set up SSH keys for secure login access
*   How to execute a `ssh` command on your local machine to connect to your VPS
*   How to enter `sudo` commands on your VPS

For example, AWS has the following documentation to assist new developers in accessing VPS's that use the AWS EC2 service. Choose between MacOS & Linux, or Windows, both of which have different tutorial paths.

[Link to AWS tutorial starting point](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstances.html)

## Initial VPS Setup

Once you can access your VPS via the terminal, it is time to consider security in your environment. You are accessing a machine over the Internet, and there are myriad ways by which an attack can compromise your connection.

To ensure your own safety, consider the following security measures.

*   Never log into your VPS as the root user
*   Consider disabling the option to log in as root
*   Use SSH keys to log in, instead of a password
*   Enable a firewall to limit all unwanted traffic

The following tutorials provide many useful tips on creating a secure server.

*   [Initial Server Setup with Ubuntu 18.04 | Digital Ocean](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04)
*   [Using SSH to connect to a remove server](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-to-connect-to-a-remote-server)

For experience learning the Linux environment, consider the following tutorials.

*   [How to use the Unix command line (interactive course)](https://www.codecademy.com/learn/learn-the-command-line)
*   [An Introduction to Linux (Especially "A Culture of Learning")](https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-basics)
*   [How To Download Software and Content onto your Linux VPS](https://www.digitalocean.com/community/tutorials/how-to-download-software-and-content-onto-your-linux-vps)
*   [How To Use cd, pwd, and ls to Explore the File System on a Linux Server](https://www.digitalocean.com/community/tutorials/how-to-use-cd-pwd-and-ls-to-explore-the-file-system-on-a-linux-server)
*   [How to Add and Delete Users on Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-16-04)
export const title = "Creating Komodo Smart Chains";
export const description = "Create a new Komodo Smart Chain with simple parameters, connect multiple nodes, and verify the chain's configuration.";

# Creating Komodo Smart Chains

## Introduction

#### Requirements for Creating a New Chain

*   2 nodes with the ability to open ports (a node can be either a computer or a VPS)
*   At least 4GB RAM each
*   At least 2 CPU cores each
*   64-bit Operating System (Ubuntu 18.04 recommended)
*   Komodo Smart Chain software installed on each
    *   (when the goal is only to build a new Smart Chain, there is no need to sync the KMD main chain)

<Note>
  When you are building and testing a Komodo Smart Chain, please do not hesitate
  to reach out to us when you are stuck. We wish to make this as easy as
  possible. Our support agents are available in our{" "}
  <a href="https://komodoplatform.com/discord">#support channel in Discord</a>{" "}
  for many hours each day.
</Note>

### Basic Info for Connecting At Least Two Nodes

Basic knowledge about how to connect two nodes is recommended for the initial setup.

As per the original blockchain designs of Satoshi Nakamoto, a Komodo Smart Chain does not exist on a single node. Rather, it exists via a connection between two or more nodes. This is the nature of decentralization: it is on the network we rely, rather than a single authority. Therefore, the design of the technology encourages the developer to have two separate nodes which are able to connect over a network.

In the most ideal circumstance, the new Komodo developer will already have two virtual private servers (VPS's) available for testing. VPS's can be cheap and easy to manage. A typical VPS will either have a static external IP or can be assigned one.

If the new developer does not have two VPS's available, setting up a test Smart Chain on two local machines in a home or office-type setting is still achievable, but it may require more troubleshooting.

When using a home or office-type setup, the challenge lies in the way the network is created, and there are myriad network setups.

For example, if the developers are operating on a local router, where the two machines are connected via wifi, the local ip addresses of the machines are harder to find. This is because the router assigns new local ip addresses to the machines each time they re-connect to the router. It is not possible to see the ip addresses from the Internet. In this situation, the developer must log into the router's software interface and search for the currently assigned local ip addresses.

A home or office-type setup can suffice, if you're just looking to test an Smart Chain quickly and don't want to spend money on a VPS. However, don't be surprised if you need to ask for help. Please reach out to us, and we'll help the best we can.

To test the creation of a Smart Chain using only a single node, [see these linked instructions.](/smart-chains/tutorials/creating-a-smart-chain-on-a-single-node/#introduction)

To prepare for the next step, execute the following command in the terminal on both machines:

```bash
curl ifconfig.me
```

From the response, record the `ip address` value for additional use.

With the ip addresses available, we are now prepared to test the connection between the machines.

```bash
ping <insert the ip address of the other machine here>
```

This command will generate a response every second, indicating the `ping` speed with which your machines are able to connect.

```bash
$ ping 192.168.1.101

PING 192.168.1.101 (192.168.1.101) 56(84) bytes of data

64 bytes from 192.168.1.101: icmp_seq=1 ttl=64 time=131 ms

64 bytes from 192.168.1.101: icmp_seq=2 ttl=64 time=2.40 ms

```

If you do not see a similar response in the shell, your machines are not able to connect. Please reach out to our team and we will do our best to assist you.

## Part I: Creating a New Komodo Smart Chain

With your machines successfully able to `ping` each other, you are ready to create your first Smart Chain.

The following instructions use the simplest possible set of parameters in creating a new Smart Chain: a coin with the ticker symbol `HELLOWORLD`, `777777` pre-mined coins, and a block reward of `.0001`.

On your first node, change into the directory where Komodo's `komodod` and `komodo-cli` are installed and execute the following commands in the terminal:

#### Mac & GNU/Linux

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the second node> &
```

#### Windows

```bash
./komodod.exe -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the second node> &
```

<Note>
  If you want the Smart Chain to have Antara Modules enabled, please include the
  [-ac\_cc](/antara/setup/antara-customizations/#ac-cc) parameter with the
  required value in your launch parameters on both the nodes.
</Note>

### Verify the Response

After issuing this command in the terminal on both machines, you will find the p2p port in the terminal window.

```bash
>>>>>>>>>> HELLOWORLD: p2p.8096 rpc.8097 magic.c89a5b16 3365559062 777777 coins
```

In the above string, take note of the p2p and RPC ports, as well as the magic number. These values must match on both nodes for the chains to be identical. If they are not the same, verify that the launch command is the same on both the nodes.

In the example above, the p2p port is `8096`. Make sure that the p2p port is open to the internet or any other network from which the second node connects.

This completes the first half of the Smart Chain creation process. Scroll down to [Part II](/smart-chains/tutorials/create-a-default-smart-chain/#part-ii-connecting-the-second-node).

<Note>
  Please refer to [Antara Customization
  parameters](/antara/setup/antara-customizations/#ac-algo) for a full list of
  parameters to customize the characteristics of your blockchain.
</Note>

<Note>
  Please note the requirements for
  [ac\_supply](/antara/setup/antara-customizations/#ac-supply), and instructions
  for using [addnode](/smart-chains/setup/common-runtime-parameters/#addnode)
  under various network conditions, including firewalls and LANs.
</Note>

## Part II: Connecting the Second Node

On the second node you issue the same command, but with a key difference. This time, use the first node's IP address.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -addnode=<IP address of the first node> &
```

Once the daemon loads, compare the string that starts with `>>>>>>>>>>` in the second node to the one from the first node to make sure they are identical.

Mining can be started on a node using the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD setgenerate true $(nproc)
```

`$(nproc)` in the above command makes the daemon mine using all the available CPU threads, which might be necessary in a low end VPS.

On a Komodo-based blockchain, all of the pre-mined coins are mined in the first block. Therefore, whichever machine executes the mining command will receive the entirety of the blockchain's pre-mined coin supply, as set in the [ac\_supply](/antara/setup/antara-customizations/#ac-supply) parameter. Upon mining the first block, these coins are available in the default `wallet.dat` file.

To collect all the mining rewards from the node to a single address, execute the following commands before issuing the `setgenerate` command:

```bash
# Get a new address
newaddress=$(./komodo-cli -ac_name=HELLOWORLD getnewaddress)

# Get the corresponding pubkey
pubkey=$(./komodo-cli -ac_name=HELLOWORLD validateaddress $newaddress | jq -r '.pubkey' )

# Indicate the pubkey to the daemon
./komodo-cli -ac_name=HELLOWORLD setpubkey $pubkey
```

After issuing the mining command is issued, can check that the two nodes are connected by using the following command:

```bash
./komodo-cli -ac_name=HELLOWORLD getinfo | grep connections
```

If the nodes are properly connected, both nodes will respond with: `"connections": 1`

These are the coins you will later distribute to your community, using either our native DEX, [AtomicDEX](/atomicdex/tutorials/#why-is-atomic-dex-special), or our decentralized-ICO software (coming soon), or on any other third-party exchange.

You can check the contents of the wallet by executing the following command in the terminal:

```bash
./komodo-cli -ac_name=HELLOWORLD getwalletinfo
```

To verify that everything is properly initiated, send a few coins from the second node to the first node:

<CollapsibleSection expandedText="Hide Commands" collapsedText="Show Commands">
  ### Node1

  ```bash
  newaddress=$(./komodo-cli -ac_name=HELLOWORLD getnewaddress)
  echo $newaddress
  # Copy the returned address for use on the other node
  ```

  ### Node2

  ```bash
  # Send ten coins to the address generated on the first node
  ./komodo-cli -ac_name=HELLOWORLD sendtoaddress Address_from_the_first_node 10
  ```

  ### Node1

  ```bash
  ./komodo-cli -ac_name=HELLOWORLD getreceivedbyaddress <insert address_from_the_first_node> 0
  # The 0 argument in the above command instructs the daemon to include the unconfirmed coin balance in the response
  ```
</CollapsibleSection>

More info can be found in the debug.log of the chain found at:

*   **MacOS:** `~/.komodo/HELLOWORLD/debug.log`
*   **Windows:** `%appdata%\komodo\HELLOWORLD\debug.log`
*   **GNU/Linux:** `~/.komodo/HELLOWORLD/debug.log`

## Querying the Smart Chain

Using the `komodo-cli` software, which is included in any default installation of `komodod`, you can now execute many commands on your new Smart Chain. This enables you to perform transactions, create and execute smart contracts, store data in KV storage, etc.

Since the Komodo software began as a fork of Zcash and BTC, essentially all commands that are available on these two upstream blockchains are also available on your new Smart Chain.

Furthermore, a key purpose of the Komodo blockchain is to create features and functions that facilitate and enhance your development experience. Information regarding these enhancements is available throughout this documentation.

In addition, since you are building on a Komodo-based blockchain, you have easy access to our multi-coin wallet and atomic-swap powered decentralized exchange, [AtomicDEX](/atomicdex/tutorials/#why-is-atomic-dex-special), the Antara development framework and modules, our decentralized-ICO software, and our future upgrades.

## Example commands

To see general information about your new Smart Chain, execute this command:

`./komodo-cli -ac_name=HELLOWORLD getinfo`

The following command returns information about all available RPC and API commands:

`./komodo-cli -ac_name=HELLOWORLD help`

## Secure this Smart Chain with Delayed Proof of Work

Your new Smart Chain can receive the same security of the Bitcoin hash rate through our security mechanism, called "delayed Proof of Work" (dPoW).

There are two aspects to the cost for dPoW services. The first comes from the cost of making records in your Smart Chain's database, and in the records of the KMD main chain. These records are called "notarizations."

Notarizations are performed as transactions on your blockchain and on the main KMD blockchain. The transactions have messages included inside that indicate the most recent and secure state of your Smart Chain. Your Komodo Smart Chain will know how to recognize and rely on notarizations automatically.

Every ten to twenty minutes, our notary nodes will hash the history of your Smart Chain and insert it as a record into the KMD main chain. This provides an initial layer of security, but it is not the final layer.

In another ten to twenty minutes, all of the information in the KMD chain (including your Smart Chain's hashed data) is hashed and inserted into the BTC blockchain. Once your information is pushed into BTC, your Smart Chain will consider all notarized information effectively settled and immutable; only the recent, un-notarized transactions are still relying on your Smart Chain's raw consensus mechanism. [Click here to learn more about the types of consensus mechanisms you can choose on a KMD Smart Chain](/antara/setup/antara-customizations/#ac-staked).

Thus, your Smart Chain will have all the power of Bitcoin securing your blockchain's history, with the zero-knowledge privacy of the Zcash parameters pre-installed, and all of the interoperability, scalability, and more that Komodo adds to your development experience.

As the notarizations are transactions, they naturally have a cost, and this cost is covered by you, the Smart Chain developer. Over the course of a year, assuming consistent activity, the cost for performing these transactions is 365 KMD, and also 365 of your Smart Chain's coins.

There are extra costs involved that are aimed to compensate the Notary Nodes for the setup and maintainance of the dPOW service. You may reach out to our third-party service providers to receive a quote. They can provide various services related to Smart Chain creation, electrum-server (SPV) setup and maintenance, explorer setup, and other blockchain services.

[<b>Click Here for the List of Third-Party Service Providers</b>](/start-here/about-komodo-platform/orientation/#production-smart-chains-typically-require-komodo-security-services)

Several teams have already signed up for our services and are developing on our platform. From our experience with them we can confidently say that our pricing is competitive compared to other blockchain services. Furthermore, when considering that a Komodo-based Smart Chain does not require KMD for gas and transaction fees, the cost to your end-users can be exponentially cheaper. All things considered, creating a fully independent blockchain on Komodo can cost but a small fraction of what it would cost to deploy a single smart contract on the platforms of some of our competitors.

### A Note About Low-Activity Blockchains

Blockchain technology relies on a network of users using the blockchain and sharing data to function.

Smart Chains that are built for low-activity networks require extra steps from the developer to ensure proper syncing between nodes.

If you are building a Smart Chain and would like more information on maintaining constant syncing across nodes, our [<b>third-party service providers</b>](/start-here/about-komodo-platform/orientation/#production-smart-chains-typically-require-komodo-security-services) can provide dedicated support for this topic. Please also reach out to our support team and community on [<b>Discord.</b>](https://komodoplatform.com/discord)
export const title = "Creating a Smart Chain on a Single Node";
export const description =
  "Create a Komodo Smart Chain on a single node by running two daemons with different data directories. Learn how to launch and interact with the daemons.";

# Creating a Smart Chain on a Single Node

## Introduction

Under most circumstances, a developer should [use two separate nodes to set up and create a Smart Chain.](/smart-chains/tutorials/create-a-default-smart-chain/#introduction)

However, occasionally a developer may need to create a Smart Chain on a single node. This can be achieved using the [testnode](/smart-chains/setup/common-runtime-parameters/#testnode) runtime parameter. The following tutorial is only neccesary if the developer desires to run two instances of the daemon on the same server.

In this situation, the developer may create a Smart Chain by running two daemons with slightly different configurations on the same node.

#### Tutorial Prerequisites

*   Komodo Smart Chain software installed on a compatible machine
    *   [Install instructions here](/smart-chains/setup/installing-from-source/)

## Launch the First daemon

Select the desired Antara customization parameters.

[Link to Antara Customization Parameters](/antara/setup/antara-customizations/)

For this example, we use simple configurations.

##### Command

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777
```

<Note>
  If you want the Smart Chain to have Antara Modules enabled, please include the
  [-ac\_cc](/antara/setup/antara-customizations/#ac-cc) parameter with the
  required value in your launch parameters on both the daemons.
</Note>

##### Response (truncated)

Search for the part of the response that begins with this string: `>>>>>>>>>`

```bash
>>>>>>>>>> HELLOWORLD: p2p.14165 rpc.14166 magic.01362c2a 20327466 777777 coins
```

The default [p2p](/smart-chains/setup/common-runtime-parameters/#port) and [rpc](/smart-chains/setup/common-runtime-parameters/#rpcport) ports of our chain are `14165` and `14166` respectively.

#### Test komodo-cli

To interact with this first daemon, use a `komodo-cli` command as follows.

```bash
./komodo-cli -ac_name=HELLOWORLD getinfo
```

## Create a Data Directory for the Second Daemon

Create a directory on your machine for the second daemon.

In this guide, we use a directory named `coinData` in the Home directory:

```bash
mkdir ~/coinData
```

Create the data directory for the second daemon.

```bash
mkdir ~/coinData/HELLOWORLD
```

Copy the `.conf` file created for the first daemon to this new data directory.

```bash
cp ~/.komodo/HELLOWORLD/HELLOWORLD.conf ~/coinData/HELLOWORLD/
```

Change the values of `rpcuser`, `rpcpassword`, and `rpcport` in the file `~/coinData/HELLOWORLD/HELLOWORLD.conf`.

##### The HELLOWORLD.CONF File

```
rpcuser=changethis
rpcpassword=changethis
... (ommitted) ...
rpcport=12345
```

(Change all values shown above on the right side of the `=` side. In all values above, the chosen values must be different from the values in the first daemon's .conf file.)

Add a new line `port=<choose a port number betwen 1 and 65000>` to the file. This value indicates the [p2pport](/smart-chains/setup/common-runtime-parameters/#port) used by the second daemon.

```
... (file continued) ...
port=22020
```

The value of port should be different from the value of the p2p port for the first daemon.

## Launch the Second daemon

When launching the second daemon, use the same Antara customization parameters as the first daemon.

However, now we specify the data directory for the daemon, as well as the `p2p` connection.

To accomplish this, we use the <b>datadir</b> and <b>addnode</b> common launch parameters.

```bash
./komodod -ac_name=HELLOWORLD -ac_supply=777777 -datadir=/home/<USERNAME>/coinData/HELLOWORLD -addnode=localhost
```

<Note>
  Replace `<USERNAME>` with the USERNAME for your local node. You can find this value by using the `echo $USER` command in the terminal.
</Note>

To interact with the second daemon, add the <b>datadir</b> parameter to the `komodo-cli` command:

```bash
./komodo-cli -ac_name=HELLOWORLD -datadir=/home/<USERNAME>/coinData/HELLOWORLD getinfo
```

After launching the second daemon, calling `getinfo` to either of the daemons should report `"connections":1`.

## Using curl

To issue a `getinfo` call using curl, observe the following example.

Replace `<rpcuser>`, `<rpcpassword>`, `<rpcport>` with the values from the `.conf` file in the data directory corresponding to the daemon that needs to be queried.

```bash
curl -s --user <rpcuser>:<rpcpassword> --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:<rpcport>/
```

Alternatively, source the `.conf` file before using the curl command. Each time you desire to switch daemons, source the `.conf` file of your target daemon.

##### Source the First Daemon's .conf File

```bash
# Source the .conf file

source ~/.komodo/HELLOWORLD/HELLOWORLD.conf

# Execute the curl command

curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

##### Source the Second Daemon's .conf File

```bash
# Source the .conf file

source ~/coinData/HELLOWORLD/HELLOWORLD.conf

# Execute the curl command

curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```
export const title = "Smart Chain Tutorials"
export const description = "This section contains various tutorials about development and setup for Komodo Smart Chains"

# Antara Tutorials

This section of the documentation contains various tutorials about Antara development and setup for Smart Chains
export const title = "Introduction to Smart Chain Tutorials";
export const description = "Discover comprehensive tutorials for Komodo Smart Chain software, focusing on essential aspects and utilizing upstream technologies like Bitcoin and Zcash.";

# Introduction to Smart Chain Tutorials

Welcome to the Komodo Smart Chain tutorial documentation.

This section contains tutorials that are specifically designed only for the essential aspects of Smart Chain software. These tutorials often focus on technology that is available to Komodo via upstream technologies, such as Bitcoin or Zcash.

For tutorials regarding other Komodo software, such as <b>Antara</b>, which focuses on Komodo enhancement technologies, or <b>AtomicDEX</b>, which offers cross-chain atomic-swap compatibility, please see their respective documentation centers.

For a targeted learning approach to Komodo's Smart Chain software, please see the Learning Launchpad.

[<b>Link to Learning Launchpad</b>](/start-here/learning-launchpad/)
export const title = "Multisignature Transaction Creation and Walkthrough";
export const description = "Learn how to create and use a multisignature (multisig) wallet. Follow the step-by-step guide with two nodes of the KMD main chain.";

# Multisignature Transaction Creation and Walkthrough

## Introduction

Multisignature (multisig) is a technology used to increase the number of signatures required for a transaction from an address. This provides an additional layer of security to cryptocurrency transactions.

In this guide we demonstrate the creation and usage of a `2of2` multisignature wallet. We use two nodes with the KMD main chain.

To accomplish the same task on another Komodo Smart Chain, add `-ac_name=NAMEOFCHAIN` to each command.

## Get a New Address, Public Key, and Private Key

Create addresses on two nodes. We will combine these two addresses into a single multisig address.

## Node One

#### Generate a New Address

##### Command

```
./komodo-cli getnewaddress
```

##### Response

```
RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

#### Get the Public Key Using validateaddress

##### Command

```shell
./komodo-cli validateaddress RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

##### Response

```json
{
  "isvalid": true,
  "address": "RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5",
  "scriptPubKey": "76a91431a8cbc716e21238079729d46cb655ae7fadc9e388ac",
  "segid": 37,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26",
  "iscompressed": true,
  "account": ""
}
```

#### Get the Private Key

##### Command

```shell
./komodo-cli dumpprivkey RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
```

##### Response

```
DO_NOT_USEBnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt
```

#### A Summarization of Data from Node One

```
# address: RDomQ4tftJGjcHBVpAUx549jZfxtJx74r5
# pubkey:  02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26
# privkey: UrunDGyFJu5UFZG7BnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt
```

## Node Two

Follow the same steps.

#### Generate a New Address

##### Command

```shell
./komodo-cli getnewaddress
```

##### Response

```
RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

#### Get the Pubkey Value Using validateaddress

##### Command

```shell
./komodo-cli validateaddress RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

##### Response

```json
{
  "isvalid": true,
  "address": "RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s",
  "scriptPubKey": "76a9141c0f1c482d38c43bb847506a527521d2204afe6588ac",
  "segid": 38,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816",
  "iscompressed": true,
  "account": ""
}
```

#### Get the Private Key

##### Command

```shell
./komodo-cli dumpprivkey RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
```

##### Response

```
UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7
```

#### Summarization of Data From Node Two

```
address: RBqZ6nHcANekX3zxF9y4zRyfB6X8VEWF7s
pubkey:  032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816
privkey: UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7
```

## Create a Multisig Address

Combine the pubkeys to create a `2of2` multisig address.

A `2of2` address requires that both addresses sign for every transaction.

<Note>
  You can customize the signature requirements for essentially any combination. For example, you can make a <b>3of5</b> multisig address that requires <b>3</b> of <b>5</b> available addresses for each transaction.
</Note>

Execute the following command on either node. The command returns the `redeemScript` json object, which is required to spend funds.

##### Command

```shell
./komodo-cli createmultisig 2 '["02dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a26","032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a2816"]'
```

##### Response

```json
{
  "address": "bEP3HK73CboW8tGN8obyHUQteBzYjFzgNm",
  "redeemScript": "522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae"
}
```

## Fund the multisig Address

Fund the multisig address.

(You may use either node.)

##### Command

```shell
./komodo-cli sendtoaddress bEP3HK73CboW8tGN8obyHUQteBzYjFzgNm 7.77
```

##### Response

```
194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c
```

## Create the Raw Transaction

As input we use the unspent vout of the transaction used to create the multisig address. We also place our desired target destination address in the transaction.

In this example, we send the full `7.77` sum to the destination address.

If you do not want to send the full amount, you must manually specify the "change" address and state how much of the change you desire to keep.

Recall that any amount taken from the initial utxo and not included in either the destination address, or in the change address, will automatically be given to the miners as a mining fee.

##### Command

```shell
./komodo-cli createrawtransaction '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1}]' '{"RP81MSVu39QgXhGDHfnk9d9KMnp4vhEVBu":7.77}'
```

##### Response

```
0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f190100000000ffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000
```

## Sign the Raw Transaction

Sign the raw transaction using both nodes.

## Sign Using Node One

##### Command

```shell
./komodo-cli signrawtransaction "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f190100000000ffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000" '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1,"scriptPubKey":"a914121cbc7a828772bd4612bc7b9765cbbf13d0b3cc87","redeemScript":"522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae","amount":7.77}]' '["UrunDGyFJu5UFZG7BnFx9R6iaPmWaBX8iqHzRpFRjNp8kBEQYKNt"]'
```

##### Response

```json
{
  "hex": "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f19010000009200483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000",
  "complete": false,
  "errors": [
    {
      "txid": "194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c",
      "vout": 1,
      "scriptSig": "00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae",
      "sequence": 4294967295,
      "error": "Operation not valid with the current stack size"
    }
  ]
}
```

## Sign Using Node Two

Use the hex value from node one, but change the privkey to the privkey of node two's address.

##### Command

```shell
./komodo-cli signrawtransaction "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f19010000009200483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000" '[{"txid":"194fea388c5474ae25d261d8c57213b79f9a111e774caeea066f796ddd99e81c","vout":1,"scriptPubKey":"a914121cbc7a828772bd4612bc7b9765cbbf13d0b3cc87","redeemScript":"522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652ae","amount":7.77}]' '["UsuE7jG8BD1CV2xuCoBCwgzzbs4HqZ2P2im5fdyJmP2tSd3arAv7"]'
```

##### Response

```json
{
  "hex": "0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f1901000000da00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147304402200abc8c1e1e26090a7012df8859a3986229da34b0edd82c42a64efc8b89390e6702202582cbdce3de13fe59196228d4d0a6a80916e23ccb343f1cf32515688a938ebb0147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000",
  "complete": true
}
```

## Broadcast the transaction

Broadcast the raw hex to finish send the transaction.

##### Command

```shell
./komodo-cli sendrawtransaction 0400008085202f89011ce899dd6d796f06eaae4c771e119a9fb71372c5d861d225ae74548c38ea4f1901000000da00483045022100a5f4bdf5b61a4f4baf0b5b48f69488b8f752e36cbac23ec0c762bba99552ac9e022036e658c7c8c19ec4bd423fcc6a109a811b189311fc874dd466e58a1755ef4e940147304402200abc8c1e1e26090a7012df8859a3986229da34b0edd82c42a64efc8b89390e6702202582cbdce3de13fe59196228d4d0a6a80916e23ccb343f1cf32515688a938ebb0147522102dd22c272504af79b220ba37c12f777596eff4f54598e2db65be325a9393a3a2621032a73cd31fb86150c33f26312b665c21e5f9391829f29cf48aca03bbb4f9a281652aeffffffff014014502e000000001976a91497d5106d5f69619803eb8d72a2bf45a4f033338a88ac00000000a80000000000000000000000000000
```

##### Response

```
23c2aaaf458ada3f171ee5d274e8dcfc91b62099ec15e4b2d02da2b2d1172cb1
```

The above is the output txid which can be used in an online KMD block explorer to verify the transaction.

## Useful Links

*   [Detailed Article in the Russian Language](https://medium.com/@decker.komodo/%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BF%D0%BE%D0%B4%D0%BF%D0%B8%D1%81%D0%B5%D0%B9-multisig-%D0%B2-komodo-9d8f8c48da52)
*   [Multisig Web Tool](https://deckersu.github.io/coinbin/#newMultiSig)
export const title = "Running Komodo Software in Debug Mode";
export const description = "Learn how to run Komodo software in debug mode, troubleshoot crashes, and retrieve backtrace data for effective debugging and issue resolution.";

# Running Komodo Software in Debug Mode

## Introduction

To run Komodo software in debug mode, follow these steps.

## Install gdb

```bash
sudo apt-get install gdb
```

## Run Komodo Daemon With `gdb` Tool

Initiate your daemon using with `gdb -args` as a prefix.

For example, the below command would initiate the Komodod daemon with mining active and a designated pubkey.

```bash
gdb -args ./src/komodod -gen -genproclimit=2 -pubkey="03af2412ebf9517a43d192193490476fd0a44312c70755e07eb03b6d71338ebc9d"
```

<Note>
  If you are having trouble initiating komodod in the shell, try use the absolute path to komodod. For example, <b>/home/$USERNAME/komodo/src/komodod</b>
</Note>

The shell should return the following prompt.

```bash
gdb>
```

Execute `run` in the shell to start Komodo in debug mode.

```bash
gdb> run
```

## Retrieving Backtrace Data

Whenever komodod crashes, you will again see `gdb>` as a prompt.

To recall the last stages of komodod before the crash, execute the following command.

##### Command

```bash
gdb> backtrace
```

The returned data can be shared with any Komodo developer to assist in troubleshooting Komodo development.

Select and highlight all relevant data using the cursor, and then use `CTRL + SHIFT + C` to copy to the clipboard.
export const title = "Smart Chain API Basics";
export const description = "Master the Komodo Smart Chain API with a hands-on tutorial. Learn to create test blockchains, query data, and understand key API methods and concepts.";

# Smart Chain API Basics

## API Tutorials: Introduction

The following tutorial can assist in gaining hands-on experience with the essential Smart Chain API.

In this tutorial, we create two new blockchains, called RT1 & RT2.

The first blockchain, RT1, demonstrates the fundamental API concepts, such as how to create and utilize a simple test blockchain, how to query a blockchain for data, etc.

<DevComment>
  Sidd: Mylo, your original sentence cut off here!

  The RT2 blockchain demonstrates the creation of a custom application-specific blockchain that
</DevComment>

For simplicity's sake, we use the blockchain [<b>regtest</b>](/smart-chains/setup/common-runtime-parameters/#regtest) feature, which allows us to run a blockchain on a single node without having to connect to a network.

After the tutorial, the developer should be able to repeat the same concepts on live and fully functional Komodo Smart Chains, assuming the Smart Chain in question has the proper CC features enabled.

#### Tutorial Topics Outline

Topics covered in this tutorial include:

*   How to create a simple Smart Chain for testing purposes
*   How to execute a komodo-cli command to query the blockchain for existing data
*   How to execute a curl command for the same purpose
*   Understanding common API methods ("RPC's")
*   Understanding common technology concepts in the Komodo ecosystem

### Tutorial Prerequisites

#### komodod and komodo-cli

The following tutorials assume that you have already [compiled the Komodo daemon](/smart-chains/setup/installing-from-source/#linux), and that you have used the default `~/komodo/src` directory as the root Komodo software directory.

As with all software related to `komodod`, at the command line we use the terminal-based `komodo-cli` software, and the `curl` command, to access the daemon.

## Komodo API Fundamentals Tutorial

### Create a Regtest Blockchain

The quickest way to establish your own development environment is to use the [<b>regtest</b>](/smart-chains/setup/common-runtime-parameters/#regtest) feature.

In regtest mode, the daemon creates a blockchain that is almost fully functional, save for a few exceptions. Two of the exceptions are that the chain runs on a single host, and the user instructs the daemon on when and how to perform new blocks (as opposed to receiving new blocks from a decentralized network of miners).

The command to create our `RT1` regtest chain is as follows:

```bash
./komodod -regtest -ac_name=RT1 -ac_supply=1000 &
```

##### ac\_supply

Note the `-ac_supply=1000` argument. This is the total number of coins we desire when the blockchain spawns.

For more information, refer to the [<b>ac\_supply</b>](/antara/setup/antara-customizations/#ac-supply) launch parameter.

##### ac\_name

Also note the `-ac_name=RT1` argument. This is the blockchain ticker name we desire. For more information, refer to the [<b>ac\_name</b>](/antara/setup/antara-customizations/#ac-name) launch parameter.

There are many additional parameters that you can explore later in the [Antara Customizations](/antara/setup/antara-customizations/#antara-customizations) documentation.

##### Observe the Response

The daemon will return a response similar to the following:

```
[1] 22892
ASSETCHAINS_SUPPLY 1000
MAX_MONEY 106320417438 1063.20417438
Created (/home/mylo/.komodo/RT1/RT1.conf)
call komodo_args.(./komodod) NOTARY_PUBKEY.()
>>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins
initialized RT1 at 1555581638
finished loading blocks RT1
fAddressIndex.0/0 fSpentIndex.0/0
height.0 slowflag.1 possible.1 cmp.0
```

From the response, note the following information:

##### Smart Chain Supply

```
ASSETCHAINS_SUPPLY 1000
```

We see the 1000 coin initial supply.

##### Configuration File Location

```
Created (/home/mylo/.komodo/RT1/RT1.conf)
```

This is the location of the configuration file.

Placing the configuration data here follows the Komodo convention of placing all relevant data for a Smart Chain in a subdirectory contained in the `~/.komodo/` directory. The new subdirectory for our regtest chain is named after the `RT1` value we gave to the `ac_name` parameter.

##### Relevant RPC Data

```
>>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins
```

This information is the blockchain name, its network ports used for p2p (13100), and RPC control (13101). The magic number is a number the Komodo daemon uses for network purposes, and the number of coins is informational.

##### Explanation of All Initial Daemon Output

Here is an explanation of all of the output, as it appears in the above response. Many of the actual values will be different on your machine, although the underlying purpose of the value is the same.

| Value                                                                    | Description                                                                                                                                                                                     |
| ------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| \[1] 22892                                                               | the process number; the value is dependent on your machine and will be different                                                                                                                |
| ASSETCHAINS\_SUPPLY 1000                                                 | the number of coins when the blockchain initiates for its first time                                                                                                                            |
| MAX\_MONEY 106320417438 1063.20417438                                    | this value is not important at this time; it states that 100 billion coins is the maximum possible amount the blockchain can mathematically support                                             |
| Created (/home/mylo/.komodo/RT1/RT1.conf)                                | the location of the configuration file                                                                                                                                                          |
| call komodo\_args.(./komodod) NOTARY\_PUBKEY.()                          | this value specifies where the new coins from block rewards are sent; by default, the coins will be sent to your node's local wallet                                                            |
| >>>>>>>>>> RT1: p2p.13100 rpc.13101 magic.fd772ab9 4252445369 1000 coins | the blockchain name, its network ports and RPC controls; the magic number is used in Komodo networking and the number of coins derives from the <b>ac\_supply</b> parameter included at runtime |
| initialized RT1 at 1555581638                                            | the time in seconds, past epoch, when the blockchain was initialized                                                                                                                            |
| finished loading blocks RT1                                              | informational                                                                                                                                                                                   |
| fAddressIndex.0/0 fSpentIndex.0/0                                        | informational and can be ignored for now                                                                                                                                                        |
| height.0 slowflag.1 possible.1 cmp.0                                     | informational and can be ignored for now                                                                                                                                                        |

### Querying the Blockchain Using komodo-cli

With the regtest Smart Chain operational we are prepared to execute our first API call.

#### Access a Daemon via komodo-cli on a Smart Chain

When using `komodo-cli` to access the daemon of a Smart Chain, we must add an additional argument to each terminal input.

This required argument is the name of the Smart Chain for which the user desires `komodo-cli` to connect. The name is provided in the same format used to launch the chain.

In our tutorial, the argument is: `-ac_name=RT1`

Furthermore, as we are using the regtest feature, we must also include the `-regtest` argument with each terminal input.

Therefore, each `komodo-cli` terminal input will begin with the following:

```bash
./komodo-cli -regtest -ac_name=RT1 INSERT_API_CALL_HERE INSERT_ARGUMENTS_HERE
```

#### Using the getinfo API Method

The [<b>getinfo</b>](/smart-chains/api/control/#getinfo) API method does not require any additional parameters when called and provides useful information about our chain.

To execute the method in the terminal we can use the `komodo-cli` software.

#### Command

```bash
./komodo-cli -regtest -ac_name=RT1 getinfo
```

#### Response

```json
{
  "version": 2001526,
  "protocolversion": 170007,
  "KMDversion": "0.3.3b",
  "notarized": 0,
  "prevMoMheight": 0,
  "notarizedhash": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid": "0000000000000000000000000000000000000000000000000000000000000000",
  "notarizedtxid_height": "mempool",
  "KMDnotarized_height": 0,
  "notarized_confirms": 0,
  "walletversion": 60000,
  "balance": 0.0,
  "blocks": 0,
  "longestchain": 0,
  "timeoffset": 0,
  "tiptime": 1296688602,
  "connections": 0,
  "proxy": "",
  "difficulty": 1,
  "testnet": false,
  "keypoololdest": 1555581641,
  "keypoolsize": 101,
  "paytxfee": 0.0,
  "relayfee": 0.000001,
  "errors": "",
  "name": "RT1",
  "sapling": -1,
  "p2pport": 13100,
  "rpcport": 13101,
  "magic": -42521927,
  "premine": 1000
}
```

Note the `blocks` count of zero `0` and the `balance` sum of `0`. While our regtest chain's daemon is operational, we have yet to mine the genesis block and collect the initial coin value.

### Querying the Blockchain Using curl

Alternatively, we can execute the [<b>getinfo</b>](/smart-chains/api/control/#getinfo) method using the Unix `curl` command.

##### Sourcing the Configuration File

The `curl` command will also need information about which Smart Chain daemon the user desires to connect. However, the `curl` command will receive these instructions in a different manner.

The user must provide the `myrpcuser`, `myrpcpassword`, and `myrpcport` values from the Smart Chain's configuration file.

The configuration file is automatically generated on Smart Chain creation, and is formatted for use with the Unix `source` command.

To import all values into our terminal process environment, execute the following:

```bash
source ~/.komodo/RT1/RT1.conf
```

We can test that the variables were loaded correctly with the following commands:

```bash
echo $rpcuser $rpcpassword $rpcport
```

The terminal should return the values from the configuration file.

##### Executing the curl Command

With these variables set we can now easily use the `curl` command to execute the `getinfo` API method:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/
```

We execute the `curl` command with `-s` silent option; this mutes irrelevant response data.

The `$rpcuser:$rpcpassword` and the `...$rpcport` arguments utilize our sourced environment variables.

The HTTP header `-H`, `--data-binary`, and `content-type: text/plain;` arguments instruct `curl` to reply with a json object.

Without further intervention, the returned json response will be unformatted and difficult to read.

To improve readability, the developer may optionally install and utilize the `jq` terminal software.

[Link to download and install <b>jq</b>](https://stedolan.github.io/jq/download/)

Once installed, add a `|` pipe and a ` jq '.'` reference at the end of the curl command:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getinfo", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

This should return a well formatted json object.

## Preparing Your Local Wallet

The wallet is not part of the blockchain. Rather, it is a separate application that tracks your private keys and grants access to them upon user request. This separate application is built into the Komodo daemon and can be accessed using the API.

Common API commands include the following:

| Command                                                           | Description                                                                                                |
| ----------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |
| [<b>getnewaddress</b>](/smart-chains/api/wallet/#getnewaddress)   | get a new address                                                                                          |
| [<b>validateaddress</b>](/smart-chains/api/util/#validateaddress) | get the public key of the new address; used often when developing a custom application-specific blockchain |
| [<b>dumpprivkey</b>](/smart-chains/api/wallet/#dumpprivkey)       | get the private key of an address                                                                          |

We save details from each response, so that we may avoid continually obtaining new wallet keys.

The next two sections demonstrate how to obtain a new private key. The first section uses `komodo-cli` software, and the second section repeats the same API steps using the `curl` command.

### Preparing Your Wallet Using komodo-cli

#### getnewaddress

To obtain a new address, we use the `getnewaddress` API method:

```bash
./komodo-cli -regtest -ac_name=RT1 getnewaddress
```

Response:

```json
RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs
```

Your response will be a different address of the same format.

#### validateaddress

To obtain the public key, also called the "pubkey", we use the `validateaddress` API method.

```
./komodo-cli -regtest -ac_name=RT1 validateaddress RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs
```

Response:

```
{
  "isvalid": true,
  "address": "RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs",
  "scriptPubKey": "76a91457afccfe042ee068257f95873e1fd3cd4aa210ad88ac",
  "segid": 28,
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "0350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56",
  "iscompressed": true,
  "account": ""
}
```

Make a note of the `pubkey` value. We will use it towards the end of the tutorial.

#### dumpprivkey

Use the response from `getnewaddress` as an argument for the `dumpprivkey` API method.

```bash
./komodo-cli -regtest -ac_name=RT1 dumpprivkey RWbzxx8tKncvcVBzBCetMsPRrcB3YFsXhw
```

```json
REDACTED_FOR_TUTORIAL
```

The response is the private key for this address.

The private key should never be shared under any circumstances. We have redacted the response for this tutorial.

### Preparing Your Wallet Using curl

#### getnewaddress

A `curl` command to obtain a new address using the `getnewaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getnewaddress", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B",
  "error": null,
  "id": "curltest"
}
```

#### validateaddress

A `curl` command to obtain the `pubkey` using the `validateaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "validateaddress", "params": ["RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": {
    "isvalid": true,
    "address": "RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B",
    "scriptPubKey": "76a914fd3ca56e0dc10a080c1d351b42c75bd82fc76d2288ac",
    "segid": 56,
    "ismine": true,
    "iswatchonly": false,
    "isscript": false,
    "pubkey": "03cb108cdb893a4a6c72c2fe23768929ada335103c6fa2bea428f5204bd051dacc",
    "iscompressed": true,
    "account": ""
  },
  "error": null,
  "id": "curltest"
}
```

#### dumpprivkey

A `curl` command to obtain the `pubkey` using the `validateaddress` API method.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "dumpprivkey", "params": ["RYNBgpcanNdfy4oGLbnVYnPPtu5JWcZM8B"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "REDACTED_FOR_TUTORIAL",
  "error": null,
  "id": "curltest"
}
```

## Generating Blocks and Getting the New Coins

When connecting to an existing blockchain that already has a populated network of miners or stakers, the user does not need to be concerned about how blocks are generated.

However, in this tutorial we are running a regtest chain, and therefore we must instruct the daemon to generate new blocks.

This also provides us with a useful opportunity to discuss the nature of simple mining in the Komodo ecosystem. The methods we discuss here reflect mining on a proof-of-work based Smart Chain.

The reader should be aware that Komodo also offers proof-of-stake mining, and hybrid models that blend proof-of-work with proof-of-stake. For more information, the reader may turn to the [<b>ac\_staked</b>](/antara/setup/antara-customizations/#ac-staked) feature.

Here are several common API methods for mining:

| Command                                                    | Description                      |
| ---------------------------------------------------------- | -------------------------------- |
| [generate](/smart-chains/api/generate/#generate)           | the number of blocks to generate |
| [getblock](/smart-chains/api/blockchain/#getblock)         | query information about a block  |
| [gettransaction](/smart-chains/api/wallet/#gettransaction) | query a transaction              |

In a moment, we will use these commands to generate new blocks on our regtest chain, and in the process of generating, the blockchain will create new coins.

#### Understanding the Coinbase Transaction

The reader should be aware of the manner in which a blockchain creates new coins.

When a blockchain initiates for the first time, and before it has mined the first block, the total sum of coins on the blockchain is always `0`.

To add coins into the total coin supply, the blockchain must mint new coins. This minting process occurs in a special transaction that is included as the first transaction in each block of the blockchain.

This transaction is called the `coinbase` transaction.

While every other transaction on the blockchain can only take coins from the existing supply, the `coinbase` transaction may create new coins from nothing.

These new coins can be sent to any number of locations. The rules of the blockchain, as set by the blockchain's developer, determine how many coins are minted, and who receives the coins.

For more information about how to customize your `coinbase` transactions on a Komodo Smart Chain, observe the many different customization parameters in the [Antara Customizations](/antara/setup/antara-customizations/#ac-algo) documentation.

For example, read about [<b>ac\_reward</b>](/antara/setup/antara-customizations/#ac-reward), [<b>ac\_eras</b>](/antara/setup/antara-customizations/#ac-eras), [<b>ac\_founders</b>](/antara/setup/antara-customizations/#ac-founders), and many others.

In our tutorial, when we mine our first block, all of the `1000` new coins we indicated will be mined in the first block's `coinbase` transaction. By default, these coins are distributed immediately into our own local wallet.

### Generating Blocks Using komodo-cli

#### generate

We now generate a few blocks using the `generate` API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 generate 2
```

##### Response

```json
[
  "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
]
```

The response contains an array of blockhashes. These are the hashes of the blocks generated.

#### getblock

To inspect the particular information about any given block, we use the `getblock` API method and include our desired blockhash as an argument.

```bash
./komodo-cli -regtest -ac_name=RT1 getblock 0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab
```

Alternatively, with `getblock` we can instead include the desired block `height` of the block we wish to inspect.

In our case, we desire to inspect the genesis block, which is the first block ever mined on our Smart Chain. Therefore, the block `height` will be `1`.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 getblock 1
```

##### Response

```json
{
  "hash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "confirmations": 2,
  "rawconfirmations": 2,
  "size": 276,
  "height": 1,
  "version": 4,
  "merkleroot": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
  "segid": -1,
  "finalsaplingroot": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
  "tx": ["4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"],
  "time": 1555589136,
  "nonce": "0000d66a538f8cc7de721633f23e5d52649e5031a3f0a90e9821189e5b530056",
  "solution": "01de6014269f75bae931362838b75c5fc3e318c620d2a203d65b9d52691b3d056ae753fc",
  "bits": "200f0f0f",
  "difficulty": 1,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000000022",
  "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
  "blocktype": "mined",
  "valuePools": [
    {
      "id": "sprout",
      "monitored": true,
      "chainValue": 0.0,
      "chainValueZat": 0,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    },
    {
      "id": "sapling",
      "monitored": true,
      "chainValue": 0.0,
      "chainValueZat": 0,
      "valueDelta": 0.0,
      "valueDeltaZat": 0
    }
  ],
  "previousblockhash": "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327",
  "nextblockhash": "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
}
```

Note in the response the `tx` value.

```json

    ...

  "tx": [
    "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"
  ],

    ...

```

This value is an array containing all transactions performed within this block. Because it is the genesis block, and because we did not send any transactions on our blockchain, the only transaction is our `coinbase` transaction, wherein the `1000` coins were minted and sent to our local wallet.

#### gettransaction

To observe this transaction, we use the [<b>gettransaction</b>](/smart-chains/api/wallet/#addmultisigaddress) API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 gettransaction 4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006
```

##### Response

```json
{
  "amount": 1000.07809721,
  "rawconfirmations": 2,
  "generated": true,
  "confirmations": 2,
  "blockhash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
  "blockindex": 0,
  "blocktime": 1555589136,
  "expiryheight": 0,
  "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
  "walletconflicts": [],
  "time": 1555589136,
  "timereceived": 1555589136,
  "vjoinsplit": [],
  "details": [
    {
      "account": "",
      "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
      "category": "generate",
      "amount": 1000.07809721,
      "vout": 0,
      "size": 98
    }
  ],
  "hex": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff01b912ee4817000000232103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac1068b85c"
}
```

Note that the `amount` value is slightly higher than `1000`. This is normal. It is due to the internal mathematical complexities of a blockchain.

### Generating Blocks Using curl

#### generate

We have already generated the genesis block. The following is a sample of using `curl` with the `generate` API method to generate 5 blocks.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "generate", "params": [5]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      "0561e5c9e81ff8823be080af1232a99c87c41cb208595da20cf461b4ed34f0a9",
      "0792db3d6976c16ead4c42d4a3fc949931979a0120aefb822b632758fb1968d4",
      "0975e3320f31cc4e06bb6cfba74ae6762517421535f3c1440c6e4c41cb2428df",
      "01102d09117d797253899b5b1a68a66d552e30fcc0fa964b4ab64005acfecf0b",
      "02f1df412f56aee2ea94380e7c59c10ed089481b3a37dc73b9c78577b73ce9f1"
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

#### getblock

Here is a sample of using `curl` with the `getblock` API method on the blockhash of the genesis block.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getblock", "params": ["0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

To use the block `height` instead, the `curl` command is formatted as follows.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "getblock", "params": ["1"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "hash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
      "confirmations": 2,
      "rawconfirmations": 2,
      "size": 276,
      "height": 1,
      "version": 4,
      "merkleroot": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
      "segid": -1,
      "finalsaplingroot": "3e49b5f954aa9d3545bc6c37744661eea48d7c34e3000d82b7f0010c30f4c2fb",
      "tx": ["4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"],
      "time": 1555589136,
      "nonce": "0000d66a538f8cc7de721633f23e5d52649e5031a3f0a90e9821189e5b530056",
      "solution": "01de6014269f75bae931362838b75c5fc3e318c620d2a203d65b9d52691b3d056ae753fc",
      "bits": "200f0f0f",
      "difficulty": 1,
      "chainwork": "0000000000000000000000000000000000000000000000000000000000000022",
      "anchor": "59d2cde5e65c1414c32ba54f0fe4bdb3d67618125286e6a191317917c812c6d7",
      "blocktype": "mined",
      "valuePools": [
        {
          "id": "sprout",
          "monitored": true,
          "chainValue": 0,
          "chainValueZat": 0,
          "valueDelta": 0,
          "valueDeltaZat": 0
        },
        {
          "id": "sapling",
          "monitored": true,
          "chainValue": 0,
          "chainValueZat": 0,
          "valueDelta": 0,
          "valueDeltaZat": 0
        }
      ],
      "previousblockhash": "029f11d80ef9765602235e1bc9727e3eb6ba20839319f761fee920d63401e327",
      "nextblockhash": "0de2bb48b3a3ef47d5ece90b1ffeccc81b9609879ab86cc03a77cf248adea25d"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

#### gettransaction

Here is the `curl` command to retrieve the first block's `coinbase` transaction.

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "gettransaction", "params": ["4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006"]}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": {
      "amount": 1000.07809721,
      "rawconfirmations": 2,
      "generated": true,
      "confirmations": 2,
      "blockhash": "0d2701895c90f48d80156fbe349bda661c80f38ad6b75acc2294763e348b4eab",
      "blockindex": 0,
      "blocktime": 1555589136,
      "expiryheight": 0,
      "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
      "walletconflicts": [],
      "time": 1555589136,
      "timereceived": 1555589136,
      "vjoinsplit": [],
      "details": [
        {
          "account": "",
          "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
          "category": "generate",
          "amount": 1000.07809721,
          "vout": 0,
          "size": 98
        }
      ],
      "hex": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff01b912ee4817000000232103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac1068b85c"
    },
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## Inspecting the wallet

We have generated blocks and received the value from the `coinbase` transactions. Now, we would like to inspect the contents of our wallet. We will execute the [<b>listunspent</b>](/smart-chains/api/wallet/#listunspent) method for this purpose.

However, before we execute this command, the reader should familiarize themselves with the way a blockchain stores value in a wallet. The title of the technical concept to understand is, <b>"utxo."</b> This stands for "unspent transaction."

The way a utxo works is often difficult to understand for newcomers to blockchain technology. We have provided an article that explains this concept in more detail here, and we recommend the reader study it before proceeding.

The reader may turn to [the Core Technology Discussion regarding utxos for more information.](/start-here/core-technology-discussions/miscellaneous/#the-utxo-an-elusive-yet-fundamental-concept)

In blockchain technology, all value is contained within utxos. Every transaction consumes a utxo and creates new utxos.

Once you are comfortably familiar with the concept, you are prepared to continue with the tutorial.

### Listing Unspent Transactions Using komodo-cli

A developer should be able to easily validate ownership of a utxo, as only the owner of a utxo is able to spend it.

#### listunspent

For this purpose, we turn to the [<b>listunspent</b>](/smart-chains/api/wallet/#listunspent) API method:

```bash
./komodo-cli -regtest -ac_name=RT1 listunspent
```

The response is an array of transactions ids, called `txid` for brevity's sake.

```json
[
  {
    "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 1000.07809721,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 7,
    "confirmations": 7,
    "spendable": true
  },
  {
    "txid": "148d8970e3c7e113bd3b4038c1efdd273a6d975f45b194b4257fda6acec4b14a",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 5,
    "confirmations": 5,
    "spendable": true
  },
  {
    "txid": "a0e13cad677b4fede6211c78069aed9345880147ea79edb647383787eb15fe51",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 6,
    "confirmations": 6,
    "spendable": true
  },
  {
    "txid": "01be6fa42a897009477f7a7248c538896ad39a24e132e9bcba00138c781fd57b",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 1,
    "confirmations": 1,
    "spendable": true
  },
  {
    "txid": "73ba44853735808e0b07c45bb1e1acd7c0323bc72e872d4bae92428ad03899be",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 3,
    "confirmations": 3,
    "spendable": true
  },
  {
    "txid": "78a401c6bb7765d73fedf1e2c033935db281a94a58d35f33e6986bda36e57bd5",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 2,
    "confirmations": 2,
    "spendable": true
  },
  {
    "txid": "d81523ef05f9d19abca61982f8c0d5374eb61ecb88c923226277bc0d3e7120e6",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 0.0001,
    "interest": 0.0,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 4,
    "confirmations": 4,
    "spendable": true
  }
]
```

### Listing Unspent Transactions Using curl

With `curl`, the terminal command for `listunspent` is as follows:

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "listunspent", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

<CollapsibleSection expandedText="Hide Response" collapsedText="Show Response">
  ```json
  {
    "result": [
      {
        "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 1000.07809721,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 7,
        "confirmations": 7,
        "spendable": true
      },
      {
        "txid": "148d8970e3c7e113bd3b4038c1efdd273a6d975f45b194b4257fda6acec4b14a",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 5,
        "confirmations": 5,
        "spendable": true
      },
      {
        "txid": "a0e13cad677b4fede6211c78069aed9345880147ea79edb647383787eb15fe51",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 6,
        "confirmations": 6,
        "spendable": true
      },
      {
        "txid": "01be6fa42a897009477f7a7248c538896ad39a24e132e9bcba00138c781fd57b",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 1,
        "confirmations": 1,
        "spendable": true
      },
      {
        "txid": "73ba44853735808e0b07c45bb1e1acd7c0323bc72e872d4bae92428ad03899be",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 3,
        "confirmations": 3,
        "spendable": true
      },
      {
        "txid": "78a401c6bb7765d73fedf1e2c033935db281a94a58d35f33e6986bda36e57bd5",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 2,
        "confirmations": 2,
        "spendable": true
      },
      {
        "txid": "d81523ef05f9d19abca61982f8c0d5374eb61ecb88c923226277bc0d3e7120e6",
        "vout": 0,
        "generated": true,
        "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
        "segid": 47,
        "amount": 0.0001,
        "interest": 0,
        "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
        "rawconfirmations": 4,
        "confirmations": 4,
        "spendable": true
      }
    ],
    "error": null,
    "id": "curltest"
  }
  ```
</CollapsibleSection>

## Setting the pubkey Parameter

Observe this first `txid` returned from the `listunspent` transaction:

```json
  ...

  {
    "txid": "4ceb1e5818ab6be66035d330217be1722212a1255bfda3c8a7eef832df20c006",
    "vout": 0,
    "generated": true,
    "address": "RDyVsyEJGvSm8HaUHfihsJoXvCzekruzrn",
    "segid": 47,
    "amount": 1000.07809721,
    "interest": 0.00000000,
    "scriptPubKey": "2103f5eccb583425e781216f27b1f6e244f15b1989eecbb8695f6948a26f5a3bfe3cac",
    "rawconfirmations": 7,
    "confirmations": 7,
    "spendable": true
  },

  ...
```

Notice that the address to which these `1000` coins were sent is not the address we generated earlier. Rather, it is an entirely new address. At the moment we may not mind, because the coins were sent to an address that the wallet automatically generated and which we own.

However, what if we want to control the address to which coins are sent when mining? When this is the case, we turn to the [<b>pubkey</b>](/smart-chains/setup/common-runtime-parameters/#pubkey) launch parameter.

The `pubkey` we input into this parameter can be the same `pubkey` we generated earlier in the tutorial.

#### Stopping the Daemon Using komodo-cli

To place this pubkey at startup, we must first stop the Smart Chain.

For this we use the [<b>stop</b>](/smart-chains/api/control/#stop) API method.

##### Command

```bash
./komodo-cli -regtest -ac_name=RT1 stop
```

##### Response

```
RT1 server stopping
```

#### Stopping the Daemon Using curl

Using `curl` to stop the daemon.

##### Command

```bash
curl -s --user $rpcuser:$rpcpassword --data-binary '{"jsonrpc": "1.0", "id": "curltest", "method": "stop", "params": []}' -H 'content-type: text/plain;' http://127.0.0.1:$rpcport/ | jq '.'
```

##### Response

```json
{
  "result": "RT1 server stopping",
  "error": null,
  "id": "curltest"
}
```

#### Restarting the Smart Chain With the pubkey Parameter

Execute the following to relaunch `komodod` with the `pubkey` we saved at the beginning of the tutorial.

##### Command

```bash
./komodod -regtest -ac_name=RT1 -ac_supply=1000 -pubkey=0350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56 &
```

Now, when we generate new blocks, the `coinbase` transaction sends new coins to the new address associated with our `pubkey`.

First, we generate a new block using komodo-cli.

```bash
./komodo-cli -regtest -ac_name=RT1 generate 1
```

Response:

```json
["06a639d7821f6ee803c6c53fe53a6b1dfe65063240ebc3a2907f7658cad8301e"]
```

We can repeat the `getblock` method on the blockhash returned above to see the `coinbase` transaction.

With that `coinbase` transaction, we can the execute `gettransaction` to see the address to which the new coins were sent.

After executing these previously explained methods, here is a snippet of the final result:

```json
...
  {
    "txid": "2411800f0e9c15f5233453ffc17ff301f43043c70887c256a041945d341796f0",
    "vout": 0,
    "generated": true,
    "address": "RHGqU4BPHsTve4jUJtJobAaf8SieYUzeFs",
    "segid": 28,
    "account": "",
    "amount": 0.00010000,
    "interest": 0.00000000,
    "scriptPubKey": "210350dd9b828e92600166dd74e521ac8510eb39064dfb30111c990396864542ce56ac",
    "rawconfirmations": 1,
    "confirmations": 1,
    "spendable": true
  }
...snipped
```

Note that the `address` in this output is the one associated with our desired `pubkey`.

## Closing

Some of the fundamental blockchain and API skills we have learned include the following:

*   How to create a new Komodo Smart Chain
*   How to make a single-node regtest chain, for development purposes
*   How to launch with the pubkey set
*   How to generate new blocks
*   How to obtain information about blocks and transactions
*   The nature of a utxo
*   The nature of a coinbase transaction

Having completed this tutorial, the developer should be able to explore the many API methods in the Komodo documentation.
