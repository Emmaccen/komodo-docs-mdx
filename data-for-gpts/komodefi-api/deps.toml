./Cargo.toml
[workspace]
members = [
    "mm2src/coins_activation",
    "mm2src/coins",
    "mm2src/coins/utxo_signer",
    "mm2src/common/shared_ref_counter",
    "mm2src/crypto",
    "mm2src/db_common",
    "mm2src/derives/enum_from",
    "mm2src/derives/ser_error_derive",
    "mm2src/derives/ser_error",
    "mm2src/hw_common",
    "mm2src/mm2_bin_lib",
    "mm2src/mm2_bitcoin/chain",
    "mm2src/mm2_bitcoin/crypto",
    "mm2src/mm2_bitcoin/keys",
    "mm2src/mm2_bitcoin/primitives",
    "mm2src/mm2_bitcoin/rpc",
    "mm2src/mm2_bitcoin/script",
    "mm2src/mm2_bitcoin/serialization_derive",
    "mm2src/mm2_bitcoin/serialization",
    "mm2src/mm2_bitcoin/test_helpers",
    "mm2src/mm2_core",
    "mm2src/mm2_db",
    "mm2src/mm2_err_handle",
    "mm2src/mm2_eth",
    "mm2src/mm2_event_stream",
    "mm2src/mm2_git",
    "mm2src/mm2_gui_storage",
    "mm2src/mm2_io",
    "mm2src/mm2_main",
    "mm2src/mm2_metamask",
    "mm2src/mm2_metrics",
    "mm2src/mm2_net",
    "mm2src/mm2_number",
    "mm2src/mm2_p2p",
    "mm2src/mm2_rpc",
    "mm2src/mm2_state_machine",
    "mm2src/mm2_test_helpers",
    "mm2src/rpc_task",
    "mm2src/trezor",
]

exclude = [
    "mm2src/adex_cli",
    "mm2src/floodsub",
    "mm2src/gossipsub",
    "mm2src/mm2_libp2p",
]

# https://doc.rust-lang.org/beta/cargo/reference/features.html#feature-resolver-version-2
resolver = "2"

[profile.release]
debug = 0
debug-assertions = false
opt-level = 3
strip = true
codegen-units = 1
# lto = true
panic = "abort"

[profile.test]
# required to avoid a long running process of librustcash additional chain validation that is enabled with debug assertions
debug-assertions = false

[profile.dev]
opt-level = 0
debug = 1
debug-assertions = false
panic = 'unwind'
incremental = true
codegen-units = 256./rustfmt.toml
# Enable unstable features on stable and beta channels (unstable features are available by default on nightly).
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#unstable_features
unstable_features = true

# Put single-expression functions on a single line
# Note: Unstable
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#fn_single_line
fn_single_line = true

# Force multiline closure and match arm bodies to be wrapped in a block
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#force_multiline_blocks
force_multiline_blocks = false

# Indent style of imports
# Note: Unstable
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#imports_indent
imports_indent = "Visual"

# Write an item and its attribute on the same line if their combined width is below a threshold
# Note: Unstable
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#inline_attribute_width
inline_attribute_width = 65

# Put a trailing comma after a block based match arm (non-block arms are not affected)
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#match_block_trailing_comma
match_block_trailing_comma = true

# Maximum width of each line.
# Default: 100
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#max_width
max_width = 120

# Unix or Windows line endings
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#newline_style
newline_style = "Auto"

# When structs, slices, arrays, and block/array-like macros are used as the last argument in an expression list,
# allow them to overflow (like blocks/closures) instead of being indented on a new line.
# Note: Unstable
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#overflow_delimited_expr
overflow_delimited_expr = true

# Number of spaces per tab
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#tab_spaces
tab_spaces = 4

# Use field initialize shorthand if possible.
# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#use_field_init_shorthand
use_field_init_shorthand = true
./Cross.toml
[build.env]
passthrough = [
  "NDK_HOME",
  "RUST_BACKTRACE"
]

[target.armv7-linux-androideabi]
image = "armv7-linux-androideabi-aga"

[target.aarch64-linux-android]
image = "aarch64-linux-android-aga"

[target.i686-linux-android]
image = "i686-linux-android-aga"

[target.x86_64-linux-android]
image = "x86_64-linux-android-aga"

[target.armv7-unknown-linux-gnueabihf]
image = "mm2-armv7-unknown-linux-gnueabihf"

rustflags = [
    "-C", "link-arg=--dynamic-linker=/lib/ld-linux-armhf.so.3",
]

./mm2src/mm2_metrics/Cargo.toml
[package]
name = "mm2_metrics"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
base64 = "0.10.0"
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
itertools = "0.10"
metrics = { version = "0.21" }
metrics-util = { version = "0.15" }
mm2_err_handle = { path = "../mm2_err_handle" }
serde = "1"
serde_derive = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
hyper = { version = "0.14.26", features = ["client", "http2", "server", "tcp"] }
# using webpki-tokio to avoid rejecting valid certificates
# got "invalid certificate: UnknownIssuer" for https://ropsten.infura.io on iOS using default-features
hyper-rustls = { version = "0.23", default-features = false, features = ["http1", "http2", "webpki-tokio"] }
metrics-exporter-prometheus = "0.12.1"
./mm2src/mm2_eth/Cargo.toml
[package]
name = "mm2_eth"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
ethabi = { version = "17.0.0" }
ethkey = { git = "https://github.com/KomodoPlatform/mm2-parity-ethereum.git" }
hex = "0.4.2"
indexmap = "1.7.0"
itertools = "0.10"
mm2_err_handle = { path = "../mm2_err_handle" }
secp256k1 = { version = "0.20", features = ["recovery"] }
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
web3 = { git = "https://github.com/KomodoPlatform/rust-web3", tag = "v0.19.0", default-features = false }
./mm2src/mm2_rpc/Cargo.toml
[package]
name = "mm2_rpc"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"], optional = true }
gstuff = { version = "0.7", features = ["nightly"], optional = true}
http = {version = "0.2", optional = true}
mm2_err_handle = { path = "../mm2_err_handle", optional = true }
mm2_number = { path = "../mm2_number" }
rpc = { path = "../mm2_bitcoin/rpc" }
serde = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
ser_error = { path = "../derives/ser_error", optional = true}
ser_error_derive = { path = "../derives/ser_error_derive", optional=true }
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }

[features]
default = []
rpc_facilities = ["futures", "gstuff", "http", "mm2_err_handle", "ser_error", "ser_error_derive"]
./mm2src/crypto/Cargo.toml
[package]
name = "crypto"
version = "1.0.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
arrayref = "0.3"
async-trait = "0.1"
bip32 = { version = "0.2.2", default-features = false, features = ["alloc", "secp256k1-ffi"] }
bitcrypto = { path = "../mm2_bitcoin/crypto" }
bs58 = "0.4.0"
common = { path = "../common" }
derive_more = "0.99"
enum_from = { path = "../derives/enum_from" }
enum-primitive-derive = "0.2"
futures = "0.3"
hex = "0.4.2"
http = "0.2"
hw_common = { path = "../hw_common" }
keys = { path = "../mm2_bitcoin/keys" }
lazy_static = "1.4"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
num-traits = "0.2"
parking_lot = { version = "0.12.0", features = ["nightly"] }
primitives = { path = "../mm2_bitcoin/primitives" }
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
rustc-hex = "2"
secp256k1 = "0.20"
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serde = "1.0"
serde_derive = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
tiny-bip39 = "0.8.0"
trezor = { path = "../trezor" }

[target.'cfg(target_arch = "wasm32")'.dependencies]
mm2_eth = { path = "../mm2_eth" }
mm2_metamask = { path = "../mm2_metamask" }
wasm-bindgen-test = { version = "0.3.2" }
web3 = { git = "https://github.com/KomodoPlatform/rust-web3", tag = "v0.19.0", default-features = false }
./mm2src/ledger/Cargo.toml
[package]
name = "ledger"
version = "0.1.0"
edition = "2018"

[dependencies]
async-trait = "0.1"
byteorder = "1.3.2"
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await"] }
hw_common = { path = "../hw_common" }
serde = "1.0"
serde_derive = "1.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.27" }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.1" }
web-sys = { version = "0.3.55" }
./mm2src/mm2_io/Cargo.toml
[package]
name = "mm2_io"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
common = { path = "../common" }
mm2_err_handle = { path = "../mm2_err_handle" }
serde = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
rand = { version = "0.7", features = ["std", "small_rng", "wasm-bindgen"] }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
derive_more = "0.99"
async-std = { version = "1.5", features = ["unstable"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
gstuff = { version = "0.7", features = ["nightly"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
gstuff = { version = "0.7", features = ["nightly"] }
./mm2src/mm2_main/Cargo.toml
# Support for split-debuginfo [should eventually](https://github.com/rust-lang/rust/issues/34651) land,
# hopefully giving us an out-of-the-box way to separate the code from the debugging information.
# We should use the "objcopy --only-keep-debug" and "add-symbol-file" meanwhile
# and separating stack tracing into raw trace and symbolication parts.

[package]
name = "mm2_main"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[features]
custom-swap-locktime = [] # only for testing purposes, should never be activated on release builds.
native = [] # Deprecated
track-ctx-pointer = ["common/track-ctx-pointer"]
zhtlc-native-tests = ["coins/zhtlc-native-tests"]
run-docker-tests = []
# TODO
enable-solana = []
default = []

[dependencies]
async-std = { version = "1.5", features = ["unstable"] }
async-trait = "0.1"
bitcrypto = { path = "../mm2_bitcoin/crypto" }
blake2 = "0.10.6"
bytes = "0.4"
chain = { path = "../mm2_bitcoin/chain" }
cfg-if = "1.0"
coins = { path = "../coins" }
coins_activation = { path = "../coins_activation" }
common = { path = "../common" }
crc32fast = { version = "1.3.2", features = ["std", "nightly"] }
crossbeam = "0.8"
crypto = { path = "../crypto" }
db_common = { path = "../db_common" }
derive_more = "0.99"
either = "1.6"
ethereum-types = { version = "0.13", default-features = false, features = ["std", "serialize"] }
enum_from = { path = "../derives/enum_from" }
enum-primitive-derive = "0.2"
futures01 = { version = "0.1", package = "futures" }
futures = { version = "0.3.1", package = "futures", features = ["compat", "async-await"] }
gstuff = { version = "0.7", features = ["nightly"] }
hash256-std-hasher = "0.15.2"
hash-db = "0.15.2"
hex = "0.4.2"
http = "0.2"
hw_common = { path = "../hw_common" }
instant = { version = "0.1.12" }
itertools = "0.10"
keys = { path = "../mm2_bitcoin/keys" }
lazy_static = "1.4"
# ledger = { path = "../ledger" }
libc = "0.2"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_gui_storage = { path = "../mm2_gui_storage" }
mm2_io = { path = "../mm2_io" }
mm2-libp2p = { path = "../mm2_p2p", package = "mm2_p2p" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_net = { path = "../mm2_net", features = ["event-stream", "p2p"] }
mm2_number = { path = "../mm2_number" }
mm2_rpc = { path = "../mm2_rpc", features = ["rpc_facilities"]}
mm2_state_machine = { path = "../mm2_state_machine" }
num-traits = "0.2"
parity-util-mem = "0.11"
parking_lot = { version = "0.12.0", features = ["nightly"] }
primitives = { path = "../mm2_bitcoin/primitives" }
prost = "0.10"
rand = { version = "0.7", features = ["std", "small_rng"] }
rand6 = { version = "0.6", package = "rand" }
# TODO: Reduce the size of regex by disabling the features we don't use.
# cf. https://github.com/rust-lang/regex/issues/583
regex = "1"
rmp-serde = "0.14.3"
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
script = { path = "../mm2_bitcoin/script" }
secp256k1 = { version = "0.20", features = ["rand"] }
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
serde_derive = "1.0"
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serialization = { path = "../mm2_bitcoin/serialization" }
serialization_derive = { path = "../mm2_bitcoin/serialization_derive" }
spv_validation = { path = "../mm2_bitcoin/spv_validation" }
sp-runtime-interface = { version = "6.0.0", default-features = false, features = ["disable_target_static_assertions"] }
sp-trie = { version = "6.0", default-features = false }
trie-db = { version = "0.23.1", default-features = false }
trie-root = "0.16.0"
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
instant = { version = "0.1.12", features = ["wasm-bindgen"] }
js-sys = { version = "0.3.27" }
mm2_db = { path = "../mm2_db" }
mm2_test_helpers = { path = "../mm2_test_helpers" }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.1" }
web-sys = { version = "0.3.55", features = ["console"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dirs = { version = "1" }
futures-rustls = { version = "0.21.1" }
hyper = { version = "0.14.26", features = ["client", "http2", "server", "tcp"] }
rcgen = "0.10"
rustls = { version = "0.20", default-features = false }
rustls-pemfile = "1.0.2"
tokio = { version = "1.20", features = ["io-util", "rt-multi-thread", "net"] }

[target.'cfg(windows)'.dependencies]
winapi = "0.3"

[dev-dependencies]
mm2_test_helpers = { path = "../mm2_test_helpers" }
mocktopus = "0.8.0"
testcontainers = { git = "https://github.com/KomodoPlatform/mm2-testcontainers-rs.git" }

[build-dependencies]
chrono = "0.4"
gstuff = { version = "0.7", features = ["nightly"] }
prost-build = { version = "0.10.4", default-features = false }
regex = "1"
./mm2src/mm2_git/Cargo.toml
[package]
name = "mm2_git"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
common = { path = "../common" }
http = "0.2"
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_net = { path = "../mm2_net" }
serde = "1"
serde_json = { version = "1.0", features = ["preserve_order", "raw_value"] }
./mm2src/mm2_test_helpers/Cargo.toml
[package]
name = "mm2_test_helpers"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
bytes = "1.1"
cfg-if = "1.0"
common = { path = "../common" }
crypto = { path = "../crypto" }
db_common = { path = "../db_common" }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
http = "0.2"
lazy_static = "1.4"
mm2_core = { path = "../mm2_core" }
mm2_io = { path = "../mm2_io" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_net = { path = "../mm2_net" }
mm2_number = { path = "../mm2_number" }
mm2_rpc = { path = "../mm2_rpc" }
rand = { version = "0.7", features = ["std", "small_rng", "wasm-bindgen"] }
regex = "1"
rpc = { path = "../mm2_bitcoin/rpc" }
serde = "1"
serde_derive = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
chrono = { version = "0.4", features = ["wasmbind"] }
gstuff = { version = "0.7", features = ["nightly"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
chrono = "0.4"
gstuff = { version = "0.7", features = ["nightly"] }
./mm2src/db_common/Cargo.toml
[package]
name = "db_common"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
common = { path = "../common" }
hex = "0.4.2"
log = "0.4.17"
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
rusqlite = { version = "0.28", features = ["bundled"] }
sql-builder = "3.1.1"
./mm2src/mm2_err_handle/Cargo.toml
[package]
name = "mm2_err_handle"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
futures01 = { version = "0.1", package = "futures" }
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
derive_more = "0.99"
itertools = "0.10"
serde = { version = "1.0", features = ["derive"] }
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
common = { path = "../common" }
http = "0.2"
./mm2src/hw_common/Cargo.toml
[package]
name = "hw_common"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
bip32 = { version = "0.2.2", default-features = false, features = ["alloc", "secp256k1-ffi"] }
common = { path = "../common" }
mm2_err_handle = { path = "../mm2_err_handle" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await"] }
secp256k1 = { version = "0.20", features = ["rand"] }
serde = "1.0"
serde_derive = "1.0"

[target.'cfg(all(not(target_arch = "wasm32"), not(target_os = "ios")))'.dependencies]
rusb = { version = "0.7.0", features = ["vendored"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.27" }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.1" }
web-sys = { version = "0.3.55", features = ["console", "Navigator", "Usb", "UsbDevice", "UsbDeviceRequestOptions", "UsbInTransferResult"] }
./mm2src/hw_common/.cargo/config.toml
[target.wasm32-unknown-unknown]
rustflags = ["--cfg=web_sys_unstable_apis"]./mm2src/gossipsub/Cargo.toml
[package]
name = "atomicdex-gossipsub"
edition = "2018"
description = "Gossipsub protocol for AtomicDEX, based on libp2p gossipsub"
version = "0.20.0"
authors = ["Age Manning <Age@AgeManning.com>"]
license = "MIT"
repository = "https://github.com/libp2p/rust-libp2p"
keywords = ["peer-to-peer", "libp2p", "networking"]
categories = ["network-programming", "asynchronous"]

[lib]
doctest = false

[dependencies]
base64 = "0.11.0"
bytes = "0.5.4"
byteorder = "1.3.2"
common = { path = "../common" }
fnv = "1.0.6"
futures = "0.3.1"
futures_codec = "0.4.0"
libp2p-swarm = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
libp2p-core = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
log = "0.4.17"
prost = "0.10"
rand = "0.7"
sha2 = "0.9"
smallvec = "1.1.0"
unsigned-varint = { version = "0.4.0", features = ["futures-codec"] }
wasm-timer = "0.2.4"

[dev-dependencies]
async-std = "1.6.2"
env_logger = "0.9.3"
libp2p-plaintext = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
libp2p-yamux = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
quickcheck= { version = "0.9.2", default-features = false }

[build-dependencies]
prost-build = { version = "0.10.4", default-features = false }
./mm2src/mm2_state_machine/Cargo.toml
[package]
name = "mm2_state_machine"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
async-trait = "0.1"

[dev-dependencies]
common = { path = "../common" }
futures = { version = "0.3" }./mm2src/mm2_metamask/Cargo.toml
[package]
name = "mm2_metamask"
version = "0.1.0"
edition = "2021"

[target.'cfg(target_arch = "wasm32")'.dependencies]
async-trait = "0.1"
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures" }
itertools = "0.10"
js-sys = { version = "0.3.27" }
jsonrpc-core = "18.0.0" # Same version as `web3` depends on.
lazy_static = "1.4"
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_eth = { path = "../mm2_eth" }
parking_lot = { version = "0.12.0", features = ["nightly"] }
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
serde_derive = "1.0"
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
web3 = { git = "https://github.com/KomodoPlatform/rust-web3", tag = "v0.19.0", default-features = false, features = ["eip-1193"] }
./mm2src/mm2_p2p/Cargo.toml
[package]
name = "mm2_p2p"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3.1", default-features = false }
futures-rustls = "0.21.1"
futures-ticker = "0.0.3"
hex = "0.4.2"
lazy_static = "1.4"
log = "0.4"
rand = { version = "0.7", default-features = false, features = ["wasm-bindgen"] }
regex = "1"
rmp-serde = "0.14.3"
secp256k1 = { version = "0.20", features = ["rand"] }
serde = { version = "1.0", default-features = false }
serde_bytes = "0.11.5"
sha2 = "0.9"
smallvec = "1.6.1"
syn = "2.0.18"
void = "1.0"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
instant = "0.1.12"
libp2p = { git = "https://github.com/KomodoPlatform/rust-libp2p.git", tag = "k-0.52.1", default-features = false, features = ["dns", "identify", "floodsub", "gossipsub", "noise", "ping", "request-response", "secp256k1", "tcp", "tokio", "websocket", "macros", "yamux"] }
tokio = { version = "1.20",  default-features = false }

[target.'cfg(target_arch = "wasm32")'.dependencies]
instant = { version = "0.1.12", features = ["wasm-bindgen"] }
libp2p = { git = "https://github.com/KomodoPlatform/rust-libp2p.git", tag = "k-0.52.1", default-features = false, features = ["identify", "floodsub", "noise", "gossipsub", "ping", "request-response", "secp256k1", "wasm-ext", "wasm-ext-websocket", "macros", "yamux"] }

[dev-dependencies]
async-std = "1.6.2"
env_logger = "0.9.3"
./mm2src/coins/Cargo.toml
[package]
name = "coins"
version = "0.1.0"
edition = "2018"

[features]
zhtlc-native-tests = []
# TODO
enable-solana = [
	"dep:bincode",
	"dep:ed25519-dalek-bip32",
	"dep:solana-client",
	"dep:solana-sdk",
	"dep:solana-transaction-status",
	"dep:spl-token",
	"dep:spl-associated-token-account"
]
default = []
run-docker-tests = []

[lib]
name = "coins"
path = "lp_coins.rs"
doctest = false

[dependencies]
async-std = { version = "1.5", features = ["unstable"] }
async-trait = "0.1.52"
base64 = "0.10.0"
base58 = "0.2.0"
bip32 = { version = "0.2.2", default-features = false, features = ["alloc", "secp256k1-ffi"] }
bitcoin_hashes = "0.11"
bitcrypto = { path = "../mm2_bitcoin/crypto" }
byteorder = "1.3"
bytes = "0.4"
cfg-if = "1.0"
chain = { path = "../mm2_bitcoin/chain" }
common = { path = "../common" }
cosmrs = { version = "0.7", default-features = false }
crossbeam = "0.8"
crypto = { path = "../crypto" }
db_common = { path = "../db_common" }
derive_more = "0.99"
ed25519-dalek = "1.0.1"
enum_from = { path = "../derives/enum_from" }
ethabi = { version = "17.0.0" }
ethcore-transaction = { git = "https://github.com/KomodoPlatform/mm2-parity-ethereum.git" }
ethereum-types = { version = "0.13", default-features = false, features = ["std", "serialize"] }
ethkey = { git = "https://github.com/KomodoPlatform/mm2-parity-ethereum.git" }
# Waiting for https://github.com/rust-lang/rust/issues/54725 to use on Stable.
#enum_dispatch = "0.1"
tokio-tungstenite-wasm = { git = "https://github.com/KomodoPlatform/tokio-tungstenite-wasm", rev = "d20abdb", features = ["rustls-tls-native-roots"]}
futures01 = { version = "0.1", package = "futures" }
futures-util = { version = "0.3", default-features = false, features = ["sink", "std"] }
# using select macro requires the crate to be named futures, compilation failed with futures03 name
futures = { version = "0.3", package = "futures", features = ["compat", "async-await"] }
group = "0.8.0"
gstuff = { version = "0.7", features = ["nightly"] }
hex = "0.4.2"
http = "0.2"
itertools = { version = "0.10", features = ["use_std"] }
jsonrpc-core = "18.0.0"
keys = { path = "../mm2_bitcoin/keys" }
lazy_static = "1.4"
libc = "0.2"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_git = { path = "../mm2_git" }
mm2_io = { path = "../mm2_io" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_net = { path = "../mm2_net" }
mm2_number = { path = "../mm2_number"}
mm2_rpc = { path = "../mm2_rpc" }
mm2_state_machine = { path = "../mm2_state_machine" }
mocktopus = "0.8.0"
num-traits = "0.2"
parking_lot = { version = "0.12.0", features = ["nightly"] }
primitives = { path = "../mm2_bitcoin/primitives" }
prost = "0.10"
protobuf = "2.20"
rand = { version = "0.7", features = ["std", "small_rng"] }
regex = "1"
rlp = { version = "0.5" }
rmp-serde = "0.14.3"
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
script = { path = "../mm2_bitcoin/script" }
secp256k1 = { version = "0.20" }
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serde = "1.0"
serde_derive = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
serialization = { path = "../mm2_bitcoin/serialization" }
serialization_derive = { path = "../mm2_bitcoin/serialization_derive" }
spv_validation = { path = "../mm2_bitcoin/spv_validation" }
sha2 = "0.9"
sha3 = "0.9"
utxo_signer = { path = "utxo_signer" }
# using the same version as cosmrs
tendermint-rpc = { version = "=0.23.7", default-features = false }
tiny-bip39 = "0.8.0"
url = { version = "2.2.2", features = ["serde"] }
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }
# One of web3 dependencies is the old `tokio-uds 0.1.7` which fails cross-compiling to ARM.
# We don't need the default web3 features at all since we added our own web3 transport using shared HYPER instance.
web3 = { git = "https://github.com/KomodoPlatform/rust-web3", tag = "v0.19.0", default-features = false }
zbase32 = "0.1.2"
zcash_client_backend = { git = "https://github.com/KomodoPlatform/librustzcash.git", tag = "k-1.3.0" }
zcash_primitives = { features = ["transparent-inputs"], git = "https://github.com/KomodoPlatform/librustzcash.git", tag = "k-1.3.0" }
zcash_proofs = { git = "https://github.com/KomodoPlatform/librustzcash.git", tag = "k-1.3.0" }

[target.'cfg(all(not(target_os = "ios"), not(target_os = "android"), not(target_arch = "wasm32")))'.dependencies]
bincode = { version = "1.3.3", default-features = false, optional = true }
ed25519-dalek-bip32 = { version = "0.2.0", default-features = false, optional = true }
solana-client = { version = "1", default-features = false, optional = true }
solana-sdk = { version = "1", default-features = false, optional = true }
solana-transaction-status = { version = "1", optional = true }
spl-token = { version = "3", optional = true }
spl-associated-token-account = { version = "1", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.27" }
mm2_db = { path = "../mm2_db" }
mm2_metamask = { path = "../mm2_metamask" }
mm2_test_helpers = { path = "../mm2_test_helpers" }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.2" }
web-sys = { version = "0.3.55", features = ["console", "Headers", "Request", "RequestInit", "RequestMode", "Response", "Window"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dirs = { version = "1" }
bitcoin = "0.29"
hyper = { version = "0.14.26", features = ["client", "http2", "server", "tcp"] }
# using webpki-tokio to avoid rejecting valid certificates
# got "invalid certificate: UnknownIssuer" for https://ropsten.infura.io on iOS using default-features
hyper-rustls = { version = "0.23", default-features = false, features = ["http1", "http2", "webpki-tokio"] }
lightning = "0.0.113"
lightning-background-processor = "0.0.113"
lightning-invoice = { version = "0.21.0", features = ["serde"] }
lightning-net-tokio = "0.0.113"
rust-ini = { version = "0.13" }
rustls = { version = "0.20", features = ["dangerous_configuration"] }
secp256k1v24 = { version = "0.24", package = "secp256k1" }
tendermint-config = { version = "0.23.7", default-features = false }
tokio = { version = "1.20" }
tokio-rustls = { version = "0.23" }
tonic = { version = "0.7", features = ["tls", "tls-webpki-roots", "compression"] }
webpki-roots = { version = "0.22" }
zcash_client_sqlite = { git = "https://github.com/KomodoPlatform/librustzcash.git", tag = "k-1.3.0" }

[target.'cfg(windows)'.dependencies]
winapi = "0.3"

[dev-dependencies]
mm2_test_helpers = { path = "../mm2_test_helpers" }

[build-dependencies]
prost-build = { version = "0.10.4", default-features = false }
tonic-build = { version = "0.7", features = ["prost", "compression"] }
./mm2src/coins/utxo_signer/Cargo.toml
[package]
name = "utxo_signer"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
chain = { path = "../../mm2_bitcoin/chain" }
common = { path = "../../common" }
mm2_err_handle = { path = "../../mm2_err_handle" }
crypto = { path = "../../crypto" }
derive_more = "0.99"
hex = "0.4.2"
keys = { path = "../../mm2_bitcoin/keys" }
primitives = { path = "../../mm2_bitcoin/primitives" }
rpc = { path = "../../mm2_bitcoin/rpc" }
script = { path = "../../mm2_bitcoin/script" }
serialization = { path = "../../mm2_bitcoin/serialization" }
./mm2src/mm2_bitcoin/crypto/Cargo.toml
[package]
name = "bitcrypto"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
groestl = "0.9"
primitives = { path = "../primitives" }
ripemd160 = "0.9.0"
sha-1 = "0.9"
sha2 = "0.9"
sha3 = "0.9"
siphasher = "0.1.1"
serialization = { path = "../serialization" }
./mm2src/mm2_bitcoin/spv_validation/Cargo.toml
[package]
name = "spv_validation"
version = "0.1.0"
authors = ["Roman Sztergbaum <rmscastle@gmail.com>"]
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
chain = {path = "../chain"}
derive_more = "0.99"
keys = {path = "../keys"}
primitives = { path = "../primitives" }
ripemd160 = "0.9.0"
rustc-hex = "2"
serde = "1.0"
serialization = { path = "../serialization" }
sha2 = "0.9"
test_helpers = { path = "../test_helpers" }

[dev-dependencies]
common = { path = "../../common" }
lazy_static = "1.4"
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
./mm2src/mm2_bitcoin/serialization/Cargo.toml
[package]
name = "serialization"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
byteorder = "1.0"
primitives = { path = "../primitives" }
derive_more = "0.99"
test_helpers = { path = "../test_helpers" }
./mm2src/mm2_bitcoin/chain/Cargo.toml
[package]
name = "chain"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
rustc-hex = "2"
bitcrypto = { path = "../crypto" }
primitives = { path = "../primitives" }
serialization = { path = "../serialization" }
serialization_derive = { path = "../serialization_derive" }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
bitcoin = "0.29"
./mm2src/mm2_bitcoin/script/Cargo.toml
[package]
name = "script"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
bitcrypto = { path = "../crypto" }
chain = { path = "../chain" }
keys = { path = "../keys" }
primitives = { path = "../primitives" }
serde = "1.0"
serialization = { path = "../serialization" }
log = "0.4.17"
blake2b_simd = "0.5"./mm2src/mm2_bitcoin/primitives/Cargo.toml
[package]
name = "primitives"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
rustc-hex = "2"
bitcoin_hashes = "0.11"
byteorder = "1.0"
uint = "0.9.3"
./mm2src/mm2_bitcoin/serialization_derive/Cargo.toml
[package]
name = "serialization_derive"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
name = "serialization_derive"
proc-macro = true
doctest = false

[dependencies]
syn = "0.11.11"
quote = "0.3.15"

[dev-dependencies]
serialization = { path = "../serialization" }
./mm2src/mm2_bitcoin/keys/Cargo.toml
[package]
name = "keys"
version = "0.1.0"
authors = ["debris <marek.kotewicz@gmail.com>"]

[lib]
doctest = false

[dependencies]
rustc-hex = "2"
base58 = "0.2"
bech32 = "0.9.1"
bitcrypto = { path = "../crypto" }
derive_more = "0.99"
lazy_static = "1.4"
rand = "0.6"
primitives = { path = "../primitives" }
secp256k1 = { version = "0.20", features = ["rand", "recovery"] }
serde = { version = "1.0", features = ["derive"] }
serde_derive = "1.0"
./mm2src/mm2_bitcoin/rpc/Cargo.toml
[package]
name = "rpc"
version = "0.1.0"
authors = ["Ethcore <admin@ethcore.io>"]

[lib]
doctest = false

[dependencies]
log = "0.4.17"
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
serde_derive = "1.0"
rustc-hex = "2"

serialization = { path = "../serialization" }
chain = { path = "../chain" }
primitives = { path = "../primitives" }
keys = { path = "../keys" }
script = { path = "../script" }

[dev-dependencies]
lazy_static = "1.4"./mm2src/mm2_bitcoin/test_helpers/Cargo.toml
[package]
name = "test_helpers"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
hex = "0.4.2"
./mm2src/mm2_bin_lib/Cargo.toml
# Support for split-debuginfo [should eventually](https://github.com/rust-lang/rust/issues/34651) land,
# hopefully giving us an out-of-the-box way to separate the code from the debugging information.
# We should use the "objcopy --only-keep-debug" and "add-symbol-file" meanwhile
# and separating stack tracing into raw trace and symbolication parts.

[package]
name = "mm2_bin_lib"
version = "2.0.0-beta"
authors = ["James Lee", "Artem Pikulin", "Artem Grinblat", "Omar S.", "Onur Ozkan", "Alina Sharon", "Caglar Kaya", "Cipi", "Sergey Boiko", "Samuel Onoja", "Roman Sztergbaum", "Kadan Stadelmann <ca333@komodoplatform.com>", "Dimxy"]
edition = "2018"
default-run = "mm2"

# wasm-opt reduces the size from 17 Mb to 14. But it runs for few minutes, which is not good for CI.
# For production builds, it's recommended to run wasm-opt separately.
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[features]
custom-swap-locktime = ["mm2_main/custom-swap-locktime"] # only for testing purposes, should never be activated on release builds.
native = ["mm2_main/native"] # Deprecated
track-ctx-pointer = ["mm2_main/track-ctx-pointer"]
zhtlc-native-tests = ["mm2_main/zhtlc-native-tests"]

[[bin]]
name = "mm2"
path = "src/mm2_bin.rs"
test = false
doctest = false
bench = false

[lib]
name = "mm2lib"
crate-type = ["cdylib"]
test = false
doctest = false
bench = false

[dependencies]
common = { path = "../common" }
enum-primitive-derive = "0.2"
libc = "0.2"
mm2_core = { path = "../mm2_core" }
mm2_main = { path = "../mm2_main" }
num-traits = "0.2"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
gstuff = { version = "0.7", features = ["nightly"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.27" }
mm2_rpc = { path = "../mm2_rpc", features=["rpc_facilities"] }
serde = "1.0"
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }

[target.x86_64-unknown-linux-gnu.dependencies]
jemallocator = "0.5.0"

[build-dependencies]
chrono = "0.4"
gstuff = { version = "0.7", features = ["nightly"] }
regex = "1"
./mm2src/mm2_libp2p/Cargo.toml
[package]
name = "mm2-libp2p"
version = "0.1.0"
authors = ["Artem Pikulin <ortgma@gmail.com>"]
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
atomicdex-gossipsub = { path = "../gossipsub" }
common = { path = "../common" }
derive_more = "0.99"
libp2p-floodsub = { path = "../floodsub" }
futures = { version = "0.3.1", package = "futures", features = ["compat", "async-await"] }
futures-rustls = { version = "0.21.1" }
hex = "0.4.2"
lazy_static = "1.4"
secp256k1 = { version = "0.20", features = ["rand"] }
log = "0.4.17"
rand = { package = "rand", version = "0.7", features = ["std", "wasm-bindgen"] }
regex = "1"
rmp-serde = "0.14.3"
serde = { version = "1.0", features = ["derive"] }
serde_bytes = "0.11.5"
sha2 = "0.9"
void = "1.0"
wasm-timer = "0.2.4"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { version = "1.20", features = ["rt-multi-thread", "macros"] }
libp2p = { git = "https://github.com/libp2p/rust-libp2p.git", tag = "v0.45.1", default-features = false, features = ["dns-tokio", "floodsub", "mplex", "noise", "ping", "request-response", "secp256k1", "tcp-tokio", "websocket"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
libp2p = { git = "https://github.com/libp2p/rust-libp2p.git", tag = "v0.45.1", default-features = false, features = ["floodsub", "mplex", "noise", "ping", "request-response", "secp256k1", "wasm-ext", "wasm-ext-websocket"] }
wasm-bindgen-futures = "0.4.21"

[dev-dependencies]
async-std = { version = "1.6.2", features = ["unstable"] }
env_logger = "0.9.3"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
./mm2src/common/Cargo.toml
[package]
name = "common"
version = "0.1.0"
links = "marketmaker-mainnet-lib"
edition = "2018"

[lib]
name = "common"
path = "common.rs"
doctest = false

[features]
track-ctx-pointer = ["shared_ref_counter/enable", "shared_ref_counter/log"]

[dependencies]
arrayref = "0.3"
async-trait = "0.1"
backtrace = "0.3"
bytes = "1.1"
cfg-if = "1.0"
crossbeam = "0.8"
env_logger = "0.9.3"
derive_more = "0.99"
fnv = "1.0.6"
futures01 = { version = "0.1", package = "futures" }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
futures-timer = "3.0"
hex = "0.4.2"
http = "0.2"
http-body = "0.1"
itertools = "0.10"
lazy_static = "1.4"
log = "0.4.17"
parking_lot = { version = "0.12.0", features = ["nightly"] }
parking_lot_core = { version = "0.6", features = ["nightly"] }
primitive-types = "0.11.1"
rand = { version = "0.7", features = ["std", "small_rng"] }
regex = "1"
serde = "1"
serde_derive = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
sha2 = "0.9"
shared_ref_counter = { path = "shared_ref_counter", optional = true }
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }
instant = { version = "0.1.12" }

[target.'cfg(target_arch = "wasm32")'.dependencies]
chrono = { version = "0.4", features = ["wasmbind"] }
gstuff = { version = "0.7", features = ["nightly"] }
instant = { version = "0.1.12", features = ["wasm-bindgen"] }
js-sys = "0.3.27"
serde_repr = "0.1.6"
serde-wasm-bindgen = "0.4.3"
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = "0.4.21"
wasm-bindgen-test = { version = "0.3.2" }
web-sys = { version = "0.3.55", features = ["console", "CloseEvent", "DomException", "ErrorEvent", "IdbDatabase", "IdbCursor", "IdbCursorWithValue", "IdbFactory", "IdbIndex", "IdbIndexParameters", "IdbObjectStore", "IdbObjectStoreParameters", "IdbOpenDbRequest", "IdbKeyRange", "IdbTransaction", "IdbTransactionMode", "IdbVersionChangeEvent", "MessageEvent", "WebSocket"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
anyhow = "1.0"
chrono = "0.4"
gstuff = { version = "0.7", features = ["nightly"] }
hyper = { version = "0.14.26", features = ["client", "http2", "server", "tcp"] }
# using webpki-tokio to avoid rejecting valid certificates
# got "invalid certificate: UnknownIssuer" for https://ropsten.infura.io on iOS using default-features
hyper-rustls = { version = "0.23", default-features = false, features = ["http1", "http2", "webpki-tokio"] }
libc = { version = "0.2" }
lightning = "0.0.113"
tokio = { version = "1.20", features = ["io-util", "rt-multi-thread", "net"] }

[target.'cfg(windows)'.dependencies]
winapi = "0.3"

[target.'cfg(not(windows))'.dependencies]
findshlibs = "0.5"

[build-dependencies]
cc = "1.0"
gstuff = { version = "0.7", features = ["nightly"] }
./mm2src/common/shared_ref_counter/Cargo.toml
[package]
name = "shared_ref_counter"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[features]
enable = []

[dependencies]
log = { version = "0.4.17", optional = true }
./mm2src/mm2_event_stream/Cargo.toml
[package]
name = "mm2_event_stream"
version = "0.1.0"
edition = "2021"

[dependencies]
async-trait = "0.1"
cfg-if = "1.0"
common = { path = "../common" }
futures = { version = "0.3", default-features = false }
parking_lot = "0.12"
serde = { version = "1", features = ["derive", "rc"] }
tokio = { version = "1", features = ["sync"] }

[dev-dependencies]
tokio = { version = "1", features = ["sync", "macros", "time", "rt"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-test = { version = "0.3.2" }
./mm2src/adex_cli/Cargo.toml
[package]
name = "adex-cli"
version = "0.1.0"
edition = "2021"
authors = ["Rozhkov Dmitrii <rozhkov@komodoplatform.com>"]
description = "Provides a CLI interface and facilitates interoperating to komodo atomic dex through the mm2 service"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
anyhow = { version = "=1.0.42", features  = ["std"] }
async-trait = "=0.1.52"
clap = { version = "4.2", features = ["derive"] }
common = { path = "../common" }
derive_more = "0.99"
directories = "5.0"
env_logger = "0.7.1"
http = "0.2"
hyper = { version = "0.14.26", features = ["client", "http2", "tcp"] }
hyper-rustls = "=0.23.0"
gstuff = { version = "=0.7.4" , features = [ "nightly" ]}
inquire = "0.6"
itertools = "0.10"
log = "0.4"
mm2_net = { path = "../mm2_net" }
mm2_number = { path = "../mm2_number" }
mm2_rpc = { path = "../mm2_rpc"}
passwords = "3.1"
rpc = { path = "../mm2_bitcoin/rpc" }
rustls = { version = "=0.20.4", features = [ "dangerous_configuration" ] }
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
sysinfo = "0.28"
tiny-bip39 = "0.8.0"
tokio = { version = "=1.25.0", features = [ "macros" ] }
uuid = { version = "=1.2.2", features = ["fast-rng", "serde", "v4"] }

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.3", features = ["processthreadsapi", "winnt"] }
./mm2src/derives/ser_error/Cargo.toml
[package]
name = "ser_error"
version = "0.1.0"
authors = ["Sergey O. Boyko <sergey.boyko0791@gmail.com>"]
edition = "2018"

[lib]
doctest = false

[dependencies]
serde = "1.0"
./mm2src/derives/enum_from/Cargo.toml
[package]
name = "enum_from"
version = "0.1.0"
edition = "2021"

[lib]
proc-macro = true
doctest = false

[dependencies]
syn = { version = "1.0", features = ["full"] }
quote = "1.0"
proc-macro2 = "1.0"
itertools = "0.10"
./mm2src/derives/ser_error_derive/Cargo.toml
[package]
name = "ser_error_derive"
version = "0.1.0"
authors = ["Sergey O. Boyko <sergey.boyko0791@gmail.com>"]
edition = "2018"

[lib]
proc-macro = true
doctest = false

[dependencies]
proc-macro2 = "1.0"
quote = "1.0"
ser_error = { path = "../ser_error" }
syn = { version = "1.0", features = ["full"] }
./mm2src/peers/Cargo.toml
./mm2src/mm2_core/Cargo.toml
[package]
name = "mm2_core"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
arrayref = "0.3"
async-trait = "0.1"
cfg-if = "1.0"
common = { path = "../common" }
db_common = { path = "../db_common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
hex = "0.4.2"
lazy_static = "1.4"
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_metrics = { path = "../mm2_metrics" }
primitives = { path = "../mm2_bitcoin/primitives" }
rand = { version = "0.7", features = ["std", "small_rng", "wasm-bindgen"] }
serde = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
shared_ref_counter = { path = "../common/shared_ref_counter" }
uuid = { version = "1.2.2", features = ["fast-rng", "serde", "v4"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
gstuff = { version = "0.7", features = ["nightly"] }
mm2_rpc = { path = "../mm2_rpc", features = [ "rpc_facilities" ] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
futures-rustls = { version = "0.21.1" }
gstuff = { version = "0.7", features = ["nightly"] }
./mm2src/floodsub/Cargo.toml
[package]
name = "libp2p-floodsub"
edition = "2018"
description = "Floodsub protocol for libp2p"
version = "0.22.0"
authors = ["Parity Technologies <admin@parity.io>"]
license = "MIT"
repository = "https://github.com/libp2p/rust-libp2p"
keywords = ["peer-to-peer", "libp2p", "networking"]
categories = ["network-programming", "asynchronous"]

[lib]
doctest = false

[dependencies]
cuckoofilter = "0.3.2"
futures = "0.3.1"
libp2p-core = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
libp2p-swarm = { git = "https://github.com/libp2p/rust-libp2p.git", tag ="v0.45.1" }
prost = "0.10"
rand = "0.7"
smallvec = "1.0"

[build-dependencies]
prost-build = { version = "0.10.4", default-features = false }
./mm2src/mm2_db/Cargo.toml
[package]
name = "mm2_db"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[target.'cfg(target_arch = "wasm32")'.dependencies]
async-trait = "0.1"
common = { path = "../common" }
derive_more = "0.99"
enum_from = { path = "../derives/enum_from" }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
itertools = "0.10"
hex = "0.4.2"
js-sys = "0.3.27"
lazy_static = "1.4"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_number = { path = "../mm2_number" }
num-traits = "0.2"
primitives = { path = "../mm2_bitcoin/primitives" }
rand = { version = "0.7", features = ["std", "small_rng", "wasm-bindgen"] }
serde = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.2" }
web-sys = { version = "0.3.55", features = ["console", "CloseEvent", "DomException", "ErrorEvent", "IdbDatabase", "IdbCursor", "IdbCursorWithValue", "IdbCursorDirection", "IdbFactory", "IdbIndex", "IdbIndexParameters", "IdbObjectStore", "IdbObjectStoreParameters", "IdbOpenDbRequest", "IdbKeyRange", "IdbTransaction", "IdbTransactionMode", "IdbVersionChangeEvent", "MessageEvent", "WebSocket"] }
./mm2src/coins_activation/Cargo.toml
[package]
name = "coins_activation"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[features]
enable-solana = []
default = []

[dependencies]
async-trait = "0.1"
coins = { path = "../coins" }
common = { path = "../common" }
crypto = { path = "../crypto" }
derive_more = "0.99"
ethereum-types = { version = "0.13", default-features = false, features = ["std", "serialize"] }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await"] }
hex = "0.4.2"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_number = { path = "../mm2_number" }
parking_lot = { version = "0.12.0", features = ["nightly"] }
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serde = "1.0"
serde_derive = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
mm2_metamask = { path = "../mm2_metamask" }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
lightning = "0.0.113"
lightning-background-processor = "0.0.113"
lightning-invoice = { version = "0.21.0", features = ["serde"] }
./mm2src/rpc_task/Cargo.toml
[package]
name = "rpc_task"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
common = { path = "../common" }
mm2_err_handle = { path = "../mm2_err_handle" }
derive_more = "0.99"
futures = "0.3"
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serde = "1"
serde_derive = "1"
./mm2src/mm2_gui_storage/Cargo.toml
[package]
name = "mm2_gui_storage"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
common = { path = "../common" }
db_common = { path = "../db_common" }
derive_more = "0.99"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_number = { path = "../mm2_number" }
rpc = { path = "../mm2_bitcoin/rpc" }
serde = "1.0"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
serde_repr = "0.1"
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }

[target.'cfg(target_arch = "wasm32")'.dependencies]
mm2_db = { path = "../mm2_db" }
mm2_test_helpers = { path = "../mm2_test_helpers" }
wasm-bindgen-test = { version = "0.3.2" }

[dev-dependencies]
mm2_test_helpers = { path = "../mm2_test_helpers" }
./mm2src/mm2_net/Cargo.toml
[package]
name = "mm2_net"
version = "0.1.0"
edition = "2018"

[lib]
doctest = false

[features]
event-stream = ["mm2_event_stream", "async-stream" , "p2p"]
p2p = ["mm2-libp2p", "parking_lot"]

[dependencies]
async-stream = { version = "0.3", optional = true }
async-trait = "0.1"
bytes = "1.1"
cfg-if = "1.0"
common = { path = "../common" }
derive_more = "0.99"
ethkey = { git = "https://github.com/KomodoPlatform/mm2-parity-ethereum.git" }
futures = { version = "0.3", package = "futures", features = ["compat", "async-await", "thread-pool"] }
http = "0.2"
lazy_static = "1.4"
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream", optional = true }
mm2-libp2p = { path = "../mm2_p2p", package = "mm2_p2p", optional = true }
parking_lot = { version = "0.12.0", features = ["nightly"], optional = true }
prost = "0.10"
rand = { version = "0.7", features = ["std", "small_rng", "wasm-bindgen"] }
serde = "1"
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
gstuff = { version = "0.7", features = ["nightly"] }
mm2_state_machine = { path = "../mm2_state_machine"}
wasm-bindgen = "0.2.86"
wasm-bindgen-test = { version = "0.3.2" }
wasm-bindgen-futures = "0.4.21"
web-sys = { version = "0.3.55", features = ["console", "CloseEvent", "DomException", "ErrorEvent", "IdbDatabase", "IdbCursor", "IdbCursorWithValue", "IdbFactory", "IdbIndex", "IdbIndexParameters", "IdbObjectStore", "IdbObjectStoreParameters", "IdbOpenDbRequest", "IdbKeyRange", "IdbTransaction", "IdbTransactionMode", "IdbVersionChangeEvent", "MessageEvent", "WebSocket", "Worker"] }
js-sys = "0.3.27"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
futures-util = { version = "0.3" }
hyper = { version = "0.14.26", features = ["client", "http2", "server", "tcp", "stream"] }
gstuff = { version = "0.7", features = ["nightly"] }
rustls = { version = "0.20", default-features = false }
tokio = { version = "1.20" }
tokio-rustls = { version = "0.23", default-features = false }
./mm2src/trezor/Cargo.toml
[package]
name = "trezor"
version = "0.1.1"
edition = "2018"

[lib]
doctest = false

[dependencies]
async-trait = "0.1"
byteorder = "1.3.2"
common = { path = "../common" }
derive_more = "0.99"
futures = { version = "0.3", package = "futures", features = ["compat", "async-await"] }
hw_common = { path = "../hw_common" }
mm2_err_handle = { path = "../mm2_err_handle" }
prost = "0.10"
rand = { version = "0.7", features = ["std", "wasm-bindgen"] }
rpc_task = { path = "../rpc_task" }
serde = "1.0"
serde_derive = "1.0"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
bip32 = { version = "0.2.2", default-features = false, features = ["alloc", "secp256k1-ffi"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = { version = "0.3.27" }
wasm-bindgen = "0.2.86"
wasm-bindgen-futures = { version = "0.4.1" }
wasm-bindgen-test = { version = "0.3.1" }
web-sys = { version = "0.3.55" }
./mm2src/mm2_number/Cargo.toml
[package]
name = "mm2_number"
version = "0.1.0"
edition = "2021"

[lib]
doctest = false

[dependencies]
bigdecimal = { version = "0.3", features = ["serde"] }
num-bigint = { version = "0.4", features = ["serde", "std"] }
num-rational = { version = "0.4", features = ["serde"] }
num-traits = "0.2"
paste = "1.0"
serde = { version = "1", features = ["serde_derive"] }
serde_json = { version = "1", features = ["preserve_order", "raw_value"] }
./rust-toolchain.toml
[toolchain]
channel = "nightly-2022-10-29"
components = ["rustfmt", "clippy"]
