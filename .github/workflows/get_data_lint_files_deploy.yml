name: Get file and author data, validate and update internal links, deploy

on:
  push:
    branches: ["dev"]
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

jobs:
  update_lint_get_data_build_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Generate configs
        shell: bash
        run: ${GITHUB_WORKSPACE}/utils/gen_api_methods_table.py

      - name: Install dependencies
        shell: bash
        run: cd utils/js && npm ci

      - name: Get file and Author data
        run: node utils/js/get_file_author_data.js

      - name: Validate and Update links
        run: node utils/js/validate_update_internal_links_userpass.js

      - name: Check presence of file and dirs
        run: node utils/js/file_presence_structure_checker.js

      - name: Verify h1 is present in every file
        run: node utils/js/h1_presence_checker.js

      - name: Set lint-fix branch name
        id: vars
        shell: bash
        run: |
          branch_name="lint-fix-patches/${GITHUB_HEAD_REF:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "[Bot] File and author data updated, validated and updated internal links, formatted md content, checked presence of file and dirs based on sidebar, checked presence of h1 in every file, update atomicdex methods table"
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: ${{ steps.vars.outputs.branch_name}}
          delete-branch: true
          title: "[BOT] To ${{ steps.vars.outputs.branch_name}}. Lints file structure, file contents, gets author data, Updates AtomicDEX API Methods Table"
          body: |
            -  File and author data updated, validated and updated internal links, formatted md content, checked presence of file and dirs based on sidebar, checked presence of h1 in every file, AtomicDEX API Methods Table auto-generated
          labels: |
            autogenerated
          reviewers: smk762, gcharang
          draft: false

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.DOCS_UI_SSH_PRIVATE_KEY }}
          repository: KomodoPlatform/website-komodo-docs
          path: "./frontend-repo"

      - name: Sync updated content to frontend repo dir, change working dir
        run: |
          rsync -avh --delete --exclude='optimized/*' --exclude='next-image-export-optimizer-hashes.json' ./src/images/ ./frontend-repo/public/images/
          rsync -avh --delete ./src/pages/antara/ ./frontend-repo/src/pages/antara/
          rsync -avh --delete ./src/pages/atomicdex/ ./frontend-repo/src/pages/atomicdex/
          rsync -avh --delete ./src/pages/historical/ ./frontend-repo/src/pages/historical/
          rsync -avh --delete ./src/pages/smart-chains/ ./frontend-repo/src/pages/smart-chains/
          rsync -avh --delete ./src/pages/start-here/ ./frontend-repo/src/pages/start-here/
          rsync -avh --delete ./postman/ ./frontend-repo/postman/
          rm -f ./frontend-repo/src/data/sidebar.json && cp ./src/data/sidebar.json ./frontend-repo/src/data/sidebar.json
          rsync -avh --delete ./authors.json ./frontend-repo/authors.json
          rsync -avh --delete ./utils/_fileData.json ./frontend-repo/_fileData.json
          cd frontend-repo
          pwd
          ls

      - name: Extract branch name
        shell: bash
        run: |
          BRANCH="${GITHUB_HEAD_REF:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}"
          echo "encoded_branch=${encoded_branch_name}" >> $GITHUB_OUTPUT
          echo ${encoded_branch_name}
        id: extract_and_encode_branch

      - name: Shortify commit sha
        shell: bash
        run: |
          echo "sha_short=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT
        id: shortify_commit

      - uses: actions/setup-node@v3
        with:
          node-version: "16.14"
          cache: yarn

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key:
            nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
            # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install build deps
        run: yarn install

      - name: Build
        run: yarn export:cfp

      - name: Add no-index headers before pubishing to cloudflare
        run: |
          echo -e "https://:project.pages.dev/*\n  X-Robots-Tag: noindex" > ./out/_headers

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: cf_publish
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: komodo-docs
          directory: ./out
          #gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: "3"
          branch: ${{ steps.extract_and_encode_branch.outputs.encoded_branch }}

      - name: Post CF preview url
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Preview for merge commit: ${{ steps.shortify_commit.outputs.sha_short }}, available on cloudflare at: ${{ steps.cf_publish.outputs.url }}/en/docs/"
            })
